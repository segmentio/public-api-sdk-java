/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.api;

import com.google.gson.reflect.TypeToken;
import com.segment.publicapi.ApiCallback;
import com.segment.publicapi.ApiClient;
import com.segment.publicapi.ApiException;
import com.segment.publicapi.ApiResponse;
import com.segment.publicapi.Configuration;
import com.segment.publicapi.Pair;
import com.segment.publicapi.models.CreateAudience200Response;
import com.segment.publicapi.models.CreateAudienceAlphaInput;
import com.segment.publicapi.models.ListAudiences200Response;
import com.segment.publicapi.models.PaginationInput;
import com.segment.publicapi.models.RemoveAudienceFromSpace200Response;
import com.segment.publicapi.models.UpdateAudienceForSpace200Response;
import com.segment.publicapi.models.UpdateAudienceForSpaceInput;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AudiencesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AudiencesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AudiencesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createAudience
     *
     * @param spaceId (required)
     * @param createAudienceAlphaInput (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createAudienceCall(
            String spaceId,
            CreateAudienceAlphaInput createAudienceAlphaInput,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAudienceAlphaInput;

        // create path and map variables
        String localVarPath =
                "/spaces/{spaceId}/audiences"
                        .replace(
                                "{" + "spaceId" + "}",
                                localVarApiClient.escapeString(spaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/vnd.segment.v1alpha+json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAudienceValidateBeforeCall(
            String spaceId,
            CreateAudienceAlphaInput createAudienceAlphaInput,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'spaceId' when calling createAudience(Async)");
        }

        // verify the required parameter 'createAudienceAlphaInput' is set
        if (createAudienceAlphaInput == null) {
            throw new ApiException(
                    "Missing the required parameter 'createAudienceAlphaInput' when calling"
                            + " createAudience(Async)");
        }

        return createAudienceCall(spaceId, createAudienceAlphaInput, _callback);
    }

    /**
     * Create Audience Creates Audience. • This endpoint is in **Alpha** testing. Please submit any
     * feedback by sending email to friends@segment.com. • In order to successfully call this
     * endpoint, the specified Workspace needs to have the Audience feature enabled. Please reach
     * out to your customer success manager for more information.
     *
     * @param spaceId (required)
     * @param createAudienceAlphaInput (required)
     * @return CreateAudience200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public CreateAudience200Response createAudience(
            String spaceId, CreateAudienceAlphaInput createAudienceAlphaInput) throws ApiException {
        ApiResponse<CreateAudience200Response> localVarResp =
                createAudienceWithHttpInfo(spaceId, createAudienceAlphaInput);
        return localVarResp.getData();
    }

    /**
     * Create Audience Creates Audience. • This endpoint is in **Alpha** testing. Please submit any
     * feedback by sending email to friends@segment.com. • In order to successfully call this
     * endpoint, the specified Workspace needs to have the Audience feature enabled. Please reach
     * out to your customer success manager for more information.
     *
     * @param spaceId (required)
     * @param createAudienceAlphaInput (required)
     * @return ApiResponse&lt;CreateAudience200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CreateAudience200Response> createAudienceWithHttpInfo(
            String spaceId, CreateAudienceAlphaInput createAudienceAlphaInput) throws ApiException {
        okhttp3.Call localVarCall =
                createAudienceValidateBeforeCall(spaceId, createAudienceAlphaInput, null);
        Type localVarReturnType = new TypeToken<CreateAudience200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Audience (asynchronously) Creates Audience. • This endpoint is in **Alpha** testing.
     * Please submit any feedback by sending email to friends@segment.com. • In order to
     * successfully call this endpoint, the specified Workspace needs to have the Audience feature
     * enabled. Please reach out to your customer success manager for more information.
     *
     * @param spaceId (required)
     * @param createAudienceAlphaInput (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createAudienceAsync(
            String spaceId,
            CreateAudienceAlphaInput createAudienceAlphaInput,
            final ApiCallback<CreateAudience200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                createAudienceValidateBeforeCall(spaceId, createAudienceAlphaInput, _callback);
        Type localVarReturnType = new TypeToken<CreateAudience200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getAudience
     *
     * @param spaceId (required)
     * @param id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getAudienceCall(String spaceId, String id, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/spaces/{spaceId}/audiences/{id}"
                        .replace(
                                "{" + "spaceId" + "}",
                                localVarApiClient.escapeString(spaceId.toString()))
                        .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAudienceValidateBeforeCall(
            String spaceId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'spaceId' when calling getAudience(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling getAudience(Async)");
        }

        return getAudienceCall(spaceId, id, _callback);
    }

    /**
     * Get Audience Returns the Audience by id and spaceId. • This endpoint is in **Alpha** testing.
     * Please submit any feedback by sending email to friends@segment.com. • In order to
     * successfully call this endpoint, the specified Workspace needs to have the Audience feature
     * enabled. Please reach out to your customer success manager for more information. The rate
     * limit for this endpoint is 100 requests per minute, which is lower than the default due to
     * access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP
     * status code with headers indicating the limit parameters. See [Rate
     * Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param spaceId (required)
     * @param id (required)
     * @return CreateAudience200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public CreateAudience200Response getAudience(String spaceId, String id) throws ApiException {
        ApiResponse<CreateAudience200Response> localVarResp = getAudienceWithHttpInfo(spaceId, id);
        return localVarResp.getData();
    }

    /**
     * Get Audience Returns the Audience by id and spaceId. • This endpoint is in **Alpha** testing.
     * Please submit any feedback by sending email to friends@segment.com. • In order to
     * successfully call this endpoint, the specified Workspace needs to have the Audience feature
     * enabled. Please reach out to your customer success manager for more information. The rate
     * limit for this endpoint is 100 requests per minute, which is lower than the default due to
     * access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP
     * status code with headers indicating the limit parameters. See [Rate
     * Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param spaceId (required)
     * @param id (required)
     * @return ApiResponse&lt;CreateAudience200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CreateAudience200Response> getAudienceWithHttpInfo(String spaceId, String id)
            throws ApiException {
        okhttp3.Call localVarCall = getAudienceValidateBeforeCall(spaceId, id, null);
        Type localVarReturnType = new TypeToken<CreateAudience200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Audience (asynchronously) Returns the Audience by id and spaceId. • This endpoint is in
     * **Alpha** testing. Please submit any feedback by sending email to friends@segment.com. • In
     * order to successfully call this endpoint, the specified Workspace needs to have the Audience
     * feature enabled. Please reach out to your customer success manager for more information. The
     * rate limit for this endpoint is 100 requests per minute, which is lower than the default due
     * to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP
     * status code with headers indicating the limit parameters. See [Rate
     * Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param spaceId (required)
     * @param id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getAudienceAsync(
            String spaceId, String id, final ApiCallback<CreateAudience200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = getAudienceValidateBeforeCall(spaceId, id, _callback);
        Type localVarReturnType = new TypeToken<CreateAudience200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for listAudiences
     *
     * @param spaceId (required)
     * @param pagination Information about the pagination of this response. This parameter exists in
     *     alpha. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listAudiencesCall(
            String spaceId, PaginationInput pagination, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/spaces/{spaceId}/audiences"
                        .replace(
                                "{" + "spaceId" + "}",
                                localVarApiClient.escapeString(spaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pagination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination", pagination));
        }

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAudiencesValidateBeforeCall(
            String spaceId, PaginationInput pagination, final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'spaceId' when calling listAudiences(Async)");
        }

        // verify the required parameter 'pagination' is set
        if (pagination == null) {
            throw new ApiException(
                    "Missing the required parameter 'pagination' when calling"
                            + " listAudiences(Async)");
        }

        return listAudiencesCall(spaceId, pagination, _callback);
    }

    /**
     * List Audiences Returns Audiences by spaceId. • This endpoint is in **Alpha** testing. Please
     * submit any feedback by sending email to friends@segment.com. • In order to successfully call
     * this endpoint, the specified Workspace needs to have the Audience feature enabled. Please
     * reach out to your customer success manager for more information. The rate limit for this
     * endpoint is 25 requests per minute, which is lower than the default due to access pattern
     * restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with
     * headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more
     * information.
     *
     * @param spaceId (required)
     * @param pagination Information about the pagination of this response. This parameter exists in
     *     alpha. (required)
     * @return ListAudiences200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ListAudiences200Response listAudiences(String spaceId, PaginationInput pagination)
            throws ApiException {
        ApiResponse<ListAudiences200Response> localVarResp =
                listAudiencesWithHttpInfo(spaceId, pagination);
        return localVarResp.getData();
    }

    /**
     * List Audiences Returns Audiences by spaceId. • This endpoint is in **Alpha** testing. Please
     * submit any feedback by sending email to friends@segment.com. • In order to successfully call
     * this endpoint, the specified Workspace needs to have the Audience feature enabled. Please
     * reach out to your customer success manager for more information. The rate limit for this
     * endpoint is 25 requests per minute, which is lower than the default due to access pattern
     * restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with
     * headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more
     * information.
     *
     * @param spaceId (required)
     * @param pagination Information about the pagination of this response. This parameter exists in
     *     alpha. (required)
     * @return ApiResponse&lt;ListAudiences200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ListAudiences200Response> listAudiencesWithHttpInfo(
            String spaceId, PaginationInput pagination) throws ApiException {
        okhttp3.Call localVarCall = listAudiencesValidateBeforeCall(spaceId, pagination, null);
        Type localVarReturnType = new TypeToken<ListAudiences200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Audiences (asynchronously) Returns Audiences by spaceId. • This endpoint is in **Alpha**
     * testing. Please submit any feedback by sending email to friends@segment.com. • In order to
     * successfully call this endpoint, the specified Workspace needs to have the Audience feature
     * enabled. Please reach out to your customer success manager for more information. The rate
     * limit for this endpoint is 25 requests per minute, which is lower than the default due to
     * access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP
     * status code with headers indicating the limit parameters. See [Rate
     * Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param spaceId (required)
     * @param pagination Information about the pagination of this response. This parameter exists in
     *     alpha. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listAudiencesAsync(
            String spaceId,
            PaginationInput pagination,
            final ApiCallback<ListAudiences200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = listAudiencesValidateBeforeCall(spaceId, pagination, _callback);
        Type localVarReturnType = new TypeToken<ListAudiences200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for removeAudienceFromSpace
     *
     * @param spaceId (required)
     * @param id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call removeAudienceFromSpaceCall(
            String spaceId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/spaces/{spaceId}/audiences/{id}"
                        .replace(
                                "{" + "spaceId" + "}",
                                localVarApiClient.escapeString(spaceId.toString()))
                        .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "DELETE",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeAudienceFromSpaceValidateBeforeCall(
            String spaceId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'spaceId' when calling"
                            + " removeAudienceFromSpace(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling"
                            + " removeAudienceFromSpace(Async)");
        }

        return removeAudienceFromSpaceCall(spaceId, id, _callback);
    }

    /**
     * Remove Audience from Space Deletes an Audience by id and spaceId. • This endpoint is in
     * **Alpha** testing. Please submit any feedback by sending email to friends@segment.com. • In
     * order to successfully call this endpoint, the specified Workspace needs to have the Audience
     * feature enabled. Please reach out to your customer success manager for more information. •
     * When called, this endpoint may generate the &#x60;Audience Deleted&#x60; event in the [audit
     * trail](/tag/Audit-Trail). The rate limit for this endpoint is 20 requests per minute, which
     * is lower than the default due to access pattern restrictions. Once reached, this endpoint
     * will respond with the 429 HTTP status code with headers indicating the limit parameters. See
     * [Rate Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param spaceId (required)
     * @param id (required)
     * @return RemoveAudienceFromSpace200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public RemoveAudienceFromSpace200Response removeAudienceFromSpace(String spaceId, String id)
            throws ApiException {
        ApiResponse<RemoveAudienceFromSpace200Response> localVarResp =
                removeAudienceFromSpaceWithHttpInfo(spaceId, id);
        return localVarResp.getData();
    }

    /**
     * Remove Audience from Space Deletes an Audience by id and spaceId. • This endpoint is in
     * **Alpha** testing. Please submit any feedback by sending email to friends@segment.com. • In
     * order to successfully call this endpoint, the specified Workspace needs to have the Audience
     * feature enabled. Please reach out to your customer success manager for more information. •
     * When called, this endpoint may generate the &#x60;Audience Deleted&#x60; event in the [audit
     * trail](/tag/Audit-Trail). The rate limit for this endpoint is 20 requests per minute, which
     * is lower than the default due to access pattern restrictions. Once reached, this endpoint
     * will respond with the 429 HTTP status code with headers indicating the limit parameters. See
     * [Rate Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param spaceId (required)
     * @param id (required)
     * @return ApiResponse&lt;RemoveAudienceFromSpace200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RemoveAudienceFromSpace200Response> removeAudienceFromSpaceWithHttpInfo(
            String spaceId, String id) throws ApiException {
        okhttp3.Call localVarCall = removeAudienceFromSpaceValidateBeforeCall(spaceId, id, null);
        Type localVarReturnType = new TypeToken<RemoveAudienceFromSpace200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove Audience from Space (asynchronously) Deletes an Audience by id and spaceId. • This
     * endpoint is in **Alpha** testing. Please submit any feedback by sending email to
     * friends@segment.com. • In order to successfully call this endpoint, the specified Workspace
     * needs to have the Audience feature enabled. Please reach out to your customer success manager
     * for more information. • When called, this endpoint may generate the &#x60;Audience
     * Deleted&#x60; event in the [audit trail](/tag/Audit-Trail). The rate limit for this endpoint
     * is 20 requests per minute, which is lower than the default due to access pattern
     * restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with
     * headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more
     * information.
     *
     * @param spaceId (required)
     * @param id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call removeAudienceFromSpaceAsync(
            String spaceId,
            String id,
            final ApiCallback<RemoveAudienceFromSpace200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                removeAudienceFromSpaceValidateBeforeCall(spaceId, id, _callback);
        Type localVarReturnType = new TypeToken<RemoveAudienceFromSpace200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for updateAudienceForSpace
     *
     * @param spaceId (required)
     * @param id (required)
     * @param updateAudienceForSpaceInput (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateAudienceForSpaceCall(
            String spaceId,
            String id,
            UpdateAudienceForSpaceInput updateAudienceForSpaceInput,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAudienceForSpaceInput;

        // create path and map variables
        String localVarPath =
                "/spaces/{spaceId}/audiences/{id}"
                        .replace(
                                "{" + "spaceId" + "}",
                                localVarApiClient.escapeString(spaceId.toString()))
                        .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/vnd.segment.v1alpha+json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "PATCH",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAudienceForSpaceValidateBeforeCall(
            String spaceId,
            String id,
            UpdateAudienceForSpaceInput updateAudienceForSpaceInput,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'spaceId' when calling"
                            + " updateAudienceForSpace(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling"
                            + " updateAudienceForSpace(Async)");
        }

        // verify the required parameter 'updateAudienceForSpaceInput' is set
        if (updateAudienceForSpaceInput == null) {
            throw new ApiException(
                    "Missing the required parameter 'updateAudienceForSpaceInput' when calling"
                            + " updateAudienceForSpace(Async)");
        }

        return updateAudienceForSpaceCall(spaceId, id, updateAudienceForSpaceInput, _callback);
    }

    /**
     * Update Audience for Space Updates the enabled status for an audience • This endpoint is in
     * **Alpha** testing. Please submit any feedback by sending email to friends@segment.com. • In
     * order to successfully call this endpoint, the specified Workspace needs to have the Audience
     * feature enabled. Please reach out to your customer success manager for more information. •
     * When called, this endpoint may generate the &#x60;Audience Modified&#x60; event in the [audit
     * trail](/tag/Audit-Trail). • Note that when an Audience is updated, the Audience will be
     * locked from future edits until the changes have been incorporated. You can find more
     * information [in the Segment
     * docs](https://segment-docs.netlify.app/docs/engage/audiences/#editing-realtime-audiences-and-traits).
     * The rate limit for this endpoint is 10 requests per minute, which is lower than the default
     * due to access pattern restrictions. Once reached, this endpoint will respond with the 429
     * HTTP status code with headers indicating the limit parameters. See [Rate
     * Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param spaceId (required)
     * @param id (required)
     * @param updateAudienceForSpaceInput (required)
     * @return UpdateAudienceForSpace200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public UpdateAudienceForSpace200Response updateAudienceForSpace(
            String spaceId, String id, UpdateAudienceForSpaceInput updateAudienceForSpaceInput)
            throws ApiException {
        ApiResponse<UpdateAudienceForSpace200Response> localVarResp =
                updateAudienceForSpaceWithHttpInfo(spaceId, id, updateAudienceForSpaceInput);
        return localVarResp.getData();
    }

    /**
     * Update Audience for Space Updates the enabled status for an audience • This endpoint is in
     * **Alpha** testing. Please submit any feedback by sending email to friends@segment.com. • In
     * order to successfully call this endpoint, the specified Workspace needs to have the Audience
     * feature enabled. Please reach out to your customer success manager for more information. •
     * When called, this endpoint may generate the &#x60;Audience Modified&#x60; event in the [audit
     * trail](/tag/Audit-Trail). • Note that when an Audience is updated, the Audience will be
     * locked from future edits until the changes have been incorporated. You can find more
     * information [in the Segment
     * docs](https://segment-docs.netlify.app/docs/engage/audiences/#editing-realtime-audiences-and-traits).
     * The rate limit for this endpoint is 10 requests per minute, which is lower than the default
     * due to access pattern restrictions. Once reached, this endpoint will respond with the 429
     * HTTP status code with headers indicating the limit parameters. See [Rate
     * Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param spaceId (required)
     * @param id (required)
     * @param updateAudienceForSpaceInput (required)
     * @return ApiResponse&lt;UpdateAudienceForSpace200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<UpdateAudienceForSpace200Response> updateAudienceForSpaceWithHttpInfo(
            String spaceId, String id, UpdateAudienceForSpaceInput updateAudienceForSpaceInput)
            throws ApiException {
        okhttp3.Call localVarCall =
                updateAudienceForSpaceValidateBeforeCall(
                        spaceId, id, updateAudienceForSpaceInput, null);
        Type localVarReturnType = new TypeToken<UpdateAudienceForSpace200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Audience for Space (asynchronously) Updates the enabled status for an audience • This
     * endpoint is in **Alpha** testing. Please submit any feedback by sending email to
     * friends@segment.com. • In order to successfully call this endpoint, the specified Workspace
     * needs to have the Audience feature enabled. Please reach out to your customer success manager
     * for more information. • When called, this endpoint may generate the &#x60;Audience
     * Modified&#x60; event in the [audit trail](/tag/Audit-Trail). • Note that when an Audience is
     * updated, the Audience will be locked from future edits until the changes have been
     * incorporated. You can find more information [in the Segment
     * docs](https://segment-docs.netlify.app/docs/engage/audiences/#editing-realtime-audiences-and-traits).
     * The rate limit for this endpoint is 10 requests per minute, which is lower than the default
     * due to access pattern restrictions. Once reached, this endpoint will respond with the 429
     * HTTP status code with headers indicating the limit parameters. See [Rate
     * Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param spaceId (required)
     * @param id (required)
     * @param updateAudienceForSpaceInput (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateAudienceForSpaceAsync(
            String spaceId,
            String id,
            UpdateAudienceForSpaceInput updateAudienceForSpaceInput,
            final ApiCallback<UpdateAudienceForSpace200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                updateAudienceForSpaceValidateBeforeCall(
                        spaceId, id, updateAudienceForSpaceInput, _callback);
        Type localVarReturnType = new TypeToken<UpdateAudienceForSpace200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
