/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.api;

import com.google.gson.reflect.TypeToken;
import com.segment.publicapi.ApiCallback;
import com.segment.publicapi.ApiClient;
import com.segment.publicapi.ApiException;
import com.segment.publicapi.ApiResponse;
import com.segment.publicapi.Configuration;
import com.segment.publicapi.Pair;
import com.segment.publicapi.models.AddAudienceScheduleToAudience200Response;
import com.segment.publicapi.models.AddAudienceScheduleToAudienceAlphaInput;
import com.segment.publicapi.models.CreateAudience200Response;
import com.segment.publicapi.models.CreateAudienceBetaInput;
import com.segment.publicapi.models.CreateAudiencePreview200Response;
import com.segment.publicapi.models.CreateAudiencePreviewBetaInput;
import com.segment.publicapi.models.ForceExecuteAudienceRun200Response;
import com.segment.publicapi.models.GetAudience200Response;
import com.segment.publicapi.models.GetAudiencePreview200Response;
import com.segment.publicapi.models.GetAudienceScheduleFromSpaceAndAudience200Response;
import com.segment.publicapi.models.ListAudienceConsumersFromSpaceAndAudience200Response;
import com.segment.publicapi.models.ListAudienceConsumersSortInput;
import com.segment.publicapi.models.ListAudienceSchedulesFromSpaceAndAudience200Response;
import com.segment.publicapi.models.ListAudienceSearchInput;
import com.segment.publicapi.models.ListAudiences200Response;
import com.segment.publicapi.models.ListAudiencesPaginationInput;
import com.segment.publicapi.models.PaginationInput;
import com.segment.publicapi.models.RemoveAudienceFromSpace200Response;
import com.segment.publicapi.models.RemoveAudienceScheduleFromAudience200Response;
import com.segment.publicapi.models.UpdateAudienceForSpace200Response;
import com.segment.publicapi.models.UpdateAudienceForSpaceBetaInput;
import com.segment.publicapi.models.UpdateAudienceScheduleForAudience200Response;
import com.segment.publicapi.models.UpdateAudienceScheduleForAudienceAlphaInput;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AudiencesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AudiencesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AudiencesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addAudienceScheduleToAudience
     *
     * @param spaceId (required)
     * @param id (required)
     * @param addAudienceScheduleToAudienceAlphaInput (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call addAudienceScheduleToAudienceCall(
            String spaceId,
            String id,
            AddAudienceScheduleToAudienceAlphaInput addAudienceScheduleToAudienceAlphaInput,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addAudienceScheduleToAudienceAlphaInput;

        // create path and map variables
        String localVarPath =
                "/spaces/{spaceId}/audiences/{id}/schedules"
                        .replace(
                                "{" + "spaceId" + "}",
                                localVarApiClient.escapeString(spaceId.toString()))
                        .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/vnd.segment.v1alpha+json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addAudienceScheduleToAudienceValidateBeforeCall(
            String spaceId,
            String id,
            AddAudienceScheduleToAudienceAlphaInput addAudienceScheduleToAudienceAlphaInput,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'spaceId' when calling"
                            + " addAudienceScheduleToAudience(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling"
                            + " addAudienceScheduleToAudience(Async)");
        }

        // verify the required parameter 'addAudienceScheduleToAudienceAlphaInput' is set
        if (addAudienceScheduleToAudienceAlphaInput == null) {
            throw new ApiException(
                    "Missing the required parameter 'addAudienceScheduleToAudienceAlphaInput' when"
                            + " calling addAudienceScheduleToAudience(Async)");
        }

        return addAudienceScheduleToAudienceCall(
                spaceId, id, addAudienceScheduleToAudienceAlphaInput, _callback);
    }

    /**
     * Add Audience Schedule to Audience The ability to configure the run schedule for an Audience
     * is limited to Linked Audiences (audienceType &#x3D; LINKED). Note that if a Linked Audience
     * remains disabled for 90 days Segment will delete the associated schedule and a new schedule
     * will need to be created. • This endpoint is in **Alpha** testing. Please submit any feedback
     * by sending an email to friends@segment.com. • In order to successfully call this endpoint,
     * the specified Workspace needs to have the Audience feature enabled. Please reach out to your
     * customer success manager for more information.
     *
     * @param spaceId (required)
     * @param id (required)
     * @param addAudienceScheduleToAudienceAlphaInput (required)
     * @return AddAudienceScheduleToAudience200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public AddAudienceScheduleToAudience200Response addAudienceScheduleToAudience(
            String spaceId,
            String id,
            AddAudienceScheduleToAudienceAlphaInput addAudienceScheduleToAudienceAlphaInput)
            throws ApiException {
        ApiResponse<AddAudienceScheduleToAudience200Response> localVarResp =
                addAudienceScheduleToAudienceWithHttpInfo(
                        spaceId, id, addAudienceScheduleToAudienceAlphaInput);
        return localVarResp.getData();
    }

    /**
     * Add Audience Schedule to Audience The ability to configure the run schedule for an Audience
     * is limited to Linked Audiences (audienceType &#x3D; LINKED). Note that if a Linked Audience
     * remains disabled for 90 days Segment will delete the associated schedule and a new schedule
     * will need to be created. • This endpoint is in **Alpha** testing. Please submit any feedback
     * by sending an email to friends@segment.com. • In order to successfully call this endpoint,
     * the specified Workspace needs to have the Audience feature enabled. Please reach out to your
     * customer success manager for more information.
     *
     * @param spaceId (required)
     * @param id (required)
     * @param addAudienceScheduleToAudienceAlphaInput (required)
     * @return ApiResponse&lt;AddAudienceScheduleToAudience200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<AddAudienceScheduleToAudience200Response>
            addAudienceScheduleToAudienceWithHttpInfo(
                    String spaceId,
                    String id,
                    AddAudienceScheduleToAudienceAlphaInput addAudienceScheduleToAudienceAlphaInput)
                    throws ApiException {
        okhttp3.Call localVarCall =
                addAudienceScheduleToAudienceValidateBeforeCall(
                        spaceId, id, addAudienceScheduleToAudienceAlphaInput, null);
        Type localVarReturnType =
                new TypeToken<AddAudienceScheduleToAudience200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Audience Schedule to Audience (asynchronously) The ability to configure the run schedule
     * for an Audience is limited to Linked Audiences (audienceType &#x3D; LINKED). Note that if a
     * Linked Audience remains disabled for 90 days Segment will delete the associated schedule and
     * a new schedule will need to be created. • This endpoint is in **Alpha** testing. Please
     * submit any feedback by sending an email to friends@segment.com. • In order to successfully
     * call this endpoint, the specified Workspace needs to have the Audience feature enabled.
     * Please reach out to your customer success manager for more information.
     *
     * @param spaceId (required)
     * @param id (required)
     * @param addAudienceScheduleToAudienceAlphaInput (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call addAudienceScheduleToAudienceAsync(
            String spaceId,
            String id,
            AddAudienceScheduleToAudienceAlphaInput addAudienceScheduleToAudienceAlphaInput,
            final ApiCallback<AddAudienceScheduleToAudience200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                addAudienceScheduleToAudienceValidateBeforeCall(
                        spaceId, id, addAudienceScheduleToAudienceAlphaInput, _callback);
        Type localVarReturnType =
                new TypeToken<AddAudienceScheduleToAudience200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for createAudience
     *
     * @param spaceId (required)
     * @param createAudienceBetaInput (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createAudienceCall(
            String spaceId,
            CreateAudienceBetaInput createAudienceBetaInput,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAudienceBetaInput;

        // create path and map variables
        String localVarPath =
                "/spaces/{spaceId}/audiences"
                        .replace(
                                "{" + "spaceId" + "}",
                                localVarApiClient.escapeString(spaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.segment.v1beta+json", "application/vnd.segment.v1alpha+json"
        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAudienceValidateBeforeCall(
            String spaceId,
            CreateAudienceBetaInput createAudienceBetaInput,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'spaceId' when calling createAudience(Async)");
        }

        // verify the required parameter 'createAudienceBetaInput' is set
        if (createAudienceBetaInput == null) {
            throw new ApiException(
                    "Missing the required parameter 'createAudienceBetaInput' when calling"
                            + " createAudience(Async)");
        }

        return createAudienceCall(spaceId, createAudienceBetaInput, _callback);
    }

    /**
     * Create Audience Creates Audience. • This endpoint is in **Beta** testing. Please submit any
     * feedback by sending an email to friends@segment.com. • In order to successfully call this
     * endpoint, the specified Workspace needs to have the Audience feature enabled. Please reach
     * out to your customer success manager for more information. • When called, this endpoint may
     * generate the &#x60;Audience Created&#x60; event in the [audit trail](/tag/Audit-Trail). Note:
     * The definition for an Audience created using the API is not editable through the Segment App.
     * The rate limit for this endpoint is 10 requests per minute, which is lower than the default
     * due to access pattern restrictions. Once reached, this endpoint will respond with the 429
     * HTTP status code with headers indicating the limit parameters. See [Rate
     * Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param spaceId (required)
     * @param createAudienceBetaInput (required)
     * @return CreateAudience200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public CreateAudience200Response createAudience(
            String spaceId, CreateAudienceBetaInput createAudienceBetaInput) throws ApiException {
        ApiResponse<CreateAudience200Response> localVarResp =
                createAudienceWithHttpInfo(spaceId, createAudienceBetaInput);
        return localVarResp.getData();
    }

    /**
     * Create Audience Creates Audience. • This endpoint is in **Beta** testing. Please submit any
     * feedback by sending an email to friends@segment.com. • In order to successfully call this
     * endpoint, the specified Workspace needs to have the Audience feature enabled. Please reach
     * out to your customer success manager for more information. • When called, this endpoint may
     * generate the &#x60;Audience Created&#x60; event in the [audit trail](/tag/Audit-Trail). Note:
     * The definition for an Audience created using the API is not editable through the Segment App.
     * The rate limit for this endpoint is 10 requests per minute, which is lower than the default
     * due to access pattern restrictions. Once reached, this endpoint will respond with the 429
     * HTTP status code with headers indicating the limit parameters. See [Rate
     * Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param spaceId (required)
     * @param createAudienceBetaInput (required)
     * @return ApiResponse&lt;CreateAudience200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CreateAudience200Response> createAudienceWithHttpInfo(
            String spaceId, CreateAudienceBetaInput createAudienceBetaInput) throws ApiException {
        okhttp3.Call localVarCall =
                createAudienceValidateBeforeCall(spaceId, createAudienceBetaInput, null);
        Type localVarReturnType = new TypeToken<CreateAudience200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Audience (asynchronously) Creates Audience. • This endpoint is in **Beta** testing.
     * Please submit any feedback by sending an email to friends@segment.com. • In order to
     * successfully call this endpoint, the specified Workspace needs to have the Audience feature
     * enabled. Please reach out to your customer success manager for more information. • When
     * called, this endpoint may generate the &#x60;Audience Created&#x60; event in the [audit
     * trail](/tag/Audit-Trail). Note: The definition for an Audience created using the API is not
     * editable through the Segment App. The rate limit for this endpoint is 10 requests per minute,
     * which is lower than the default due to access pattern restrictions. Once reached, this
     * endpoint will respond with the 429 HTTP status code with headers indicating the limit
     * parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param spaceId (required)
     * @param createAudienceBetaInput (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createAudienceAsync(
            String spaceId,
            CreateAudienceBetaInput createAudienceBetaInput,
            final ApiCallback<CreateAudience200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                createAudienceValidateBeforeCall(spaceId, createAudienceBetaInput, _callback);
        Type localVarReturnType = new TypeToken<CreateAudience200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for createAudiencePreview
     *
     * @param spaceId (required)
     * @param createAudiencePreviewBetaInput (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createAudiencePreviewCall(
            String spaceId,
            CreateAudiencePreviewBetaInput createAudiencePreviewBetaInput,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAudiencePreviewBetaInput;

        // create path and map variables
        String localVarPath =
                "/spaces/{spaceId}/audiences/previews"
                        .replace(
                                "{" + "spaceId" + "}",
                                localVarApiClient.escapeString(spaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.segment.v1beta+json", "application/vnd.segment.v1alpha+json"
        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAudiencePreviewValidateBeforeCall(
            String spaceId,
            CreateAudiencePreviewBetaInput createAudiencePreviewBetaInput,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'spaceId' when calling"
                            + " createAudiencePreview(Async)");
        }

        // verify the required parameter 'createAudiencePreviewBetaInput' is set
        if (createAudiencePreviewBetaInput == null) {
            throw new ApiException(
                    "Missing the required parameter 'createAudiencePreviewBetaInput' when calling"
                            + " createAudiencePreview(Async)");
        }

        return createAudiencePreviewCall(spaceId, createAudiencePreviewBetaInput, _callback);
    }

    /**
     * Create Audience Preview Previews Audience. • This endpoint is in **Beta** testing. Please
     * submit any feedback by sending an email to friends@segment.com. • In order to successfully
     * call this endpoint, the specified Workspace needs to have the Audience feature enabled.
     * Please reach out to your customer success manager for more information. • When called, this
     * endpoint may generate the &#x60;Audience Preview Created&#x60; event in the [audit
     * trail](/tag/Audit-Trail). The rate limit for this endpoint is 5 requests per minute, which is
     * lower than the default due to access pattern restrictions. Once reached, this endpoint will
     * respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate
     * Limiting](/#tag/Rate-Limits) for more information. This endpoint also has a rate limit of 700
     * requests per month per spaceId, which is lower than the default due to access pattern
     * restrictions.
     *
     * @param spaceId (required)
     * @param createAudiencePreviewBetaInput (required)
     * @return CreateAudiencePreview200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public CreateAudiencePreview200Response createAudiencePreview(
            String spaceId, CreateAudiencePreviewBetaInput createAudiencePreviewBetaInput)
            throws ApiException {
        ApiResponse<CreateAudiencePreview200Response> localVarResp =
                createAudiencePreviewWithHttpInfo(spaceId, createAudiencePreviewBetaInput);
        return localVarResp.getData();
    }

    /**
     * Create Audience Preview Previews Audience. • This endpoint is in **Beta** testing. Please
     * submit any feedback by sending an email to friends@segment.com. • In order to successfully
     * call this endpoint, the specified Workspace needs to have the Audience feature enabled.
     * Please reach out to your customer success manager for more information. • When called, this
     * endpoint may generate the &#x60;Audience Preview Created&#x60; event in the [audit
     * trail](/tag/Audit-Trail). The rate limit for this endpoint is 5 requests per minute, which is
     * lower than the default due to access pattern restrictions. Once reached, this endpoint will
     * respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate
     * Limiting](/#tag/Rate-Limits) for more information. This endpoint also has a rate limit of 700
     * requests per month per spaceId, which is lower than the default due to access pattern
     * restrictions.
     *
     * @param spaceId (required)
     * @param createAudiencePreviewBetaInput (required)
     * @return ApiResponse&lt;CreateAudiencePreview200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CreateAudiencePreview200Response> createAudiencePreviewWithHttpInfo(
            String spaceId, CreateAudiencePreviewBetaInput createAudiencePreviewBetaInput)
            throws ApiException {
        okhttp3.Call localVarCall =
                createAudiencePreviewValidateBeforeCall(
                        spaceId, createAudiencePreviewBetaInput, null);
        Type localVarReturnType = new TypeToken<CreateAudiencePreview200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Audience Preview (asynchronously) Previews Audience. • This endpoint is in **Beta**
     * testing. Please submit any feedback by sending an email to friends@segment.com. • In order to
     * successfully call this endpoint, the specified Workspace needs to have the Audience feature
     * enabled. Please reach out to your customer success manager for more information. • When
     * called, this endpoint may generate the &#x60;Audience Preview Created&#x60; event in the
     * [audit trail](/tag/Audit-Trail). The rate limit for this endpoint is 5 requests per minute,
     * which is lower than the default due to access pattern restrictions. Once reached, this
     * endpoint will respond with the 429 HTTP status code with headers indicating the limit
     * parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information. This endpoint also
     * has a rate limit of 700 requests per month per spaceId, which is lower than the default due
     * to access pattern restrictions.
     *
     * @param spaceId (required)
     * @param createAudiencePreviewBetaInput (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createAudiencePreviewAsync(
            String spaceId,
            CreateAudiencePreviewBetaInput createAudiencePreviewBetaInput,
            final ApiCallback<CreateAudiencePreview200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                createAudiencePreviewValidateBeforeCall(
                        spaceId, createAudiencePreviewBetaInput, _callback);
        Type localVarReturnType = new TypeToken<CreateAudiencePreview200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for forceExecuteAudienceRun
     *
     * @param spaceId (required)
     * @param audienceId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call forceExecuteAudienceRunCall(
            String spaceId, String audienceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/spaces/{spaceId}/audiences/{audienceId}/runs"
                        .replace(
                                "{" + "spaceId" + "}",
                                localVarApiClient.escapeString(spaceId.toString()))
                        .replace(
                                "{" + "audienceId" + "}",
                                localVarApiClient.escapeString(audienceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call forceExecuteAudienceRunValidateBeforeCall(
            String spaceId, String audienceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'spaceId' when calling"
                            + " forceExecuteAudienceRun(Async)");
        }

        // verify the required parameter 'audienceId' is set
        if (audienceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'audienceId' when calling"
                            + " forceExecuteAudienceRun(Async)");
        }

        return forceExecuteAudienceRunCall(spaceId, audienceId, _callback);
    }

    /**
     * Force Execute Audience Run The ability to force execute a run for an Audience is limited to
     * Linked Audiences (audienceType &#x3D; &#x60;LINKED&#x60;). • This endpoint is in **Alpha**
     * testing. Please submit any feedback by sending an email to friends@segment.com. • In order to
     * successfully call this endpoint, the specified Workspace needs to have the Audience feature
     * enabled. Please reach out to your customer success manager for more information. • When
     * called, this endpoint may generate the &#x60;Audience Run Forced&#x60; event in the [audit
     * trail](/tag/Audit-Trail).
     *
     * @param spaceId (required)
     * @param audienceId (required)
     * @return ForceExecuteAudienceRun200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ForceExecuteAudienceRun200Response forceExecuteAudienceRun(
            String spaceId, String audienceId) throws ApiException {
        ApiResponse<ForceExecuteAudienceRun200Response> localVarResp =
                forceExecuteAudienceRunWithHttpInfo(spaceId, audienceId);
        return localVarResp.getData();
    }

    /**
     * Force Execute Audience Run The ability to force execute a run for an Audience is limited to
     * Linked Audiences (audienceType &#x3D; &#x60;LINKED&#x60;). • This endpoint is in **Alpha**
     * testing. Please submit any feedback by sending an email to friends@segment.com. • In order to
     * successfully call this endpoint, the specified Workspace needs to have the Audience feature
     * enabled. Please reach out to your customer success manager for more information. • When
     * called, this endpoint may generate the &#x60;Audience Run Forced&#x60; event in the [audit
     * trail](/tag/Audit-Trail).
     *
     * @param spaceId (required)
     * @param audienceId (required)
     * @return ApiResponse&lt;ForceExecuteAudienceRun200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ForceExecuteAudienceRun200Response> forceExecuteAudienceRunWithHttpInfo(
            String spaceId, String audienceId) throws ApiException {
        okhttp3.Call localVarCall =
                forceExecuteAudienceRunValidateBeforeCall(spaceId, audienceId, null);
        Type localVarReturnType = new TypeToken<ForceExecuteAudienceRun200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Force Execute Audience Run (asynchronously) The ability to force execute a run for an
     * Audience is limited to Linked Audiences (audienceType &#x3D; &#x60;LINKED&#x60;). • This
     * endpoint is in **Alpha** testing. Please submit any feedback by sending an email to
     * friends@segment.com. • In order to successfully call this endpoint, the specified Workspace
     * needs to have the Audience feature enabled. Please reach out to your customer success manager
     * for more information. • When called, this endpoint may generate the &#x60;Audience Run
     * Forced&#x60; event in the [audit trail](/tag/Audit-Trail).
     *
     * @param spaceId (required)
     * @param audienceId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call forceExecuteAudienceRunAsync(
            String spaceId,
            String audienceId,
            final ApiCallback<ForceExecuteAudienceRun200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                forceExecuteAudienceRunValidateBeforeCall(spaceId, audienceId, _callback);
        Type localVarReturnType = new TypeToken<ForceExecuteAudienceRun200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getAudience
     *
     * @param spaceId (required)
     * @param id (required)
     * @param include Additional resource to include, support schedules only. This parameter exists
     *     in alpha. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getAudienceCall(
            String spaceId, String id, String include, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/spaces/{spaceId}/audiences/{id}"
                        .replace(
                                "{" + "spaceId" + "}",
                                localVarApiClient.escapeString(spaceId.toString()))
                        .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (include != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include", include));
        }

        final String[] localVarAccepts = {
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAudienceValidateBeforeCall(
            String spaceId, String id, String include, final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'spaceId' when calling getAudience(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling getAudience(Async)");
        }

        return getAudienceCall(spaceId, id, include, _callback);
    }

    /**
     * Get Audience Returns the Audience by id and spaceId. Supports including audience schedules
     * using &#x60;?include&#x3D;schedules&#x60;. • This endpoint is in **Beta** testing. Please
     * submit any feedback by sending an email to friends@segment.com. • In order to successfully
     * call this endpoint, the specified Workspace needs to have the Audience feature enabled.
     * Please reach out to your customer success manager for more information. The rate limit for
     * this endpoint is 100 requests per minute, which is lower than the default due to access
     * pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code
     * with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more
     * information.
     *
     * @param spaceId (required)
     * @param id (required)
     * @param include Additional resource to include, support schedules only. This parameter exists
     *     in alpha. (optional)
     * @return GetAudience200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public GetAudience200Response getAudience(String spaceId, String id, String include)
            throws ApiException {
        ApiResponse<GetAudience200Response> localVarResp =
                getAudienceWithHttpInfo(spaceId, id, include);
        return localVarResp.getData();
    }

    /**
     * Get Audience Returns the Audience by id and spaceId. Supports including audience schedules
     * using &#x60;?include&#x3D;schedules&#x60;. • This endpoint is in **Beta** testing. Please
     * submit any feedback by sending an email to friends@segment.com. • In order to successfully
     * call this endpoint, the specified Workspace needs to have the Audience feature enabled.
     * Please reach out to your customer success manager for more information. The rate limit for
     * this endpoint is 100 requests per minute, which is lower than the default due to access
     * pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code
     * with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more
     * information.
     *
     * @param spaceId (required)
     * @param id (required)
     * @param include Additional resource to include, support schedules only. This parameter exists
     *     in alpha. (optional)
     * @return ApiResponse&lt;GetAudience200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<GetAudience200Response> getAudienceWithHttpInfo(
            String spaceId, String id, String include) throws ApiException {
        okhttp3.Call localVarCall = getAudienceValidateBeforeCall(spaceId, id, include, null);
        Type localVarReturnType = new TypeToken<GetAudience200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Audience (asynchronously) Returns the Audience by id and spaceId. Supports including
     * audience schedules using &#x60;?include&#x3D;schedules&#x60;. • This endpoint is in **Beta**
     * testing. Please submit any feedback by sending an email to friends@segment.com. • In order to
     * successfully call this endpoint, the specified Workspace needs to have the Audience feature
     * enabled. Please reach out to your customer success manager for more information. The rate
     * limit for this endpoint is 100 requests per minute, which is lower than the default due to
     * access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP
     * status code with headers indicating the limit parameters. See [Rate
     * Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param spaceId (required)
     * @param id (required)
     * @param include Additional resource to include, support schedules only. This parameter exists
     *     in alpha. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getAudienceAsync(
            String spaceId,
            String id,
            String include,
            final ApiCallback<GetAudience200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = getAudienceValidateBeforeCall(spaceId, id, include, _callback);
        Type localVarReturnType = new TypeToken<GetAudience200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getAudiencePreview
     *
     * @param spaceId (required)
     * @param id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getAudiencePreviewCall(
            String spaceId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/spaces/{spaceId}/audiences/previews/{id}"
                        .replace(
                                "{" + "spaceId" + "}",
                                localVarApiClient.escapeString(spaceId.toString()))
                        .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAudiencePreviewValidateBeforeCall(
            String spaceId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'spaceId' when calling"
                            + " getAudiencePreview(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling getAudiencePreview(Async)");
        }

        return getAudiencePreviewCall(spaceId, id, _callback);
    }

    /**
     * Get Audience Preview Reads the results of an audience preview. • This endpoint is in **Beta**
     * testing. Please submit any feedback by sending an email to friends@segment.com. • In order to
     * successfully call this endpoint, the specified Workspace needs to have the Audience feature
     * enabled. Please reach out to your customer success manager for more information. The rate
     * limit for this endpoint is 100 requests per minute, which is lower than the default due to
     * access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP
     * status code with headers indicating the limit parameters. See [Rate
     * Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param spaceId (required)
     * @param id (required)
     * @return GetAudiencePreview200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public GetAudiencePreview200Response getAudiencePreview(String spaceId, String id)
            throws ApiException {
        ApiResponse<GetAudiencePreview200Response> localVarResp =
                getAudiencePreviewWithHttpInfo(spaceId, id);
        return localVarResp.getData();
    }

    /**
     * Get Audience Preview Reads the results of an audience preview. • This endpoint is in **Beta**
     * testing. Please submit any feedback by sending an email to friends@segment.com. • In order to
     * successfully call this endpoint, the specified Workspace needs to have the Audience feature
     * enabled. Please reach out to your customer success manager for more information. The rate
     * limit for this endpoint is 100 requests per minute, which is lower than the default due to
     * access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP
     * status code with headers indicating the limit parameters. See [Rate
     * Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param spaceId (required)
     * @param id (required)
     * @return ApiResponse&lt;GetAudiencePreview200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<GetAudiencePreview200Response> getAudiencePreviewWithHttpInfo(
            String spaceId, String id) throws ApiException {
        okhttp3.Call localVarCall = getAudiencePreviewValidateBeforeCall(spaceId, id, null);
        Type localVarReturnType = new TypeToken<GetAudiencePreview200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Audience Preview (asynchronously) Reads the results of an audience preview. • This
     * endpoint is in **Beta** testing. Please submit any feedback by sending an email to
     * friends@segment.com. • In order to successfully call this endpoint, the specified Workspace
     * needs to have the Audience feature enabled. Please reach out to your customer success manager
     * for more information. The rate limit for this endpoint is 100 requests per minute, which is
     * lower than the default due to access pattern restrictions. Once reached, this endpoint will
     * respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate
     * Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param spaceId (required)
     * @param id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getAudiencePreviewAsync(
            String spaceId, String id, final ApiCallback<GetAudiencePreview200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = getAudiencePreviewValidateBeforeCall(spaceId, id, _callback);
        Type localVarReturnType = new TypeToken<GetAudiencePreview200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getAudienceScheduleFromSpaceAndAudience
     *
     * @param spaceId (required)
     * @param id (required)
     * @param scheduleId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getAudienceScheduleFromSpaceAndAudienceCall(
            String spaceId, String id, String scheduleId, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/spaces/{spaceId}/audiences/{id}/schedules/{scheduleId}"
                        .replace(
                                "{" + "spaceId" + "}",
                                localVarApiClient.escapeString(spaceId.toString()))
                        .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
                        .replace(
                                "{" + "scheduleId" + "}",
                                localVarApiClient.escapeString(scheduleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAudienceScheduleFromSpaceAndAudienceValidateBeforeCall(
            String spaceId, String id, String scheduleId, final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'spaceId' when calling"
                            + " getAudienceScheduleFromSpaceAndAudience(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling"
                            + " getAudienceScheduleFromSpaceAndAudience(Async)");
        }

        // verify the required parameter 'scheduleId' is set
        if (scheduleId == null) {
            throw new ApiException(
                    "Missing the required parameter 'scheduleId' when calling"
                            + " getAudienceScheduleFromSpaceAndAudience(Async)");
        }

        return getAudienceScheduleFromSpaceAndAudienceCall(spaceId, id, scheduleId, _callback);
    }

    /**
     * Get Audience Schedule from Space And Audience Returns the schedule for the given audience and
     * scheduleId. • This endpoint is in **Alpha** testing. Please submit any feedback by sending an
     * email to friends@segment.com. • In order to successfully call this endpoint, the specified
     * Workspace needs to have the Audience feature enabled. Please reach out to your customer
     * success manager for more information.
     *
     * @param spaceId (required)
     * @param id (required)
     * @param scheduleId (required)
     * @return GetAudienceScheduleFromSpaceAndAudience200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public GetAudienceScheduleFromSpaceAndAudience200Response
            getAudienceScheduleFromSpaceAndAudience(String spaceId, String id, String scheduleId)
                    throws ApiException {
        ApiResponse<GetAudienceScheduleFromSpaceAndAudience200Response> localVarResp =
                getAudienceScheduleFromSpaceAndAudienceWithHttpInfo(spaceId, id, scheduleId);
        return localVarResp.getData();
    }

    /**
     * Get Audience Schedule from Space And Audience Returns the schedule for the given audience and
     * scheduleId. • This endpoint is in **Alpha** testing. Please submit any feedback by sending an
     * email to friends@segment.com. • In order to successfully call this endpoint, the specified
     * Workspace needs to have the Audience feature enabled. Please reach out to your customer
     * success manager for more information.
     *
     * @param spaceId (required)
     * @param id (required)
     * @param scheduleId (required)
     * @return ApiResponse&lt;GetAudienceScheduleFromSpaceAndAudience200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<GetAudienceScheduleFromSpaceAndAudience200Response>
            getAudienceScheduleFromSpaceAndAudienceWithHttpInfo(
                    String spaceId, String id, String scheduleId) throws ApiException {
        okhttp3.Call localVarCall =
                getAudienceScheduleFromSpaceAndAudienceValidateBeforeCall(
                        spaceId, id, scheduleId, null);
        Type localVarReturnType =
                new TypeToken<GetAudienceScheduleFromSpaceAndAudience200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Audience Schedule from Space And Audience (asynchronously) Returns the schedule for the
     * given audience and scheduleId. • This endpoint is in **Alpha** testing. Please submit any
     * feedback by sending an email to friends@segment.com. • In order to successfully call this
     * endpoint, the specified Workspace needs to have the Audience feature enabled. Please reach
     * out to your customer success manager for more information.
     *
     * @param spaceId (required)
     * @param id (required)
     * @param scheduleId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getAudienceScheduleFromSpaceAndAudienceAsync(
            String spaceId,
            String id,
            String scheduleId,
            final ApiCallback<GetAudienceScheduleFromSpaceAndAudience200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                getAudienceScheduleFromSpaceAndAudienceValidateBeforeCall(
                        spaceId, id, scheduleId, _callback);
        Type localVarReturnType =
                new TypeToken<GetAudienceScheduleFromSpaceAndAudience200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for listAudienceConsumersFromSpaceAndAudience
     *
     * @param spaceId (required)
     * @param id (required)
     * @param pagination Information about the pagination of this response. [See
     *     pagination](https://docs.segmentapis.com/tag/Pagination/#section/Pagination-parameters)
     *     for more info. This parameter exists in alpha. (optional)
     * @param search Optional search criteria This parameter exists in alpha. (optional)
     * @param sort Optional sort criteria This parameter exists in alpha. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listAudienceConsumersFromSpaceAndAudienceCall(
            String spaceId,
            String id,
            PaginationInput pagination,
            ListAudienceSearchInput search,
            ListAudienceConsumersSortInput sort,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/spaces/{spaceId}/audiences/{id}/audience-references"
                        .replace(
                                "{" + "spaceId" + "}",
                                localVarApiClient.escapeString(spaceId.toString()))
                        .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pagination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination", pagination));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAudienceConsumersFromSpaceAndAudienceValidateBeforeCall(
            String spaceId,
            String id,
            PaginationInput pagination,
            ListAudienceSearchInput search,
            ListAudienceConsumersSortInput sort,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'spaceId' when calling"
                            + " listAudienceConsumersFromSpaceAndAudience(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling"
                            + " listAudienceConsumersFromSpaceAndAudience(Async)");
        }

        return listAudienceConsumersFromSpaceAndAudienceCall(
                spaceId, id, pagination, search, sort, _callback);
    }

    /**
     * List Audience Consumers from Space And Audience Returns the list of consumers for the given
     * audience. • This endpoint is in **Alpha** testing. Please submit any feedback by sending an
     * email to friends@segment.com. • In order to successfully call this endpoint, the specified
     * Workspace needs to have the Audience feature enabled. Please reach out to your customer
     * success manager for more information. The rate limit for this endpoint is 25 requests per
     * minute, which is lower than the default due to access pattern restrictions. Once reached,
     * this endpoint will respond with the 429 HTTP status code with headers indicating the limit
     * parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param spaceId (required)
     * @param id (required)
     * @param pagination Information about the pagination of this response. [See
     *     pagination](https://docs.segmentapis.com/tag/Pagination/#section/Pagination-parameters)
     *     for more info. This parameter exists in alpha. (optional)
     * @param search Optional search criteria This parameter exists in alpha. (optional)
     * @param sort Optional sort criteria This parameter exists in alpha. (optional)
     * @return ListAudienceConsumersFromSpaceAndAudience200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ListAudienceConsumersFromSpaceAndAudience200Response
            listAudienceConsumersFromSpaceAndAudience(
                    String spaceId,
                    String id,
                    PaginationInput pagination,
                    ListAudienceSearchInput search,
                    ListAudienceConsumersSortInput sort)
                    throws ApiException {
        ApiResponse<ListAudienceConsumersFromSpaceAndAudience200Response> localVarResp =
                listAudienceConsumersFromSpaceAndAudienceWithHttpInfo(
                        spaceId, id, pagination, search, sort);
        return localVarResp.getData();
    }

    /**
     * List Audience Consumers from Space And Audience Returns the list of consumers for the given
     * audience. • This endpoint is in **Alpha** testing. Please submit any feedback by sending an
     * email to friends@segment.com. • In order to successfully call this endpoint, the specified
     * Workspace needs to have the Audience feature enabled. Please reach out to your customer
     * success manager for more information. The rate limit for this endpoint is 25 requests per
     * minute, which is lower than the default due to access pattern restrictions. Once reached,
     * this endpoint will respond with the 429 HTTP status code with headers indicating the limit
     * parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param spaceId (required)
     * @param id (required)
     * @param pagination Information about the pagination of this response. [See
     *     pagination](https://docs.segmentapis.com/tag/Pagination/#section/Pagination-parameters)
     *     for more info. This parameter exists in alpha. (optional)
     * @param search Optional search criteria This parameter exists in alpha. (optional)
     * @param sort Optional sort criteria This parameter exists in alpha. (optional)
     * @return ApiResponse&lt;ListAudienceConsumersFromSpaceAndAudience200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ListAudienceConsumersFromSpaceAndAudience200Response>
            listAudienceConsumersFromSpaceAndAudienceWithHttpInfo(
                    String spaceId,
                    String id,
                    PaginationInput pagination,
                    ListAudienceSearchInput search,
                    ListAudienceConsumersSortInput sort)
                    throws ApiException {
        okhttp3.Call localVarCall =
                listAudienceConsumersFromSpaceAndAudienceValidateBeforeCall(
                        spaceId, id, pagination, search, sort, null);
        Type localVarReturnType =
                new TypeToken<ListAudienceConsumersFromSpaceAndAudience200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Audience Consumers from Space And Audience (asynchronously) Returns the list of
     * consumers for the given audience. • This endpoint is in **Alpha** testing. Please submit any
     * feedback by sending an email to friends@segment.com. • In order to successfully call this
     * endpoint, the specified Workspace needs to have the Audience feature enabled. Please reach
     * out to your customer success manager for more information. The rate limit for this endpoint
     * is 25 requests per minute, which is lower than the default due to access pattern
     * restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with
     * headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more
     * information.
     *
     * @param spaceId (required)
     * @param id (required)
     * @param pagination Information about the pagination of this response. [See
     *     pagination](https://docs.segmentapis.com/tag/Pagination/#section/Pagination-parameters)
     *     for more info. This parameter exists in alpha. (optional)
     * @param search Optional search criteria This parameter exists in alpha. (optional)
     * @param sort Optional sort criteria This parameter exists in alpha. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listAudienceConsumersFromSpaceAndAudienceAsync(
            String spaceId,
            String id,
            PaginationInput pagination,
            ListAudienceSearchInput search,
            ListAudienceConsumersSortInput sort,
            final ApiCallback<ListAudienceConsumersFromSpaceAndAudience200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                listAudienceConsumersFromSpaceAndAudienceValidateBeforeCall(
                        spaceId, id, pagination, search, sort, _callback);
        Type localVarReturnType =
                new TypeToken<ListAudienceConsumersFromSpaceAndAudience200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for listAudienceSchedulesFromSpaceAndAudience
     *
     * @param spaceId (required)
     * @param id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listAudienceSchedulesFromSpaceAndAudienceCall(
            String spaceId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/spaces/{spaceId}/audiences/{id}/schedules"
                        .replace(
                                "{" + "spaceId" + "}",
                                localVarApiClient.escapeString(spaceId.toString()))
                        .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAudienceSchedulesFromSpaceAndAudienceValidateBeforeCall(
            String spaceId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'spaceId' when calling"
                            + " listAudienceSchedulesFromSpaceAndAudience(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling"
                            + " listAudienceSchedulesFromSpaceAndAudience(Async)");
        }

        return listAudienceSchedulesFromSpaceAndAudienceCall(spaceId, id, _callback);
    }

    /**
     * List Audience Schedules from Space And Audience Returns the list of schedules for the given
     * audience. • This endpoint is in **Alpha** testing. Please submit any feedback by sending an
     * email to friends@segment.com. • In order to successfully call this endpoint, the specified
     * Workspace needs to have the Audience feature enabled. Please reach out to your customer
     * success manager for more information.
     *
     * @param spaceId (required)
     * @param id (required)
     * @return ListAudienceSchedulesFromSpaceAndAudience200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ListAudienceSchedulesFromSpaceAndAudience200Response
            listAudienceSchedulesFromSpaceAndAudience(String spaceId, String id)
                    throws ApiException {
        ApiResponse<ListAudienceSchedulesFromSpaceAndAudience200Response> localVarResp =
                listAudienceSchedulesFromSpaceAndAudienceWithHttpInfo(spaceId, id);
        return localVarResp.getData();
    }

    /**
     * List Audience Schedules from Space And Audience Returns the list of schedules for the given
     * audience. • This endpoint is in **Alpha** testing. Please submit any feedback by sending an
     * email to friends@segment.com. • In order to successfully call this endpoint, the specified
     * Workspace needs to have the Audience feature enabled. Please reach out to your customer
     * success manager for more information.
     *
     * @param spaceId (required)
     * @param id (required)
     * @return ApiResponse&lt;ListAudienceSchedulesFromSpaceAndAudience200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ListAudienceSchedulesFromSpaceAndAudience200Response>
            listAudienceSchedulesFromSpaceAndAudienceWithHttpInfo(String spaceId, String id)
                    throws ApiException {
        okhttp3.Call localVarCall =
                listAudienceSchedulesFromSpaceAndAudienceValidateBeforeCall(spaceId, id, null);
        Type localVarReturnType =
                new TypeToken<ListAudienceSchedulesFromSpaceAndAudience200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Audience Schedules from Space And Audience (asynchronously) Returns the list of
     * schedules for the given audience. • This endpoint is in **Alpha** testing. Please submit any
     * feedback by sending an email to friends@segment.com. • In order to successfully call this
     * endpoint, the specified Workspace needs to have the Audience feature enabled. Please reach
     * out to your customer success manager for more information.
     *
     * @param spaceId (required)
     * @param id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listAudienceSchedulesFromSpaceAndAudienceAsync(
            String spaceId,
            String id,
            final ApiCallback<ListAudienceSchedulesFromSpaceAndAudience200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                listAudienceSchedulesFromSpaceAndAudienceValidateBeforeCall(spaceId, id, _callback);
        Type localVarReturnType =
                new TypeToken<ListAudienceSchedulesFromSpaceAndAudience200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for listAudiences
     *
     * @param spaceId (required)
     * @param search Optional search criteria This parameter exists in alpha. (optional)
     * @param pagination Information about the pagination of this response. [See
     *     pagination](https://docs.segmentapis.com/tag/Pagination/#section/Pagination-parameters)
     *     for more info. This parameter exists in alpha. (optional)
     * @param include Additional resource to include, support schedules only. This parameter exists
     *     in alpha. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listAudiencesCall(
            String spaceId,
            ListAudienceSearchInput search,
            ListAudiencesPaginationInput pagination,
            String include,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/spaces/{spaceId}/audiences"
                        .replace(
                                "{" + "spaceId" + "}",
                                localVarApiClient.escapeString(spaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (pagination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination", pagination));
        }

        if (include != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include", include));
        }

        final String[] localVarAccepts = {
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAudiencesValidateBeforeCall(
            String spaceId,
            ListAudienceSearchInput search,
            ListAudiencesPaginationInput pagination,
            String include,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'spaceId' when calling listAudiences(Async)");
        }

        return listAudiencesCall(spaceId, search, pagination, include, _callback);
    }

    /**
     * List Audiences Returns Audiences by spaceId. Supports including audience schedules using
     * &#x60;?include&#x3D;schedules&#x60;. • This endpoint is in **Beta** testing. Please submit
     * any feedback by sending an email to friends@segment.com. • In order to successfully call this
     * endpoint, the specified Workspace needs to have the Audience feature enabled. Please reach
     * out to your customer success manager for more information. The rate limit for this endpoint
     * is 25 requests per minute, which is lower than the default due to access pattern
     * restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with
     * headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more
     * information.
     *
     * @param spaceId (required)
     * @param search Optional search criteria This parameter exists in alpha. (optional)
     * @param pagination Information about the pagination of this response. [See
     *     pagination](https://docs.segmentapis.com/tag/Pagination/#section/Pagination-parameters)
     *     for more info. This parameter exists in alpha. (optional)
     * @param include Additional resource to include, support schedules only. This parameter exists
     *     in alpha. (optional)
     * @return ListAudiences200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ListAudiences200Response listAudiences(
            String spaceId,
            ListAudienceSearchInput search,
            ListAudiencesPaginationInput pagination,
            String include)
            throws ApiException {
        ApiResponse<ListAudiences200Response> localVarResp =
                listAudiencesWithHttpInfo(spaceId, search, pagination, include);
        return localVarResp.getData();
    }

    /**
     * List Audiences Returns Audiences by spaceId. Supports including audience schedules using
     * &#x60;?include&#x3D;schedules&#x60;. • This endpoint is in **Beta** testing. Please submit
     * any feedback by sending an email to friends@segment.com. • In order to successfully call this
     * endpoint, the specified Workspace needs to have the Audience feature enabled. Please reach
     * out to your customer success manager for more information. The rate limit for this endpoint
     * is 25 requests per minute, which is lower than the default due to access pattern
     * restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with
     * headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more
     * information.
     *
     * @param spaceId (required)
     * @param search Optional search criteria This parameter exists in alpha. (optional)
     * @param pagination Information about the pagination of this response. [See
     *     pagination](https://docs.segmentapis.com/tag/Pagination/#section/Pagination-parameters)
     *     for more info. This parameter exists in alpha. (optional)
     * @param include Additional resource to include, support schedules only. This parameter exists
     *     in alpha. (optional)
     * @return ApiResponse&lt;ListAudiences200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ListAudiences200Response> listAudiencesWithHttpInfo(
            String spaceId,
            ListAudienceSearchInput search,
            ListAudiencesPaginationInput pagination,
            String include)
            throws ApiException {
        okhttp3.Call localVarCall =
                listAudiencesValidateBeforeCall(spaceId, search, pagination, include, null);
        Type localVarReturnType = new TypeToken<ListAudiences200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Audiences (asynchronously) Returns Audiences by spaceId. Supports including audience
     * schedules using &#x60;?include&#x3D;schedules&#x60;. • This endpoint is in **Beta** testing.
     * Please submit any feedback by sending an email to friends@segment.com. • In order to
     * successfully call this endpoint, the specified Workspace needs to have the Audience feature
     * enabled. Please reach out to your customer success manager for more information. The rate
     * limit for this endpoint is 25 requests per minute, which is lower than the default due to
     * access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP
     * status code with headers indicating the limit parameters. See [Rate
     * Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param spaceId (required)
     * @param search Optional search criteria This parameter exists in alpha. (optional)
     * @param pagination Information about the pagination of this response. [See
     *     pagination](https://docs.segmentapis.com/tag/Pagination/#section/Pagination-parameters)
     *     for more info. This parameter exists in alpha. (optional)
     * @param include Additional resource to include, support schedules only. This parameter exists
     *     in alpha. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listAudiencesAsync(
            String spaceId,
            ListAudienceSearchInput search,
            ListAudiencesPaginationInput pagination,
            String include,
            final ApiCallback<ListAudiences200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                listAudiencesValidateBeforeCall(spaceId, search, pagination, include, _callback);
        Type localVarReturnType = new TypeToken<ListAudiences200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for removeAudienceFromSpace
     *
     * @param spaceId (required)
     * @param id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call removeAudienceFromSpaceCall(
            String spaceId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/spaces/{spaceId}/audiences/{id}"
                        .replace(
                                "{" + "spaceId" + "}",
                                localVarApiClient.escapeString(spaceId.toString()))
                        .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "DELETE",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeAudienceFromSpaceValidateBeforeCall(
            String spaceId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'spaceId' when calling"
                            + " removeAudienceFromSpace(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling"
                            + " removeAudienceFromSpace(Async)");
        }

        return removeAudienceFromSpaceCall(spaceId, id, _callback);
    }

    /**
     * Remove Audience from Space Deletes an Audience by id and spaceId. • This endpoint is in
     * **Beta** testing. Please submit any feedback by sending an email to friends@segment.com. • In
     * order to successfully call this endpoint, the specified Workspace needs to have the Audience
     * feature enabled. Please reach out to your customer success manager for more information. •
     * When called, this endpoint may generate the &#x60;Audience Deleted&#x60; event in the [audit
     * trail](/tag/Audit-Trail). The rate limit for this endpoint is 20 requests per minute, which
     * is lower than the default due to access pattern restrictions. Once reached, this endpoint
     * will respond with the 429 HTTP status code with headers indicating the limit parameters. See
     * [Rate Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param spaceId (required)
     * @param id (required)
     * @return RemoveAudienceFromSpace200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public RemoveAudienceFromSpace200Response removeAudienceFromSpace(String spaceId, String id)
            throws ApiException {
        ApiResponse<RemoveAudienceFromSpace200Response> localVarResp =
                removeAudienceFromSpaceWithHttpInfo(spaceId, id);
        return localVarResp.getData();
    }

    /**
     * Remove Audience from Space Deletes an Audience by id and spaceId. • This endpoint is in
     * **Beta** testing. Please submit any feedback by sending an email to friends@segment.com. • In
     * order to successfully call this endpoint, the specified Workspace needs to have the Audience
     * feature enabled. Please reach out to your customer success manager for more information. •
     * When called, this endpoint may generate the &#x60;Audience Deleted&#x60; event in the [audit
     * trail](/tag/Audit-Trail). The rate limit for this endpoint is 20 requests per minute, which
     * is lower than the default due to access pattern restrictions. Once reached, this endpoint
     * will respond with the 429 HTTP status code with headers indicating the limit parameters. See
     * [Rate Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param spaceId (required)
     * @param id (required)
     * @return ApiResponse&lt;RemoveAudienceFromSpace200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RemoveAudienceFromSpace200Response> removeAudienceFromSpaceWithHttpInfo(
            String spaceId, String id) throws ApiException {
        okhttp3.Call localVarCall = removeAudienceFromSpaceValidateBeforeCall(spaceId, id, null);
        Type localVarReturnType = new TypeToken<RemoveAudienceFromSpace200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove Audience from Space (asynchronously) Deletes an Audience by id and spaceId. • This
     * endpoint is in **Beta** testing. Please submit any feedback by sending an email to
     * friends@segment.com. • In order to successfully call this endpoint, the specified Workspace
     * needs to have the Audience feature enabled. Please reach out to your customer success manager
     * for more information. • When called, this endpoint may generate the &#x60;Audience
     * Deleted&#x60; event in the [audit trail](/tag/Audit-Trail). The rate limit for this endpoint
     * is 20 requests per minute, which is lower than the default due to access pattern
     * restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with
     * headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more
     * information.
     *
     * @param spaceId (required)
     * @param id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call removeAudienceFromSpaceAsync(
            String spaceId,
            String id,
            final ApiCallback<RemoveAudienceFromSpace200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                removeAudienceFromSpaceValidateBeforeCall(spaceId, id, _callback);
        Type localVarReturnType = new TypeToken<RemoveAudienceFromSpace200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for removeAudienceScheduleFromAudience
     *
     * @param spaceId (required)
     * @param id (required)
     * @param scheduleId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call removeAudienceScheduleFromAudienceCall(
            String spaceId, String id, String scheduleId, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/spaces/{spaceId}/audiences/{id}/schedules/{scheduleId}"
                        .replace(
                                "{" + "spaceId" + "}",
                                localVarApiClient.escapeString(spaceId.toString()))
                        .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
                        .replace(
                                "{" + "scheduleId" + "}",
                                localVarApiClient.escapeString(scheduleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "DELETE",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeAudienceScheduleFromAudienceValidateBeforeCall(
            String spaceId, String id, String scheduleId, final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'spaceId' when calling"
                            + " removeAudienceScheduleFromAudience(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling"
                            + " removeAudienceScheduleFromAudience(Async)");
        }

        // verify the required parameter 'scheduleId' is set
        if (scheduleId == null) {
            throw new ApiException(
                    "Missing the required parameter 'scheduleId' when calling"
                            + " removeAudienceScheduleFromAudience(Async)");
        }

        return removeAudienceScheduleFromAudienceCall(spaceId, id, scheduleId, _callback);
    }

    /**
     * Remove Audience Schedule from Audience Deletes an audience schedule for a Linked Audience
     * (audienceType &#x3D; LINKED). • This endpoint is in **Alpha** testing. Please submit any
     * feedback by sending an email to friends@segment.com. • In order to successfully call this
     * endpoint, the specified Workspace needs to have the Audience feature enabled. Please reach
     * out to your customer success manager for more information.
     *
     * @param spaceId (required)
     * @param id (required)
     * @param scheduleId (required)
     * @return RemoveAudienceScheduleFromAudience200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public RemoveAudienceScheduleFromAudience200Response removeAudienceScheduleFromAudience(
            String spaceId, String id, String scheduleId) throws ApiException {
        ApiResponse<RemoveAudienceScheduleFromAudience200Response> localVarResp =
                removeAudienceScheduleFromAudienceWithHttpInfo(spaceId, id, scheduleId);
        return localVarResp.getData();
    }

    /**
     * Remove Audience Schedule from Audience Deletes an audience schedule for a Linked Audience
     * (audienceType &#x3D; LINKED). • This endpoint is in **Alpha** testing. Please submit any
     * feedback by sending an email to friends@segment.com. • In order to successfully call this
     * endpoint, the specified Workspace needs to have the Audience feature enabled. Please reach
     * out to your customer success manager for more information.
     *
     * @param spaceId (required)
     * @param id (required)
     * @param scheduleId (required)
     * @return ApiResponse&lt;RemoveAudienceScheduleFromAudience200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RemoveAudienceScheduleFromAudience200Response>
            removeAudienceScheduleFromAudienceWithHttpInfo(
                    String spaceId, String id, String scheduleId) throws ApiException {
        okhttp3.Call localVarCall =
                removeAudienceScheduleFromAudienceValidateBeforeCall(spaceId, id, scheduleId, null);
        Type localVarReturnType =
                new TypeToken<RemoveAudienceScheduleFromAudience200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove Audience Schedule from Audience (asynchronously) Deletes an audience schedule for a
     * Linked Audience (audienceType &#x3D; LINKED). • This endpoint is in **Alpha** testing. Please
     * submit any feedback by sending an email to friends@segment.com. • In order to successfully
     * call this endpoint, the specified Workspace needs to have the Audience feature enabled.
     * Please reach out to your customer success manager for more information.
     *
     * @param spaceId (required)
     * @param id (required)
     * @param scheduleId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call removeAudienceScheduleFromAudienceAsync(
            String spaceId,
            String id,
            String scheduleId,
            final ApiCallback<RemoveAudienceScheduleFromAudience200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                removeAudienceScheduleFromAudienceValidateBeforeCall(
                        spaceId, id, scheduleId, _callback);
        Type localVarReturnType =
                new TypeToken<RemoveAudienceScheduleFromAudience200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for updateAudienceForSpace
     *
     * @param spaceId (required)
     * @param id (required)
     * @param updateAudienceForSpaceBetaInput (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateAudienceForSpaceCall(
            String spaceId,
            String id,
            UpdateAudienceForSpaceBetaInput updateAudienceForSpaceBetaInput,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAudienceForSpaceBetaInput;

        // create path and map variables
        String localVarPath =
                "/spaces/{spaceId}/audiences/{id}"
                        .replace(
                                "{" + "spaceId" + "}",
                                localVarApiClient.escapeString(spaceId.toString()))
                        .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.segment.v1beta+json", "application/vnd.segment.v1alpha+json"
        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "PATCH",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAudienceForSpaceValidateBeforeCall(
            String spaceId,
            String id,
            UpdateAudienceForSpaceBetaInput updateAudienceForSpaceBetaInput,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'spaceId' when calling"
                            + " updateAudienceForSpace(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling"
                            + " updateAudienceForSpace(Async)");
        }

        // verify the required parameter 'updateAudienceForSpaceBetaInput' is set
        if (updateAudienceForSpaceBetaInput == null) {
            throw new ApiException(
                    "Missing the required parameter 'updateAudienceForSpaceBetaInput' when calling"
                            + " updateAudienceForSpace(Async)");
        }

        return updateAudienceForSpaceCall(spaceId, id, updateAudienceForSpaceBetaInput, _callback);
    }

    /**
     * Update Audience for Space Updates the Audience. • This endpoint is in **Alpha** testing.
     * Please submit any feedback by sending an email to friends@segment.com. • In order to
     * successfully call this endpoint, the specified Workspace needs to have the Audience feature
     * enabled. Please reach out to your customer success manager for more information. • When
     * called, this endpoint may generate the &#x60;Audience Modified&#x60; event in the [audit
     * trail](/tag/Audit-Trail). • Note that when an Audience is updated, the Audience will be
     * locked from future edits until the changes have been incorporated. You can find more
     * information [in the Segment
     * docs](https://segment-docs.netlify.app/docs/engage/audiences/#editing-realtime-audiences-and-traits).
     * Note: The definition for an Audience updated using the API is not editable through the
     * Segment App. The rate limit for this endpoint is 10 requests per minute, which is lower than
     * the default due to access pattern restrictions. Once reached, this endpoint will respond with
     * the 429 HTTP status code with headers indicating the limit parameters. See [Rate
     * Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param spaceId (required)
     * @param id (required)
     * @param updateAudienceForSpaceBetaInput (required)
     * @return UpdateAudienceForSpace200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public UpdateAudienceForSpace200Response updateAudienceForSpace(
            String spaceId,
            String id,
            UpdateAudienceForSpaceBetaInput updateAudienceForSpaceBetaInput)
            throws ApiException {
        ApiResponse<UpdateAudienceForSpace200Response> localVarResp =
                updateAudienceForSpaceWithHttpInfo(spaceId, id, updateAudienceForSpaceBetaInput);
        return localVarResp.getData();
    }

    /**
     * Update Audience for Space Updates the Audience. • This endpoint is in **Alpha** testing.
     * Please submit any feedback by sending an email to friends@segment.com. • In order to
     * successfully call this endpoint, the specified Workspace needs to have the Audience feature
     * enabled. Please reach out to your customer success manager for more information. • When
     * called, this endpoint may generate the &#x60;Audience Modified&#x60; event in the [audit
     * trail](/tag/Audit-Trail). • Note that when an Audience is updated, the Audience will be
     * locked from future edits until the changes have been incorporated. You can find more
     * information [in the Segment
     * docs](https://segment-docs.netlify.app/docs/engage/audiences/#editing-realtime-audiences-and-traits).
     * Note: The definition for an Audience updated using the API is not editable through the
     * Segment App. The rate limit for this endpoint is 10 requests per minute, which is lower than
     * the default due to access pattern restrictions. Once reached, this endpoint will respond with
     * the 429 HTTP status code with headers indicating the limit parameters. See [Rate
     * Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param spaceId (required)
     * @param id (required)
     * @param updateAudienceForSpaceBetaInput (required)
     * @return ApiResponse&lt;UpdateAudienceForSpace200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<UpdateAudienceForSpace200Response> updateAudienceForSpaceWithHttpInfo(
            String spaceId,
            String id,
            UpdateAudienceForSpaceBetaInput updateAudienceForSpaceBetaInput)
            throws ApiException {
        okhttp3.Call localVarCall =
                updateAudienceForSpaceValidateBeforeCall(
                        spaceId, id, updateAudienceForSpaceBetaInput, null);
        Type localVarReturnType = new TypeToken<UpdateAudienceForSpace200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Audience for Space (asynchronously) Updates the Audience. • This endpoint is in
     * **Alpha** testing. Please submit any feedback by sending an email to friends@segment.com. •
     * In order to successfully call this endpoint, the specified Workspace needs to have the
     * Audience feature enabled. Please reach out to your customer success manager for more
     * information. • When called, this endpoint may generate the &#x60;Audience Modified&#x60;
     * event in the [audit trail](/tag/Audit-Trail). • Note that when an Audience is updated, the
     * Audience will be locked from future edits until the changes have been incorporated. You can
     * find more information [in the Segment
     * docs](https://segment-docs.netlify.app/docs/engage/audiences/#editing-realtime-audiences-and-traits).
     * Note: The definition for an Audience updated using the API is not editable through the
     * Segment App. The rate limit for this endpoint is 10 requests per minute, which is lower than
     * the default due to access pattern restrictions. Once reached, this endpoint will respond with
     * the 429 HTTP status code with headers indicating the limit parameters. See [Rate
     * Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param spaceId (required)
     * @param id (required)
     * @param updateAudienceForSpaceBetaInput (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateAudienceForSpaceAsync(
            String spaceId,
            String id,
            UpdateAudienceForSpaceBetaInput updateAudienceForSpaceBetaInput,
            final ApiCallback<UpdateAudienceForSpace200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                updateAudienceForSpaceValidateBeforeCall(
                        spaceId, id, updateAudienceForSpaceBetaInput, _callback);
        Type localVarReturnType = new TypeToken<UpdateAudienceForSpace200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for updateAudienceScheduleForAudience
     *
     * @param spaceId (required)
     * @param id (required)
     * @param scheduleId (required)
     * @param updateAudienceScheduleForAudienceAlphaInput (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateAudienceScheduleForAudienceCall(
            String spaceId,
            String id,
            String scheduleId,
            UpdateAudienceScheduleForAudienceAlphaInput updateAudienceScheduleForAudienceAlphaInput,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAudienceScheduleForAudienceAlphaInput;

        // create path and map variables
        String localVarPath =
                "/spaces/{spaceId}/audiences/{id}/schedules/{scheduleId}"
                        .replace(
                                "{" + "spaceId" + "}",
                                localVarApiClient.escapeString(spaceId.toString()))
                        .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
                        .replace(
                                "{" + "scheduleId" + "}",
                                localVarApiClient.escapeString(scheduleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/vnd.segment.v1alpha+json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "PATCH",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAudienceScheduleForAudienceValidateBeforeCall(
            String spaceId,
            String id,
            String scheduleId,
            UpdateAudienceScheduleForAudienceAlphaInput updateAudienceScheduleForAudienceAlphaInput,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'spaceId' when calling"
                            + " updateAudienceScheduleForAudience(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling"
                            + " updateAudienceScheduleForAudience(Async)");
        }

        // verify the required parameter 'scheduleId' is set
        if (scheduleId == null) {
            throw new ApiException(
                    "Missing the required parameter 'scheduleId' when calling"
                            + " updateAudienceScheduleForAudience(Async)");
        }

        // verify the required parameter 'updateAudienceScheduleForAudienceAlphaInput' is set
        if (updateAudienceScheduleForAudienceAlphaInput == null) {
            throw new ApiException(
                    "Missing the required parameter 'updateAudienceScheduleForAudienceAlphaInput'"
                            + " when calling updateAudienceScheduleForAudience(Async)");
        }

        return updateAudienceScheduleForAudienceCall(
                spaceId, id, scheduleId, updateAudienceScheduleForAudienceAlphaInput, _callback);
    }

    /**
     * Update Audience Schedule for Audience Updates an audience schedule for a Linked Audience
     * (audienceType &#x3D; LINKED). • This endpoint is in **Alpha** testing. Please submit any
     * feedback by sending an email to friends@segment.com. • In order to successfully call this
     * endpoint, the specified Workspace needs to have the Audience feature enabled. Please reach
     * out to your customer success manager for more information.
     *
     * @param spaceId (required)
     * @param id (required)
     * @param scheduleId (required)
     * @param updateAudienceScheduleForAudienceAlphaInput (required)
     * @return UpdateAudienceScheduleForAudience200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public UpdateAudienceScheduleForAudience200Response updateAudienceScheduleForAudience(
            String spaceId,
            String id,
            String scheduleId,
            UpdateAudienceScheduleForAudienceAlphaInput updateAudienceScheduleForAudienceAlphaInput)
            throws ApiException {
        ApiResponse<UpdateAudienceScheduleForAudience200Response> localVarResp =
                updateAudienceScheduleForAudienceWithHttpInfo(
                        spaceId, id, scheduleId, updateAudienceScheduleForAudienceAlphaInput);
        return localVarResp.getData();
    }

    /**
     * Update Audience Schedule for Audience Updates an audience schedule for a Linked Audience
     * (audienceType &#x3D; LINKED). • This endpoint is in **Alpha** testing. Please submit any
     * feedback by sending an email to friends@segment.com. • In order to successfully call this
     * endpoint, the specified Workspace needs to have the Audience feature enabled. Please reach
     * out to your customer success manager for more information.
     *
     * @param spaceId (required)
     * @param id (required)
     * @param scheduleId (required)
     * @param updateAudienceScheduleForAudienceAlphaInput (required)
     * @return ApiResponse&lt;UpdateAudienceScheduleForAudience200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<UpdateAudienceScheduleForAudience200Response>
            updateAudienceScheduleForAudienceWithHttpInfo(
                    String spaceId,
                    String id,
                    String scheduleId,
                    UpdateAudienceScheduleForAudienceAlphaInput
                            updateAudienceScheduleForAudienceAlphaInput)
                    throws ApiException {
        okhttp3.Call localVarCall =
                updateAudienceScheduleForAudienceValidateBeforeCall(
                        spaceId, id, scheduleId, updateAudienceScheduleForAudienceAlphaInput, null);
        Type localVarReturnType =
                new TypeToken<UpdateAudienceScheduleForAudience200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Audience Schedule for Audience (asynchronously) Updates an audience schedule for a
     * Linked Audience (audienceType &#x3D; LINKED). • This endpoint is in **Alpha** testing. Please
     * submit any feedback by sending an email to friends@segment.com. • In order to successfully
     * call this endpoint, the specified Workspace needs to have the Audience feature enabled.
     * Please reach out to your customer success manager for more information.
     *
     * @param spaceId (required)
     * @param id (required)
     * @param scheduleId (required)
     * @param updateAudienceScheduleForAudienceAlphaInput (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateAudienceScheduleForAudienceAsync(
            String spaceId,
            String id,
            String scheduleId,
            UpdateAudienceScheduleForAudienceAlphaInput updateAudienceScheduleForAudienceAlphaInput,
            final ApiCallback<UpdateAudienceScheduleForAudience200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                updateAudienceScheduleForAudienceValidateBeforeCall(
                        spaceId,
                        id,
                        scheduleId,
                        updateAudienceScheduleForAudienceAlphaInput,
                        _callback);
        Type localVarReturnType =
                new TypeToken<UpdateAudienceScheduleForAudience200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
