/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 32.0.2
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.segment.publicapi.api;

import com.segment.publicapi.ApiCallback;
import com.segment.publicapi.ApiClient;
import com.segment.publicapi.ApiException;
import com.segment.publicapi.ApiResponse;
import com.segment.publicapi.Configuration;
import com.segment.publicapi.Pair;
import com.segment.publicapi.ProgressRequestBody;
import com.segment.publicapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.segment.publicapi.models.ListAuditEvents200Response;
import com.segment.publicapi.models.PaginationInput;
import com.segment.publicapi.models.RequestErrorEnvelope;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AuditTrailApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuditTrailApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuditTrailApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for listAuditEvents
     * @param pagination Defines the pagination parameters.  This parameter exists in alpha. (required)
     * @param startTime Filter response to events that happened after this time.  This parameter exists in alpha. (optional)
     * @param endTime Filter response to events that happened before this time. Defaults to the current time, or the end time from the pagination cursor.  This parameter exists in alpha. (optional)
     * @param resourceId Filter response to events that affect a specific resource, for example, a single Source.  This parameter exists in alpha. (optional)
     * @param resourceType Filter response to events that affect a specific type, for example, Sources, Warehouses, and Tracking Plans.  This parameter exists in alpha. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAuditEventsCall(PaginationInput pagination, String startTime, String endTime, String resourceId, String resourceType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/audit-events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (resourceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resourceId", resourceId));
        }

        if (resourceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resourceType", resourceType));
        }

        if (pagination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination", pagination));
        }

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/vnd.segment.v1beta+json", "application/vnd.segment.v1+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAuditEventsValidateBeforeCall(PaginationInput pagination, String startTime, String endTime, String resourceId, String resourceType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pagination' is set
        if (pagination == null) {
            throw new ApiException("Missing the required parameter 'pagination' when calling listAuditEvents(Async)");
        }
        

        okhttp3.Call localVarCall = listAuditEventsCall(pagination, startTime, endTime, resourceId, resourceType, _callback);
        return localVarCall;

    }

    /**
     * List Audit Events
     * Returns a list of Audit Trail events.
     * @param pagination Defines the pagination parameters.  This parameter exists in alpha. (required)
     * @param startTime Filter response to events that happened after this time.  This parameter exists in alpha. (optional)
     * @param endTime Filter response to events that happened before this time. Defaults to the current time, or the end time from the pagination cursor.  This parameter exists in alpha. (optional)
     * @param resourceId Filter response to events that affect a specific resource, for example, a single Source.  This parameter exists in alpha. (optional)
     * @param resourceType Filter response to events that affect a specific type, for example, Sources, Warehouses, and Tracking Plans.  This parameter exists in alpha. (optional)
     * @return ListAuditEvents200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ListAuditEvents200Response listAuditEvents(PaginationInput pagination, String startTime, String endTime, String resourceId, String resourceType) throws ApiException {
        ApiResponse<ListAuditEvents200Response> localVarResp = listAuditEventsWithHttpInfo(pagination, startTime, endTime, resourceId, resourceType);
        return localVarResp.getData();
    }

    /**
     * List Audit Events
     * Returns a list of Audit Trail events.
     * @param pagination Defines the pagination parameters.  This parameter exists in alpha. (required)
     * @param startTime Filter response to events that happened after this time.  This parameter exists in alpha. (optional)
     * @param endTime Filter response to events that happened before this time. Defaults to the current time, or the end time from the pagination cursor.  This parameter exists in alpha. (optional)
     * @param resourceId Filter response to events that affect a specific resource, for example, a single Source.  This parameter exists in alpha. (optional)
     * @param resourceType Filter response to events that affect a specific type, for example, Sources, Warehouses, and Tracking Plans.  This parameter exists in alpha. (optional)
     * @return ApiResponse&lt;ListAuditEvents200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAuditEvents200Response> listAuditEventsWithHttpInfo(PaginationInput pagination, String startTime, String endTime, String resourceId, String resourceType) throws ApiException {
        okhttp3.Call localVarCall = listAuditEventsValidateBeforeCall(pagination, startTime, endTime, resourceId, resourceType, null);
        Type localVarReturnType = new TypeToken<ListAuditEvents200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Audit Events (asynchronously)
     * Returns a list of Audit Trail events.
     * @param pagination Defines the pagination parameters.  This parameter exists in alpha. (required)
     * @param startTime Filter response to events that happened after this time.  This parameter exists in alpha. (optional)
     * @param endTime Filter response to events that happened before this time. Defaults to the current time, or the end time from the pagination cursor.  This parameter exists in alpha. (optional)
     * @param resourceId Filter response to events that affect a specific resource, for example, a single Source.  This parameter exists in alpha. (optional)
     * @param resourceType Filter response to events that affect a specific type, for example, Sources, Warehouses, and Tracking Plans.  This parameter exists in alpha. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAuditEventsAsync(PaginationInput pagination, String startTime, String endTime, String resourceId, String resourceType, final ApiCallback<ListAuditEvents200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAuditEventsValidateBeforeCall(pagination, startTime, endTime, resourceId, resourceType, _callback);
        Type localVarReturnType = new TypeToken<ListAuditEvents200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
