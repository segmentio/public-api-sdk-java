/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.api;

import com.google.gson.reflect.TypeToken;
import com.segment.publicapi.ApiCallback;
import com.segment.publicapi.ApiClient;
import com.segment.publicapi.ApiException;
import com.segment.publicapi.ApiResponse;
import com.segment.publicapi.Configuration;
import com.segment.publicapi.Pair;
import com.segment.publicapi.models.AddPermissionsToUser200Response;
import com.segment.publicapi.models.AddPermissionsToUserV1Input;
import com.segment.publicapi.models.CreateInvites200Response;
import com.segment.publicapi.models.CreateInvitesV1Input;
import com.segment.publicapi.models.DeleteInvites200Response;
import com.segment.publicapi.models.DeleteUsers200Response;
import com.segment.publicapi.models.GetUser200Response;
import com.segment.publicapi.models.ListInvites200Response;
import com.segment.publicapi.models.ListUserGroupsFromUser200Response;
import com.segment.publicapi.models.ListUsers200Response;
import com.segment.publicapi.models.PaginationInput;
import com.segment.publicapi.models.ReplacePermissionsForUser200Response;
import com.segment.publicapi.models.ReplacePermissionsForUserV1Input;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IamUsersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IamUsersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IamUsersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addPermissionsToUser
     *
     * @param userId (required)
     * @param addPermissionsToUserV1Input (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call addPermissionsToUserCall(
            String userId,
            AddPermissionsToUserV1Input addPermissionsToUserV1Input,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addPermissionsToUserV1Input;

        // create path and map variables
        String localVarPath =
                "/users/{userId}/permissions"
                        .replace(
                                "{" + "userId" + "}",
                                localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1+json",
            "application/json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.segment.v1+json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addPermissionsToUserValidateBeforeCall(
            String userId,
            AddPermissionsToUserV1Input addPermissionsToUserV1Input,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException(
                    "Missing the required parameter 'userId' when calling"
                            + " addPermissionsToUser(Async)");
        }

        // verify the required parameter 'addPermissionsToUserV1Input' is set
        if (addPermissionsToUserV1Input == null) {
            throw new ApiException(
                    "Missing the required parameter 'addPermissionsToUserV1Input' when calling"
                            + " addPermissionsToUser(Async)");
        }

        return addPermissionsToUserCall(userId, addPermissionsToUserV1Input, _callback);
    }

    /**
     * Add Permissions to User Adds a list of access permissions to a user. • When called, this
     * endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:*
     * Policy Created * User Policy Updated The rate limit for this endpoint is 60 requests per
     * minute, which is lower than the default due to access pattern restrictions. Once reached,
     * this endpoint will respond with the 429 HTTP status code with headers indicating the limit
     * parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param userId (required)
     * @param addPermissionsToUserV1Input (required)
     * @return AddPermissionsToUser200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public AddPermissionsToUser200Response addPermissionsToUser(
            String userId, AddPermissionsToUserV1Input addPermissionsToUserV1Input)
            throws ApiException {
        ApiResponse<AddPermissionsToUser200Response> localVarResp =
                addPermissionsToUserWithHttpInfo(userId, addPermissionsToUserV1Input);
        return localVarResp.getData();
    }

    /**
     * Add Permissions to User Adds a list of access permissions to a user. • When called, this
     * endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:*
     * Policy Created * User Policy Updated The rate limit for this endpoint is 60 requests per
     * minute, which is lower than the default due to access pattern restrictions. Once reached,
     * this endpoint will respond with the 429 HTTP status code with headers indicating the limit
     * parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param userId (required)
     * @param addPermissionsToUserV1Input (required)
     * @return ApiResponse&lt;AddPermissionsToUser200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<AddPermissionsToUser200Response> addPermissionsToUserWithHttpInfo(
            String userId, AddPermissionsToUserV1Input addPermissionsToUserV1Input)
            throws ApiException {
        okhttp3.Call localVarCall =
                addPermissionsToUserValidateBeforeCall(userId, addPermissionsToUserV1Input, null);
        Type localVarReturnType = new TypeToken<AddPermissionsToUser200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Permissions to User (asynchronously) Adds a list of access permissions to a user. • When
     * called, this endpoint may generate one or more of the following [audit
     * trail](/tag/Audit-Trail) events:* Policy Created * User Policy Updated The rate limit for
     * this endpoint is 60 requests per minute, which is lower than the default due to access
     * pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code
     * with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more
     * information.
     *
     * @param userId (required)
     * @param addPermissionsToUserV1Input (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call addPermissionsToUserAsync(
            String userId,
            AddPermissionsToUserV1Input addPermissionsToUserV1Input,
            final ApiCallback<AddPermissionsToUser200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                addPermissionsToUserValidateBeforeCall(
                        userId, addPermissionsToUserV1Input, _callback);
        Type localVarReturnType = new TypeToken<AddPermissionsToUser200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for createInvites
     *
     * @param createInvitesV1Input (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createInvitesCall(
            CreateInvitesV1Input createInvitesV1Input, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createInvitesV1Input;

        // create path and map variables
        String localVarPath = "/invites";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1+json",
            "application/json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.segment.v1+json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createInvitesValidateBeforeCall(
            CreateInvitesV1Input createInvitesV1Input, final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'createInvitesV1Input' is set
        if (createInvitesV1Input == null) {
            throw new ApiException(
                    "Missing the required parameter 'createInvitesV1Input' when calling"
                            + " createInvites(Async)");
        }

        return createInvitesCall(createInvitesV1Input, _callback);
    }

    /**
     * Create Invites Invites a list of users to join a Workspace. • When called, this endpoint may
     * generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Non-Segment
     * User Invited to Workspace * Policy Created * New Segment User Invited to Workspace Config API
     * omitted fields: - &#x60;parent&#x60; The rate limit for this endpoint is 60 requests per
     * minute, which is lower than the default due to access pattern restrictions. Once reached,
     * this endpoint will respond with the 429 HTTP status code with headers indicating the limit
     * parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param createInvitesV1Input (required)
     * @return CreateInvites200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public CreateInvites200Response createInvites(CreateInvitesV1Input createInvitesV1Input)
            throws ApiException {
        ApiResponse<CreateInvites200Response> localVarResp =
                createInvitesWithHttpInfo(createInvitesV1Input);
        return localVarResp.getData();
    }

    /**
     * Create Invites Invites a list of users to join a Workspace. • When called, this endpoint may
     * generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Non-Segment
     * User Invited to Workspace * Policy Created * New Segment User Invited to Workspace Config API
     * omitted fields: - &#x60;parent&#x60; The rate limit for this endpoint is 60 requests per
     * minute, which is lower than the default due to access pattern restrictions. Once reached,
     * this endpoint will respond with the 429 HTTP status code with headers indicating the limit
     * parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param createInvitesV1Input (required)
     * @return ApiResponse&lt;CreateInvites200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CreateInvites200Response> createInvitesWithHttpInfo(
            CreateInvitesV1Input createInvitesV1Input) throws ApiException {
        okhttp3.Call localVarCall = createInvitesValidateBeforeCall(createInvitesV1Input, null);
        Type localVarReturnType = new TypeToken<CreateInvites200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Invites (asynchronously) Invites a list of users to join a Workspace. • When called,
     * this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail)
     * events:* Non-Segment User Invited to Workspace * Policy Created * New Segment User Invited to
     * Workspace Config API omitted fields: - &#x60;parent&#x60; The rate limit for this endpoint is
     * 60 requests per minute, which is lower than the default due to access pattern restrictions.
     * Once reached, this endpoint will respond with the 429 HTTP status code with headers
     * indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param createInvitesV1Input (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createInvitesAsync(
            CreateInvitesV1Input createInvitesV1Input,
            final ApiCallback<CreateInvites200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                createInvitesValidateBeforeCall(createInvitesV1Input, _callback);
        Type localVarReturnType = new TypeToken<CreateInvites200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for deleteInvites
     *
     * @param emails The list of emails to delete invites for. This parameter exists in v1.
     *     (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteInvitesCall(List<String> emails, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/invites";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (emails != null) {
            localVarCollectionQueryParams.addAll(
                    localVarApiClient.parameterToPairs("csv", "emails", emails));
        }

        final String[] localVarAccepts = {
            "application/vnd.segment.v1+json",
            "application/json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "DELETE",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteInvitesValidateBeforeCall(
            List<String> emails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emails' is set
        if (emails == null) {
            throw new ApiException(
                    "Missing the required parameter 'emails' when calling deleteInvites(Async)");
        }

        return deleteInvitesCall(emails, _callback);
    }

    /**
     * Delete Invites Removes a list of invitations to join a Workspace. • When called, this
     * endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:*
     * Invite Deleted * Group Memberships Deleted The rate limit for this endpoint is 60 requests
     * per minute, which is lower than the default due to access pattern restrictions. Once reached,
     * this endpoint will respond with the 429 HTTP status code with headers indicating the limit
     * parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param emails The list of emails to delete invites for. This parameter exists in v1.
     *     (required)
     * @return DeleteInvites200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public DeleteInvites200Response deleteInvites(List<String> emails) throws ApiException {
        ApiResponse<DeleteInvites200Response> localVarResp = deleteInvitesWithHttpInfo(emails);
        return localVarResp.getData();
    }

    /**
     * Delete Invites Removes a list of invitations to join a Workspace. • When called, this
     * endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:*
     * Invite Deleted * Group Memberships Deleted The rate limit for this endpoint is 60 requests
     * per minute, which is lower than the default due to access pattern restrictions. Once reached,
     * this endpoint will respond with the 429 HTTP status code with headers indicating the limit
     * parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param emails The list of emails to delete invites for. This parameter exists in v1.
     *     (required)
     * @return ApiResponse&lt;DeleteInvites200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<DeleteInvites200Response> deleteInvitesWithHttpInfo(List<String> emails)
            throws ApiException {
        okhttp3.Call localVarCall = deleteInvitesValidateBeforeCall(emails, null);
        Type localVarReturnType = new TypeToken<DeleteInvites200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Invites (asynchronously) Removes a list of invitations to join a Workspace. • When
     * called, this endpoint may generate one or more of the following [audit
     * trail](/tag/Audit-Trail) events:* Invite Deleted * Group Memberships Deleted The rate limit
     * for this endpoint is 60 requests per minute, which is lower than the default due to access
     * pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code
     * with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more
     * information.
     *
     * @param emails The list of emails to delete invites for. This parameter exists in v1.
     *     (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteInvitesAsync(
            List<String> emails, final ApiCallback<DeleteInvites200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = deleteInvitesValidateBeforeCall(emails, _callback);
        Type localVarReturnType = new TypeToken<DeleteInvites200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for deleteUsers
     *
     * @param userIds The ids of the users to remove. This parameter exists in v1. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteUsersCall(List<String> userIds, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userIds != null) {
            localVarCollectionQueryParams.addAll(
                    localVarApiClient.parameterToPairs("csv", "userIds", userIds));
        }

        final String[] localVarAccepts = {
            "application/vnd.segment.v1+json",
            "application/json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "DELETE",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUsersValidateBeforeCall(
            List<String> userIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userIds' is set
        if (userIds == null) {
            throw new ApiException(
                    "Missing the required parameter 'userIds' when calling deleteUsers(Async)");
        }

        return deleteUsersCall(userIds, _callback);
    }

    /**
     * Delete Users Removes one or multiple users. • When called, this endpoint may generate the
     * &#x60;Group Memberships Deleted&#x60; event in the [audit trail](/tag/Audit-Trail). The rate
     * limit for this endpoint is 60 requests per minute, which is lower than the default due to
     * access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP
     * status code with headers indicating the limit parameters. See [Rate
     * Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param userIds The ids of the users to remove. This parameter exists in v1. (required)
     * @return DeleteUsers200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public DeleteUsers200Response deleteUsers(List<String> userIds) throws ApiException {
        ApiResponse<DeleteUsers200Response> localVarResp = deleteUsersWithHttpInfo(userIds);
        return localVarResp.getData();
    }

    /**
     * Delete Users Removes one or multiple users. • When called, this endpoint may generate the
     * &#x60;Group Memberships Deleted&#x60; event in the [audit trail](/tag/Audit-Trail). The rate
     * limit for this endpoint is 60 requests per minute, which is lower than the default due to
     * access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP
     * status code with headers indicating the limit parameters. See [Rate
     * Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param userIds The ids of the users to remove. This parameter exists in v1. (required)
     * @return ApiResponse&lt;DeleteUsers200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<DeleteUsers200Response> deleteUsersWithHttpInfo(List<String> userIds)
            throws ApiException {
        okhttp3.Call localVarCall = deleteUsersValidateBeforeCall(userIds, null);
        Type localVarReturnType = new TypeToken<DeleteUsers200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Users (asynchronously) Removes one or multiple users. • When called, this endpoint may
     * generate the &#x60;Group Memberships Deleted&#x60; event in the [audit
     * trail](/tag/Audit-Trail). The rate limit for this endpoint is 60 requests per minute, which
     * is lower than the default due to access pattern restrictions. Once reached, this endpoint
     * will respond with the 429 HTTP status code with headers indicating the limit parameters. See
     * [Rate Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param userIds The ids of the users to remove. This parameter exists in v1. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteUsersAsync(
            List<String> userIds, final ApiCallback<DeleteUsers200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = deleteUsersValidateBeforeCall(userIds, _callback);
        Type localVarReturnType = new TypeToken<DeleteUsers200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getUser
     *
     * @param userId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getUserCall(String userId, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/users/{userId}"
                        .replace(
                                "{" + "userId" + "}",
                                localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1+json",
            "application/json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserValidateBeforeCall(String userId, final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException(
                    "Missing the required parameter 'userId' when calling getUser(Async)");
        }

        return getUserCall(userId, _callback);
    }

    /**
     * Get User Returns a user given their id.
     *
     * @param userId (required)
     * @return GetUser200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public GetUser200Response getUser(String userId) throws ApiException {
        ApiResponse<GetUser200Response> localVarResp = getUserWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Get User Returns a user given their id.
     *
     * @param userId (required)
     * @return ApiResponse&lt;GetUser200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<GetUser200Response> getUserWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = getUserValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<GetUser200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get User (asynchronously) Returns a user given their id.
     *
     * @param userId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getUserAsync(String userId, final ApiCallback<GetUser200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = getUserValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<GetUser200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for listInvites
     *
     * @param pagination Defines the pagination parameters. This parameter exists in v1. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listInvitesCall(PaginationInput pagination, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/invites";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pagination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination", pagination));
        }

        final String[] localVarAccepts = {
            "application/vnd.segment.v1+json",
            "application/json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listInvitesValidateBeforeCall(
            PaginationInput pagination, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pagination' is set
        if (pagination == null) {
            throw new ApiException(
                    "Missing the required parameter 'pagination' when calling listInvites(Async)");
        }

        return listInvitesCall(pagination, _callback);
    }

    /**
     * List Invites Returns a list of invitations to join a Workspace. Config API omitted fields: -
     * &#x60;parent&#x60;
     *
     * @param pagination Defines the pagination parameters. This parameter exists in v1. (required)
     * @return ListInvites200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ListInvites200Response listInvites(PaginationInput pagination) throws ApiException {
        ApiResponse<ListInvites200Response> localVarResp = listInvitesWithHttpInfo(pagination);
        return localVarResp.getData();
    }

    /**
     * List Invites Returns a list of invitations to join a Workspace. Config API omitted fields: -
     * &#x60;parent&#x60;
     *
     * @param pagination Defines the pagination parameters. This parameter exists in v1. (required)
     * @return ApiResponse&lt;ListInvites200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ListInvites200Response> listInvitesWithHttpInfo(PaginationInput pagination)
            throws ApiException {
        okhttp3.Call localVarCall = listInvitesValidateBeforeCall(pagination, null);
        Type localVarReturnType = new TypeToken<ListInvites200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Invites (asynchronously) Returns a list of invitations to join a Workspace. Config API
     * omitted fields: - &#x60;parent&#x60;
     *
     * @param pagination Defines the pagination parameters. This parameter exists in v1. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listInvitesAsync(
            PaginationInput pagination, final ApiCallback<ListInvites200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = listInvitesValidateBeforeCall(pagination, _callback);
        Type localVarReturnType = new TypeToken<ListInvites200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for listUserGroupsFromUser
     *
     * @param userId (required)
     * @param pagination Pagination for groups. This parameter exists in v1. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listUserGroupsFromUserCall(
            String userId, PaginationInput pagination, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/users/{userId}/groups"
                        .replace(
                                "{" + "userId" + "}",
                                localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pagination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination", pagination));
        }

        final String[] localVarAccepts = {
            "application/vnd.segment.v1+json",
            "application/json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUserGroupsFromUserValidateBeforeCall(
            String userId, PaginationInput pagination, final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException(
                    "Missing the required parameter 'userId' when calling"
                            + " listUserGroupsFromUser(Async)");
        }

        // verify the required parameter 'pagination' is set
        if (pagination == null) {
            throw new ApiException(
                    "Missing the required parameter 'pagination' when calling"
                            + " listUserGroupsFromUser(Async)");
        }

        return listUserGroupsFromUserCall(userId, pagination, _callback);
    }

    /**
     * List User Groups from User Returns all groups a user belongs to.
     *
     * @param userId (required)
     * @param pagination Pagination for groups. This parameter exists in v1. (required)
     * @return ListUserGroupsFromUser200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ListUserGroupsFromUser200Response listUserGroupsFromUser(
            String userId, PaginationInput pagination) throws ApiException {
        ApiResponse<ListUserGroupsFromUser200Response> localVarResp =
                listUserGroupsFromUserWithHttpInfo(userId, pagination);
        return localVarResp.getData();
    }

    /**
     * List User Groups from User Returns all groups a user belongs to.
     *
     * @param userId (required)
     * @param pagination Pagination for groups. This parameter exists in v1. (required)
     * @return ApiResponse&lt;ListUserGroupsFromUser200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ListUserGroupsFromUser200Response> listUserGroupsFromUserWithHttpInfo(
            String userId, PaginationInput pagination) throws ApiException {
        okhttp3.Call localVarCall =
                listUserGroupsFromUserValidateBeforeCall(userId, pagination, null);
        Type localVarReturnType = new TypeToken<ListUserGroupsFromUser200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List User Groups from User (asynchronously) Returns all groups a user belongs to.
     *
     * @param userId (required)
     * @param pagination Pagination for groups. This parameter exists in v1. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listUserGroupsFromUserAsync(
            String userId,
            PaginationInput pagination,
            final ApiCallback<ListUserGroupsFromUser200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                listUserGroupsFromUserValidateBeforeCall(userId, pagination, _callback);
        Type localVarReturnType = new TypeToken<ListUserGroupsFromUser200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for listUsers
     *
     * @param pagination Pagination for users. This parameter exists in v1. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listUsersCall(PaginationInput pagination, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pagination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination", pagination));
        }

        final String[] localVarAccepts = {
            "application/vnd.segment.v1+json",
            "application/json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUsersValidateBeforeCall(
            PaginationInput pagination, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pagination' is set
        if (pagination == null) {
            throw new ApiException(
                    "Missing the required parameter 'pagination' when calling listUsers(Async)");
        }

        return listUsersCall(pagination, _callback);
    }

    /**
     * List Users Returns a list of users with access to the Workspace.
     *
     * @param pagination Pagination for users. This parameter exists in v1. (required)
     * @return ListUsers200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ListUsers200Response listUsers(PaginationInput pagination) throws ApiException {
        ApiResponse<ListUsers200Response> localVarResp = listUsersWithHttpInfo(pagination);
        return localVarResp.getData();
    }

    /**
     * List Users Returns a list of users with access to the Workspace.
     *
     * @param pagination Pagination for users. This parameter exists in v1. (required)
     * @return ApiResponse&lt;ListUsers200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ListUsers200Response> listUsersWithHttpInfo(PaginationInput pagination)
            throws ApiException {
        okhttp3.Call localVarCall = listUsersValidateBeforeCall(pagination, null);
        Type localVarReturnType = new TypeToken<ListUsers200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Users (asynchronously) Returns a list of users with access to the Workspace.
     *
     * @param pagination Pagination for users. This parameter exists in v1. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listUsersAsync(
            PaginationInput pagination, final ApiCallback<ListUsers200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = listUsersValidateBeforeCall(pagination, _callback);
        Type localVarReturnType = new TypeToken<ListUsers200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for replacePermissionsForUser
     *
     * @param userId (required)
     * @param replacePermissionsForUserV1Input (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call replacePermissionsForUserCall(
            String userId,
            ReplacePermissionsForUserV1Input replacePermissionsForUserV1Input,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = replacePermissionsForUserV1Input;

        // create path and map variables
        String localVarPath =
                "/users/{userId}/permissions"
                        .replace(
                                "{" + "userId" + "}",
                                localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1+json",
            "application/json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.segment.v1+json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "PUT",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replacePermissionsForUserValidateBeforeCall(
            String userId,
            ReplacePermissionsForUserV1Input replacePermissionsForUserV1Input,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException(
                    "Missing the required parameter 'userId' when calling"
                            + " replacePermissionsForUser(Async)");
        }

        // verify the required parameter 'replacePermissionsForUserV1Input' is set
        if (replacePermissionsForUserV1Input == null) {
            throw new ApiException(
                    "Missing the required parameter 'replacePermissionsForUserV1Input' when calling"
                            + " replacePermissionsForUser(Async)");
        }

        return replacePermissionsForUserCall(userId, replacePermissionsForUserV1Input, _callback);
    }

    /**
     * Replace Permissions for User Updates the list of access permissions for a user. • When
     * called, this endpoint may generate the &#x60;Policy Deleted&#x60; event in the [audit
     * trail](/tag/Audit-Trail). The rate limit for this endpoint is 60 requests per minute, which
     * is lower than the default due to access pattern restrictions. Once reached, this endpoint
     * will respond with the 429 HTTP status code with headers indicating the limit parameters. See
     * [Rate Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param userId (required)
     * @param replacePermissionsForUserV1Input (required)
     * @return ReplacePermissionsForUser200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ReplacePermissionsForUser200Response replacePermissionsForUser(
            String userId, ReplacePermissionsForUserV1Input replacePermissionsForUserV1Input)
            throws ApiException {
        ApiResponse<ReplacePermissionsForUser200Response> localVarResp =
                replacePermissionsForUserWithHttpInfo(userId, replacePermissionsForUserV1Input);
        return localVarResp.getData();
    }

    /**
     * Replace Permissions for User Updates the list of access permissions for a user. • When
     * called, this endpoint may generate the &#x60;Policy Deleted&#x60; event in the [audit
     * trail](/tag/Audit-Trail). The rate limit for this endpoint is 60 requests per minute, which
     * is lower than the default due to access pattern restrictions. Once reached, this endpoint
     * will respond with the 429 HTTP status code with headers indicating the limit parameters. See
     * [Rate Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param userId (required)
     * @param replacePermissionsForUserV1Input (required)
     * @return ApiResponse&lt;ReplacePermissionsForUser200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ReplacePermissionsForUser200Response> replacePermissionsForUserWithHttpInfo(
            String userId, ReplacePermissionsForUserV1Input replacePermissionsForUserV1Input)
            throws ApiException {
        okhttp3.Call localVarCall =
                replacePermissionsForUserValidateBeforeCall(
                        userId, replacePermissionsForUserV1Input, null);
        Type localVarReturnType =
                new TypeToken<ReplacePermissionsForUser200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace Permissions for User (asynchronously) Updates the list of access permissions for a
     * user. • When called, this endpoint may generate the &#x60;Policy Deleted&#x60; event in the
     * [audit trail](/tag/Audit-Trail). The rate limit for this endpoint is 60 requests per minute,
     * which is lower than the default due to access pattern restrictions. Once reached, this
     * endpoint will respond with the 429 HTTP status code with headers indicating the limit
     * parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param userId (required)
     * @param replacePermissionsForUserV1Input (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call replacePermissionsForUserAsync(
            String userId,
            ReplacePermissionsForUserV1Input replacePermissionsForUserV1Input,
            final ApiCallback<ReplacePermissionsForUser200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                replacePermissionsForUserValidateBeforeCall(
                        userId, replacePermissionsForUserV1Input, _callback);
        Type localVarReturnType =
                new TypeToken<ReplacePermissionsForUser200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
