/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.api;

import com.google.gson.reflect.TypeToken;
import com.segment.publicapi.ApiCallback;
import com.segment.publicapi.ApiClient;
import com.segment.publicapi.ApiException;
import com.segment.publicapi.ApiResponse;
import com.segment.publicapi.Configuration;
import com.segment.publicapi.Pair;
import com.segment.publicapi.models.CreateDestination200Response;
import com.segment.publicapi.models.CreateDestinationSubscription200Response;
import com.segment.publicapi.models.CreateDestinationSubscriptionAlphaInput;
import com.segment.publicapi.models.CreateDestinationV1Input;
import com.segment.publicapi.models.DeleteDestination200Response;
import com.segment.publicapi.models.GetDestination200Response;
import com.segment.publicapi.models.GetSubscriptionFromDestination200Response;
import com.segment.publicapi.models.ListDeliveryMetricsSummaryFromDestination200Response;
import com.segment.publicapi.models.ListDestinations200Response;
import com.segment.publicapi.models.ListSubscriptionsFromDestination200Response;
import com.segment.publicapi.models.PaginationInput;
import com.segment.publicapi.models.RemoveSubscriptionFromDestination200Response;
import com.segment.publicapi.models.UpdateDestination200Response;
import com.segment.publicapi.models.UpdateDestinationV1Input;
import com.segment.publicapi.models.UpdateSubscriptionForDestination200Response;
import com.segment.publicapi.models.UpdateSubscriptionForDestinationAlphaInput;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DestinationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DestinationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DestinationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createDestination
     *
     * @param createDestinationV1Input (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createDestinationCall(
            CreateDestinationV1Input createDestinationV1Input, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDestinationV1Input;

        // create path and map variables
        String localVarPath = "/destinations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1+json",
            "application/json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/vnd.segment.v1+json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDestinationValidateBeforeCall(
            CreateDestinationV1Input createDestinationV1Input, final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'createDestinationV1Input' is set
        if (createDestinationV1Input == null) {
            throw new ApiException(
                    "Missing the required parameter 'createDestinationV1Input' when calling"
                            + " createDestination(Async)");
        }

        return createDestinationCall(createDestinationV1Input, _callback);
    }

    /**
     * Create Destination Creates a new Destination. • When called, this endpoint may generate the
     * &#x60;Integration Created&#x60; event in the [audit trail](/tag/Audit-Trail).
     *
     * @param createDestinationV1Input (required)
     * @return CreateDestination200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public CreateDestination200Response createDestination(
            CreateDestinationV1Input createDestinationV1Input) throws ApiException {
        ApiResponse<CreateDestination200Response> localVarResp =
                createDestinationWithHttpInfo(createDestinationV1Input);
        return localVarResp.getData();
    }

    /**
     * Create Destination Creates a new Destination. • When called, this endpoint may generate the
     * &#x60;Integration Created&#x60; event in the [audit trail](/tag/Audit-Trail).
     *
     * @param createDestinationV1Input (required)
     * @return ApiResponse&lt;CreateDestination200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CreateDestination200Response> createDestinationWithHttpInfo(
            CreateDestinationV1Input createDestinationV1Input) throws ApiException {
        okhttp3.Call localVarCall =
                createDestinationValidateBeforeCall(createDestinationV1Input, null);
        Type localVarReturnType = new TypeToken<CreateDestination200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Destination (asynchronously) Creates a new Destination. • When called, this endpoint
     * may generate the &#x60;Integration Created&#x60; event in the [audit
     * trail](/tag/Audit-Trail).
     *
     * @param createDestinationV1Input (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createDestinationAsync(
            CreateDestinationV1Input createDestinationV1Input,
            final ApiCallback<CreateDestination200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                createDestinationValidateBeforeCall(createDestinationV1Input, _callback);
        Type localVarReturnType = new TypeToken<CreateDestination200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for createDestinationSubscription
     *
     * @param destinationId (required)
     * @param createDestinationSubscriptionAlphaInput (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createDestinationSubscriptionCall(
            String destinationId,
            CreateDestinationSubscriptionAlphaInput createDestinationSubscriptionAlphaInput,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDestinationSubscriptionAlphaInput;

        // create path and map variables
        String localVarPath =
                "/destinations/{destinationId}/subscriptions"
                        .replace(
                                "{" + "destinationId" + "}",
                                localVarApiClient.escapeString(destinationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/vnd.segment.v1alpha+json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDestinationSubscriptionValidateBeforeCall(
            String destinationId,
            CreateDestinationSubscriptionAlphaInput createDestinationSubscriptionAlphaInput,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'destinationId' is set
        if (destinationId == null) {
            throw new ApiException(
                    "Missing the required parameter 'destinationId' when calling"
                            + " createDestinationSubscription(Async)");
        }

        // verify the required parameter 'createDestinationSubscriptionAlphaInput' is set
        if (createDestinationSubscriptionAlphaInput == null) {
            throw new ApiException(
                    "Missing the required parameter 'createDestinationSubscriptionAlphaInput' when"
                            + " calling createDestinationSubscription(Async)");
        }

        return createDestinationSubscriptionCall(
                destinationId, createDestinationSubscriptionAlphaInput, _callback);
    }

    /**
     * Create Destination Subscription Creates a new Destination subscription. • This endpoint is in
     * **Alpha** testing. Please submit any feedback by sending an email to friends@segment.com. •
     * In order to successfully call this endpoint, the specified Workspace needs to have the
     * Destination Subscriptions feature enabled. Please reach out to your customer success manager
     * for more information. The rate limit for this endpoint is 250 requests per minute, which is
     * lower than the default due to access pattern restrictions. Once reached, this endpoint will
     * respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate
     * Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param destinationId (required)
     * @param createDestinationSubscriptionAlphaInput (required)
     * @return CreateDestinationSubscription200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public CreateDestinationSubscription200Response createDestinationSubscription(
            String destinationId,
            CreateDestinationSubscriptionAlphaInput createDestinationSubscriptionAlphaInput)
            throws ApiException {
        ApiResponse<CreateDestinationSubscription200Response> localVarResp =
                createDestinationSubscriptionWithHttpInfo(
                        destinationId, createDestinationSubscriptionAlphaInput);
        return localVarResp.getData();
    }

    /**
     * Create Destination Subscription Creates a new Destination subscription. • This endpoint is in
     * **Alpha** testing. Please submit any feedback by sending an email to friends@segment.com. •
     * In order to successfully call this endpoint, the specified Workspace needs to have the
     * Destination Subscriptions feature enabled. Please reach out to your customer success manager
     * for more information. The rate limit for this endpoint is 250 requests per minute, which is
     * lower than the default due to access pattern restrictions. Once reached, this endpoint will
     * respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate
     * Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param destinationId (required)
     * @param createDestinationSubscriptionAlphaInput (required)
     * @return ApiResponse&lt;CreateDestinationSubscription200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CreateDestinationSubscription200Response>
            createDestinationSubscriptionWithHttpInfo(
                    String destinationId,
                    CreateDestinationSubscriptionAlphaInput createDestinationSubscriptionAlphaInput)
                    throws ApiException {
        okhttp3.Call localVarCall =
                createDestinationSubscriptionValidateBeforeCall(
                        destinationId, createDestinationSubscriptionAlphaInput, null);
        Type localVarReturnType =
                new TypeToken<CreateDestinationSubscription200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Destination Subscription (asynchronously) Creates a new Destination subscription. •
     * This endpoint is in **Alpha** testing. Please submit any feedback by sending an email to
     * friends@segment.com. • In order to successfully call this endpoint, the specified Workspace
     * needs to have the Destination Subscriptions feature enabled. Please reach out to your
     * customer success manager for more information. The rate limit for this endpoint is 250
     * requests per minute, which is lower than the default due to access pattern restrictions. Once
     * reached, this endpoint will respond with the 429 HTTP status code with headers indicating the
     * limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param destinationId (required)
     * @param createDestinationSubscriptionAlphaInput (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createDestinationSubscriptionAsync(
            String destinationId,
            CreateDestinationSubscriptionAlphaInput createDestinationSubscriptionAlphaInput,
            final ApiCallback<CreateDestinationSubscription200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                createDestinationSubscriptionValidateBeforeCall(
                        destinationId, createDestinationSubscriptionAlphaInput, _callback);
        Type localVarReturnType =
                new TypeToken<CreateDestinationSubscription200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for deleteDestination
     *
     * @param destinationId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteDestinationCall(String destinationId, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/destinations/{destinationId}"
                        .replace(
                                "{" + "destinationId" + "}",
                                localVarApiClient.escapeString(destinationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1+json",
            "application/json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "DELETE",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDestinationValidateBeforeCall(
            String destinationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'destinationId' is set
        if (destinationId == null) {
            throw new ApiException(
                    "Missing the required parameter 'destinationId' when calling"
                            + " deleteDestination(Async)");
        }

        return deleteDestinationCall(destinationId, _callback);
    }

    /**
     * Delete Destination Deletes an existing Destination. • When called, this endpoint may generate
     * the &#x60;Integration Deleted&#x60; event in the [audit trail](/tag/Audit-Trail). Config API
     * omitted fields: - &#x60;catalogId&#x60;
     *
     * @param destinationId (required)
     * @return DeleteDestination200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public DeleteDestination200Response deleteDestination(String destinationId)
            throws ApiException {
        ApiResponse<DeleteDestination200Response> localVarResp =
                deleteDestinationWithHttpInfo(destinationId);
        return localVarResp.getData();
    }

    /**
     * Delete Destination Deletes an existing Destination. • When called, this endpoint may generate
     * the &#x60;Integration Deleted&#x60; event in the [audit trail](/tag/Audit-Trail). Config API
     * omitted fields: - &#x60;catalogId&#x60;
     *
     * @param destinationId (required)
     * @return ApiResponse&lt;DeleteDestination200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<DeleteDestination200Response> deleteDestinationWithHttpInfo(
            String destinationId) throws ApiException {
        okhttp3.Call localVarCall = deleteDestinationValidateBeforeCall(destinationId, null);
        Type localVarReturnType = new TypeToken<DeleteDestination200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Destination (asynchronously) Deletes an existing Destination. • When called, this
     * endpoint may generate the &#x60;Integration Deleted&#x60; event in the [audit
     * trail](/tag/Audit-Trail). Config API omitted fields: - &#x60;catalogId&#x60;
     *
     * @param destinationId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteDestinationAsync(
            String destinationId, final ApiCallback<DeleteDestination200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = deleteDestinationValidateBeforeCall(destinationId, _callback);
        Type localVarReturnType = new TypeToken<DeleteDestination200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getDestination
     *
     * @param destinationId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getDestinationCall(String destinationId, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/destinations/{destinationId}"
                        .replace(
                                "{" + "destinationId" + "}",
                                localVarApiClient.escapeString(destinationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1+json",
            "application/json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDestinationValidateBeforeCall(
            String destinationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'destinationId' is set
        if (destinationId == null) {
            throw new ApiException(
                    "Missing the required parameter 'destinationId' when calling"
                            + " getDestination(Async)");
        }

        return getDestinationCall(destinationId, _callback);
    }

    /**
     * Get Destination Returns a Destination by its id. Config API omitted fields: -
     * &#x60;catalogId&#x60;
     *
     * @param destinationId (required)
     * @return GetDestination200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public GetDestination200Response getDestination(String destinationId) throws ApiException {
        ApiResponse<GetDestination200Response> localVarResp =
                getDestinationWithHttpInfo(destinationId);
        return localVarResp.getData();
    }

    /**
     * Get Destination Returns a Destination by its id. Config API omitted fields: -
     * &#x60;catalogId&#x60;
     *
     * @param destinationId (required)
     * @return ApiResponse&lt;GetDestination200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<GetDestination200Response> getDestinationWithHttpInfo(String destinationId)
            throws ApiException {
        okhttp3.Call localVarCall = getDestinationValidateBeforeCall(destinationId, null);
        Type localVarReturnType = new TypeToken<GetDestination200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Destination (asynchronously) Returns a Destination by its id. Config API omitted fields:
     * - &#x60;catalogId&#x60;
     *
     * @param destinationId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getDestinationAsync(
            String destinationId, final ApiCallback<GetDestination200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = getDestinationValidateBeforeCall(destinationId, _callback);
        Type localVarReturnType = new TypeToken<GetDestination200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getSubscriptionFromDestination
     *
     * @param destinationId (required)
     * @param id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getSubscriptionFromDestinationCall(
            String destinationId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/destinations/{destinationId}/subscriptions/{id}"
                        .replace(
                                "{" + "destinationId" + "}",
                                localVarApiClient.escapeString(destinationId.toString()))
                        .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSubscriptionFromDestinationValidateBeforeCall(
            String destinationId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'destinationId' is set
        if (destinationId == null) {
            throw new ApiException(
                    "Missing the required parameter 'destinationId' when calling"
                            + " getSubscriptionFromDestination(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling"
                            + " getSubscriptionFromDestination(Async)");
        }

        return getSubscriptionFromDestinationCall(destinationId, id, _callback);
    }

    /**
     * Get Subscription from Destination Gets a Destination subscription by id. • This endpoint is
     * in **Alpha** testing. Please submit any feedback by sending an email to friends@segment.com.
     * • In order to successfully call this endpoint, the specified Workspace needs to have the
     * Destination Subscriptions feature enabled. Please reach out to your customer success manager
     * for more information.
     *
     * @param destinationId (required)
     * @param id (required)
     * @return GetSubscriptionFromDestination200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public GetSubscriptionFromDestination200Response getSubscriptionFromDestination(
            String destinationId, String id) throws ApiException {
        ApiResponse<GetSubscriptionFromDestination200Response> localVarResp =
                getSubscriptionFromDestinationWithHttpInfo(destinationId, id);
        return localVarResp.getData();
    }

    /**
     * Get Subscription from Destination Gets a Destination subscription by id. • This endpoint is
     * in **Alpha** testing. Please submit any feedback by sending an email to friends@segment.com.
     * • In order to successfully call this endpoint, the specified Workspace needs to have the
     * Destination Subscriptions feature enabled. Please reach out to your customer success manager
     * for more information.
     *
     * @param destinationId (required)
     * @param id (required)
     * @return ApiResponse&lt;GetSubscriptionFromDestination200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<GetSubscriptionFromDestination200Response>
            getSubscriptionFromDestinationWithHttpInfo(String destinationId, String id)
                    throws ApiException {
        okhttp3.Call localVarCall =
                getSubscriptionFromDestinationValidateBeforeCall(destinationId, id, null);
        Type localVarReturnType =
                new TypeToken<GetSubscriptionFromDestination200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Subscription from Destination (asynchronously) Gets a Destination subscription by id. •
     * This endpoint is in **Alpha** testing. Please submit any feedback by sending an email to
     * friends@segment.com. • In order to successfully call this endpoint, the specified Workspace
     * needs to have the Destination Subscriptions feature enabled. Please reach out to your
     * customer success manager for more information.
     *
     * @param destinationId (required)
     * @param id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getSubscriptionFromDestinationAsync(
            String destinationId,
            String id,
            final ApiCallback<GetSubscriptionFromDestination200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                getSubscriptionFromDestinationValidateBeforeCall(destinationId, id, _callback);
        Type localVarReturnType =
                new TypeToken<GetSubscriptionFromDestination200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for listDeliveryMetricsSummaryFromDestination
     *
     * @param destinationId (required)
     * @param sourceId The id of the Source linked to the Destination. Config API note: analogous to
     *     &#x60;parent&#x60;. This parameter exists in beta. (required)
     * @param startTime Filter events that happened after this time. Defaults to: - 1 hour ago if
     *     granularity is &#x60;MINUTE&#x60;. - 7 days ago if granularity is &#x60;HOUR&#x60;. - 30
     *     days ago if granularity is &#x60;DAY&#x60;. This parameter exists in beta. (optional)
     * @param endTime Filter events that happened before this time. Defaults to now if not set. This
     *     parameter exists in beta. (optional)
     * @param granularity The granularity to filter metrics to. Either &#x60;MINUTE&#x60;,
     *     &#x60;HOUR&#x60; or &#x60;DAY&#x60;. Defaults to &#x60;MINUTE&#x60; if not set. This
     *     parameter exists in beta. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listDeliveryMetricsSummaryFromDestinationCall(
            String destinationId,
            String sourceId,
            String startTime,
            String endTime,
            String granularity,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/destinations/{destinationId}/delivery-metrics"
                        .replace(
                                "{" + "destinationId" + "}",
                                localVarApiClient.escapeString(destinationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sourceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourceId", sourceId));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (granularity != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("granularity", granularity));
        }

        final String[] localVarAccepts = {
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDeliveryMetricsSummaryFromDestinationValidateBeforeCall(
            String destinationId,
            String sourceId,
            String startTime,
            String endTime,
            String granularity,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'destinationId' is set
        if (destinationId == null) {
            throw new ApiException(
                    "Missing the required parameter 'destinationId' when calling"
                            + " listDeliveryMetricsSummaryFromDestination(Async)");
        }

        // verify the required parameter 'sourceId' is set
        if (sourceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'sourceId' when calling"
                            + " listDeliveryMetricsSummaryFromDestination(Async)");
        }

        return listDeliveryMetricsSummaryFromDestinationCall(
                destinationId, sourceId, startTime, endTime, granularity, _callback);
    }

    /**
     * List Delivery Metrics Summary from Destination Get an event delivery metrics summary from a
     * Destination. Based on the granularity chosen, there are restrictions on the time range you
     * can query: **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in
     * the past **Hour**: - Max Time range: 7 days - Oldest possible start time: 7 days in the past
     * **Day**: - Max time range: 14 days - Oldest possible start time: 14 days in the past
     *
     * @param destinationId (required)
     * @param sourceId The id of the Source linked to the Destination. Config API note: analogous to
     *     &#x60;parent&#x60;. This parameter exists in beta. (required)
     * @param startTime Filter events that happened after this time. Defaults to: - 1 hour ago if
     *     granularity is &#x60;MINUTE&#x60;. - 7 days ago if granularity is &#x60;HOUR&#x60;. - 30
     *     days ago if granularity is &#x60;DAY&#x60;. This parameter exists in beta. (optional)
     * @param endTime Filter events that happened before this time. Defaults to now if not set. This
     *     parameter exists in beta. (optional)
     * @param granularity The granularity to filter metrics to. Either &#x60;MINUTE&#x60;,
     *     &#x60;HOUR&#x60; or &#x60;DAY&#x60;. Defaults to &#x60;MINUTE&#x60; if not set. This
     *     parameter exists in beta. (optional)
     * @return ListDeliveryMetricsSummaryFromDestination200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ListDeliveryMetricsSummaryFromDestination200Response
            listDeliveryMetricsSummaryFromDestination(
                    String destinationId,
                    String sourceId,
                    String startTime,
                    String endTime,
                    String granularity)
                    throws ApiException {
        ApiResponse<ListDeliveryMetricsSummaryFromDestination200Response> localVarResp =
                listDeliveryMetricsSummaryFromDestinationWithHttpInfo(
                        destinationId, sourceId, startTime, endTime, granularity);
        return localVarResp.getData();
    }

    /**
     * List Delivery Metrics Summary from Destination Get an event delivery metrics summary from a
     * Destination. Based on the granularity chosen, there are restrictions on the time range you
     * can query: **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in
     * the past **Hour**: - Max Time range: 7 days - Oldest possible start time: 7 days in the past
     * **Day**: - Max time range: 14 days - Oldest possible start time: 14 days in the past
     *
     * @param destinationId (required)
     * @param sourceId The id of the Source linked to the Destination. Config API note: analogous to
     *     &#x60;parent&#x60;. This parameter exists in beta. (required)
     * @param startTime Filter events that happened after this time. Defaults to: - 1 hour ago if
     *     granularity is &#x60;MINUTE&#x60;. - 7 days ago if granularity is &#x60;HOUR&#x60;. - 30
     *     days ago if granularity is &#x60;DAY&#x60;. This parameter exists in beta. (optional)
     * @param endTime Filter events that happened before this time. Defaults to now if not set. This
     *     parameter exists in beta. (optional)
     * @param granularity The granularity to filter metrics to. Either &#x60;MINUTE&#x60;,
     *     &#x60;HOUR&#x60; or &#x60;DAY&#x60;. Defaults to &#x60;MINUTE&#x60; if not set. This
     *     parameter exists in beta. (optional)
     * @return ApiResponse&lt;ListDeliveryMetricsSummaryFromDestination200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ListDeliveryMetricsSummaryFromDestination200Response>
            listDeliveryMetricsSummaryFromDestinationWithHttpInfo(
                    String destinationId,
                    String sourceId,
                    String startTime,
                    String endTime,
                    String granularity)
                    throws ApiException {
        okhttp3.Call localVarCall =
                listDeliveryMetricsSummaryFromDestinationValidateBeforeCall(
                        destinationId, sourceId, startTime, endTime, granularity, null);
        Type localVarReturnType =
                new TypeToken<ListDeliveryMetricsSummaryFromDestination200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Delivery Metrics Summary from Destination (asynchronously) Get an event delivery metrics
     * summary from a Destination. Based on the granularity chosen, there are restrictions on the
     * time range you can query: **Minute**: - Max time range: 4 hours - Oldest possible start time:
     * 48 hours in the past **Hour**: - Max Time range: 7 days - Oldest possible start time: 7 days
     * in the past **Day**: - Max time range: 14 days - Oldest possible start time: 14 days in the
     * past
     *
     * @param destinationId (required)
     * @param sourceId The id of the Source linked to the Destination. Config API note: analogous to
     *     &#x60;parent&#x60;. This parameter exists in beta. (required)
     * @param startTime Filter events that happened after this time. Defaults to: - 1 hour ago if
     *     granularity is &#x60;MINUTE&#x60;. - 7 days ago if granularity is &#x60;HOUR&#x60;. - 30
     *     days ago if granularity is &#x60;DAY&#x60;. This parameter exists in beta. (optional)
     * @param endTime Filter events that happened before this time. Defaults to now if not set. This
     *     parameter exists in beta. (optional)
     * @param granularity The granularity to filter metrics to. Either &#x60;MINUTE&#x60;,
     *     &#x60;HOUR&#x60; or &#x60;DAY&#x60;. Defaults to &#x60;MINUTE&#x60; if not set. This
     *     parameter exists in beta. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listDeliveryMetricsSummaryFromDestinationAsync(
            String destinationId,
            String sourceId,
            String startTime,
            String endTime,
            String granularity,
            final ApiCallback<ListDeliveryMetricsSummaryFromDestination200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                listDeliveryMetricsSummaryFromDestinationValidateBeforeCall(
                        destinationId, sourceId, startTime, endTime, granularity, _callback);
        Type localVarReturnType =
                new TypeToken<ListDeliveryMetricsSummaryFromDestination200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for listDestinations
     *
     * @param pagination Required pagination params for the request. This parameter exists in v1.
     *     (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listDestinationsCall(
            PaginationInput pagination, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/destinations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pagination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination", pagination));
        }

        final String[] localVarAccepts = {
            "application/vnd.segment.v1+json",
            "application/json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDestinationsValidateBeforeCall(
            PaginationInput pagination, final ApiCallback _callback) throws ApiException {
        return listDestinationsCall(pagination, _callback);
    }

    /**
     * List Destinations Returns a list of Destinations.
     *
     * @param pagination Required pagination params for the request. This parameter exists in v1.
     *     (optional)
     * @return ListDestinations200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ListDestinations200Response listDestinations(PaginationInput pagination)
            throws ApiException {
        ApiResponse<ListDestinations200Response> localVarResp =
                listDestinationsWithHttpInfo(pagination);
        return localVarResp.getData();
    }

    /**
     * List Destinations Returns a list of Destinations.
     *
     * @param pagination Required pagination params for the request. This parameter exists in v1.
     *     (optional)
     * @return ApiResponse&lt;ListDestinations200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ListDestinations200Response> listDestinationsWithHttpInfo(
            PaginationInput pagination) throws ApiException {
        okhttp3.Call localVarCall = listDestinationsValidateBeforeCall(pagination, null);
        Type localVarReturnType = new TypeToken<ListDestinations200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Destinations (asynchronously) Returns a list of Destinations.
     *
     * @param pagination Required pagination params for the request. This parameter exists in v1.
     *     (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listDestinationsAsync(
            PaginationInput pagination, final ApiCallback<ListDestinations200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = listDestinationsValidateBeforeCall(pagination, _callback);
        Type localVarReturnType = new TypeToken<ListDestinations200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for listSubscriptionsFromDestination
     *
     * @param destinationId (required)
     * @param pagination Pagination options. This parameter exists in alpha. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listSubscriptionsFromDestinationCall(
            String destinationId, PaginationInput pagination, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/destinations/{destinationId}/subscriptions"
                        .replace(
                                "{" + "destinationId" + "}",
                                localVarApiClient.escapeString(destinationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pagination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination", pagination));
        }

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSubscriptionsFromDestinationValidateBeforeCall(
            String destinationId, PaginationInput pagination, final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'destinationId' is set
        if (destinationId == null) {
            throw new ApiException(
                    "Missing the required parameter 'destinationId' when calling"
                            + " listSubscriptionsFromDestination(Async)");
        }

        return listSubscriptionsFromDestinationCall(destinationId, pagination, _callback);
    }

    /**
     * List Subscriptions from Destination Lists subscriptions for a Destination. • This endpoint is
     * in **Alpha** testing. Please submit any feedback by sending an email to friends@segment.com.
     * • In order to successfully call this endpoint, the specified Workspace needs to have the
     * Destination Subscriptions feature enabled. Please reach out to your customer success manager
     * for more information.
     *
     * @param destinationId (required)
     * @param pagination Pagination options. This parameter exists in alpha. (optional)
     * @return ListSubscriptionsFromDestination200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ListSubscriptionsFromDestination200Response listSubscriptionsFromDestination(
            String destinationId, PaginationInput pagination) throws ApiException {
        ApiResponse<ListSubscriptionsFromDestination200Response> localVarResp =
                listSubscriptionsFromDestinationWithHttpInfo(destinationId, pagination);
        return localVarResp.getData();
    }

    /**
     * List Subscriptions from Destination Lists subscriptions for a Destination. • This endpoint is
     * in **Alpha** testing. Please submit any feedback by sending an email to friends@segment.com.
     * • In order to successfully call this endpoint, the specified Workspace needs to have the
     * Destination Subscriptions feature enabled. Please reach out to your customer success manager
     * for more information.
     *
     * @param destinationId (required)
     * @param pagination Pagination options. This parameter exists in alpha. (optional)
     * @return ApiResponse&lt;ListSubscriptionsFromDestination200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ListSubscriptionsFromDestination200Response>
            listSubscriptionsFromDestinationWithHttpInfo(
                    String destinationId, PaginationInput pagination) throws ApiException {
        okhttp3.Call localVarCall =
                listSubscriptionsFromDestinationValidateBeforeCall(destinationId, pagination, null);
        Type localVarReturnType =
                new TypeToken<ListSubscriptionsFromDestination200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Subscriptions from Destination (asynchronously) Lists subscriptions for a Destination. •
     * This endpoint is in **Alpha** testing. Please submit any feedback by sending an email to
     * friends@segment.com. • In order to successfully call this endpoint, the specified Workspace
     * needs to have the Destination Subscriptions feature enabled. Please reach out to your
     * customer success manager for more information.
     *
     * @param destinationId (required)
     * @param pagination Pagination options. This parameter exists in alpha. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listSubscriptionsFromDestinationAsync(
            String destinationId,
            PaginationInput pagination,
            final ApiCallback<ListSubscriptionsFromDestination200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                listSubscriptionsFromDestinationValidateBeforeCall(
                        destinationId, pagination, _callback);
        Type localVarReturnType =
                new TypeToken<ListSubscriptionsFromDestination200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for removeSubscriptionFromDestination
     *
     * @param destinationId (required)
     * @param id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call removeSubscriptionFromDestinationCall(
            String destinationId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/destinations/{destinationId}/subscriptions/{id}"
                        .replace(
                                "{" + "destinationId" + "}",
                                localVarApiClient.escapeString(destinationId.toString()))
                        .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "DELETE",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeSubscriptionFromDestinationValidateBeforeCall(
            String destinationId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'destinationId' is set
        if (destinationId == null) {
            throw new ApiException(
                    "Missing the required parameter 'destinationId' when calling"
                            + " removeSubscriptionFromDestination(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling"
                            + " removeSubscriptionFromDestination(Async)");
        }

        return removeSubscriptionFromDestinationCall(destinationId, id, _callback);
    }

    /**
     * Remove Subscription from Destination Deletes an existing Destination subscription. • This
     * endpoint is in **Alpha** testing. Please submit any feedback by sending an email to
     * friends@segment.com. • In order to successfully call this endpoint, the specified Workspace
     * needs to have the Destination Subscriptions feature enabled. Please reach out to your
     * customer success manager for more information. The rate limit for this endpoint is 250
     * requests per minute, which is lower than the default due to access pattern restrictions. Once
     * reached, this endpoint will respond with the 429 HTTP status code with headers indicating the
     * limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param destinationId (required)
     * @param id (required)
     * @return RemoveSubscriptionFromDestination200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public RemoveSubscriptionFromDestination200Response removeSubscriptionFromDestination(
            String destinationId, String id) throws ApiException {
        ApiResponse<RemoveSubscriptionFromDestination200Response> localVarResp =
                removeSubscriptionFromDestinationWithHttpInfo(destinationId, id);
        return localVarResp.getData();
    }

    /**
     * Remove Subscription from Destination Deletes an existing Destination subscription. • This
     * endpoint is in **Alpha** testing. Please submit any feedback by sending an email to
     * friends@segment.com. • In order to successfully call this endpoint, the specified Workspace
     * needs to have the Destination Subscriptions feature enabled. Please reach out to your
     * customer success manager for more information. The rate limit for this endpoint is 250
     * requests per minute, which is lower than the default due to access pattern restrictions. Once
     * reached, this endpoint will respond with the 429 HTTP status code with headers indicating the
     * limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param destinationId (required)
     * @param id (required)
     * @return ApiResponse&lt;RemoveSubscriptionFromDestination200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RemoveSubscriptionFromDestination200Response>
            removeSubscriptionFromDestinationWithHttpInfo(String destinationId, String id)
                    throws ApiException {
        okhttp3.Call localVarCall =
                removeSubscriptionFromDestinationValidateBeforeCall(destinationId, id, null);
        Type localVarReturnType =
                new TypeToken<RemoveSubscriptionFromDestination200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove Subscription from Destination (asynchronously) Deletes an existing Destination
     * subscription. • This endpoint is in **Alpha** testing. Please submit any feedback by sending
     * an email to friends@segment.com. • In order to successfully call this endpoint, the specified
     * Workspace needs to have the Destination Subscriptions feature enabled. Please reach out to
     * your customer success manager for more information. The rate limit for this endpoint is 250
     * requests per minute, which is lower than the default due to access pattern restrictions. Once
     * reached, this endpoint will respond with the 429 HTTP status code with headers indicating the
     * limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param destinationId (required)
     * @param id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call removeSubscriptionFromDestinationAsync(
            String destinationId,
            String id,
            final ApiCallback<RemoveSubscriptionFromDestination200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                removeSubscriptionFromDestinationValidateBeforeCall(destinationId, id, _callback);
        Type localVarReturnType =
                new TypeToken<RemoveSubscriptionFromDestination200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for updateDestination
     *
     * @param destinationId (required)
     * @param updateDestinationV1Input (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateDestinationCall(
            String destinationId,
            UpdateDestinationV1Input updateDestinationV1Input,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDestinationV1Input;

        // create path and map variables
        String localVarPath =
                "/destinations/{destinationId}"
                        .replace(
                                "{" + "destinationId" + "}",
                                localVarApiClient.escapeString(destinationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1+json",
            "application/json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/vnd.segment.v1+json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "PATCH",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDestinationValidateBeforeCall(
            String destinationId,
            UpdateDestinationV1Input updateDestinationV1Input,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'destinationId' is set
        if (destinationId == null) {
            throw new ApiException(
                    "Missing the required parameter 'destinationId' when calling"
                            + " updateDestination(Async)");
        }

        // verify the required parameter 'updateDestinationV1Input' is set
        if (updateDestinationV1Input == null) {
            throw new ApiException(
                    "Missing the required parameter 'updateDestinationV1Input' when calling"
                            + " updateDestination(Async)");
        }

        return updateDestinationCall(destinationId, updateDestinationV1Input, _callback);
    }

    /**
     * Update Destination Updates an existing Destination. **Note**: if you attempt to update
     * read-only settings for your destination you&#39;ll encounter the following behavior: * If
     * only read-only properties are being updated, the endpoint will return an HTTP 400 error. * If
     * there&#39;s a mix of writable and read-only properties in the payload, the request will be
     * accepted, the writable properties will be updated and the read-only properties ignored. •
     * When called, this endpoint may generate the &#x60;Integration Disabled&#x60; event in the
     * [audit trail](/tag/Audit-Trail). Config API omitted fields: - &#x60;updateMask&#x60;
     *
     * @param destinationId (required)
     * @param updateDestinationV1Input (required)
     * @return UpdateDestination200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public UpdateDestination200Response updateDestination(
            String destinationId, UpdateDestinationV1Input updateDestinationV1Input)
            throws ApiException {
        ApiResponse<UpdateDestination200Response> localVarResp =
                updateDestinationWithHttpInfo(destinationId, updateDestinationV1Input);
        return localVarResp.getData();
    }

    /**
     * Update Destination Updates an existing Destination. **Note**: if you attempt to update
     * read-only settings for your destination you&#39;ll encounter the following behavior: * If
     * only read-only properties are being updated, the endpoint will return an HTTP 400 error. * If
     * there&#39;s a mix of writable and read-only properties in the payload, the request will be
     * accepted, the writable properties will be updated and the read-only properties ignored. •
     * When called, this endpoint may generate the &#x60;Integration Disabled&#x60; event in the
     * [audit trail](/tag/Audit-Trail). Config API omitted fields: - &#x60;updateMask&#x60;
     *
     * @param destinationId (required)
     * @param updateDestinationV1Input (required)
     * @return ApiResponse&lt;UpdateDestination200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<UpdateDestination200Response> updateDestinationWithHttpInfo(
            String destinationId, UpdateDestinationV1Input updateDestinationV1Input)
            throws ApiException {
        okhttp3.Call localVarCall =
                updateDestinationValidateBeforeCall(destinationId, updateDestinationV1Input, null);
        Type localVarReturnType = new TypeToken<UpdateDestination200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Destination (asynchronously) Updates an existing Destination. **Note**: if you attempt
     * to update read-only settings for your destination you&#39;ll encounter the following
     * behavior: * If only read-only properties are being updated, the endpoint will return an HTTP
     * 400 error. * If there&#39;s a mix of writable and read-only properties in the payload, the
     * request will be accepted, the writable properties will be updated and the read-only
     * properties ignored. • When called, this endpoint may generate the &#x60;Integration
     * Disabled&#x60; event in the [audit trail](/tag/Audit-Trail). Config API omitted fields: -
     * &#x60;updateMask&#x60;
     *
     * @param destinationId (required)
     * @param updateDestinationV1Input (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateDestinationAsync(
            String destinationId,
            UpdateDestinationV1Input updateDestinationV1Input,
            final ApiCallback<UpdateDestination200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                updateDestinationValidateBeforeCall(
                        destinationId, updateDestinationV1Input, _callback);
        Type localVarReturnType = new TypeToken<UpdateDestination200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for updateSubscriptionForDestination
     *
     * @param destinationId (required)
     * @param id (required)
     * @param updateSubscriptionForDestinationAlphaInput (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateSubscriptionForDestinationCall(
            String destinationId,
            String id,
            UpdateSubscriptionForDestinationAlphaInput updateSubscriptionForDestinationAlphaInput,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateSubscriptionForDestinationAlphaInput;

        // create path and map variables
        String localVarPath =
                "/destinations/{destinationId}/subscriptions/{id}"
                        .replace(
                                "{" + "destinationId" + "}",
                                localVarApiClient.escapeString(destinationId.toString()))
                        .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/vnd.segment.v1alpha+json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "PATCH",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSubscriptionForDestinationValidateBeforeCall(
            String destinationId,
            String id,
            UpdateSubscriptionForDestinationAlphaInput updateSubscriptionForDestinationAlphaInput,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'destinationId' is set
        if (destinationId == null) {
            throw new ApiException(
                    "Missing the required parameter 'destinationId' when calling"
                            + " updateSubscriptionForDestination(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling"
                            + " updateSubscriptionForDestination(Async)");
        }

        // verify the required parameter 'updateSubscriptionForDestinationAlphaInput' is set
        if (updateSubscriptionForDestinationAlphaInput == null) {
            throw new ApiException(
                    "Missing the required parameter 'updateSubscriptionForDestinationAlphaInput'"
                            + " when calling updateSubscriptionForDestination(Async)");
        }

        return updateSubscriptionForDestinationCall(
                destinationId, id, updateSubscriptionForDestinationAlphaInput, _callback);
    }

    /**
     * Update Subscription for Destination Updates an existing Destination subscription. • This
     * endpoint is in **Alpha** testing. Please submit any feedback by sending an email to
     * friends@segment.com. • In order to successfully call this endpoint, the specified Workspace
     * needs to have the Destination Subscriptions feature enabled. Please reach out to your
     * customer success manager for more information. The rate limit for this endpoint is 250
     * requests per minute, which is lower than the default due to access pattern restrictions. Once
     * reached, this endpoint will respond with the 429 HTTP status code with headers indicating the
     * limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param destinationId (required)
     * @param id (required)
     * @param updateSubscriptionForDestinationAlphaInput (required)
     * @return UpdateSubscriptionForDestination200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public UpdateSubscriptionForDestination200Response updateSubscriptionForDestination(
            String destinationId,
            String id,
            UpdateSubscriptionForDestinationAlphaInput updateSubscriptionForDestinationAlphaInput)
            throws ApiException {
        ApiResponse<UpdateSubscriptionForDestination200Response> localVarResp =
                updateSubscriptionForDestinationWithHttpInfo(
                        destinationId, id, updateSubscriptionForDestinationAlphaInput);
        return localVarResp.getData();
    }

    /**
     * Update Subscription for Destination Updates an existing Destination subscription. • This
     * endpoint is in **Alpha** testing. Please submit any feedback by sending an email to
     * friends@segment.com. • In order to successfully call this endpoint, the specified Workspace
     * needs to have the Destination Subscriptions feature enabled. Please reach out to your
     * customer success manager for more information. The rate limit for this endpoint is 250
     * requests per minute, which is lower than the default due to access pattern restrictions. Once
     * reached, this endpoint will respond with the 429 HTTP status code with headers indicating the
     * limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param destinationId (required)
     * @param id (required)
     * @param updateSubscriptionForDestinationAlphaInput (required)
     * @return ApiResponse&lt;UpdateSubscriptionForDestination200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<UpdateSubscriptionForDestination200Response>
            updateSubscriptionForDestinationWithHttpInfo(
                    String destinationId,
                    String id,
                    UpdateSubscriptionForDestinationAlphaInput
                            updateSubscriptionForDestinationAlphaInput)
                    throws ApiException {
        okhttp3.Call localVarCall =
                updateSubscriptionForDestinationValidateBeforeCall(
                        destinationId, id, updateSubscriptionForDestinationAlphaInput, null);
        Type localVarReturnType =
                new TypeToken<UpdateSubscriptionForDestination200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Subscription for Destination (asynchronously) Updates an existing Destination
     * subscription. • This endpoint is in **Alpha** testing. Please submit any feedback by sending
     * an email to friends@segment.com. • In order to successfully call this endpoint, the specified
     * Workspace needs to have the Destination Subscriptions feature enabled. Please reach out to
     * your customer success manager for more information. The rate limit for this endpoint is 250
     * requests per minute, which is lower than the default due to access pattern restrictions. Once
     * reached, this endpoint will respond with the 429 HTTP status code with headers indicating the
     * limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param destinationId (required)
     * @param id (required)
     * @param updateSubscriptionForDestinationAlphaInput (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateSubscriptionForDestinationAsync(
            String destinationId,
            String id,
            UpdateSubscriptionForDestinationAlphaInput updateSubscriptionForDestinationAlphaInput,
            final ApiCallback<UpdateSubscriptionForDestination200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                updateSubscriptionForDestinationValidateBeforeCall(
                        destinationId, id, updateSubscriptionForDestinationAlphaInput, _callback);
        Type localVarReturnType =
                new TypeToken<UpdateSubscriptionForDestination200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
