/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * The version of the OpenAPI document: 32.0.4
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.api;


import com.google.gson.reflect.TypeToken;
import com.segment.publicapi.ApiCallback;
import com.segment.publicapi.ApiClient;
import com.segment.publicapi.ApiException;
import com.segment.publicapi.ApiResponse;
import com.segment.publicapi.Configuration;
import com.segment.publicapi.Pair;
import com.segment.publicapi.models.AddSourceToTrackingPlan200Response;
import com.segment.publicapi.models.AddSourceToTrackingPlanV1Input;
import com.segment.publicapi.models.CreateTrackingPlan200Response;
import com.segment.publicapi.models.CreateTrackingPlanV1Input;
import com.segment.publicapi.models.DeleteTrackingPlan200Response;
import com.segment.publicapi.models.GetTrackingPlan200Response;
import com.segment.publicapi.models.ListRulesFromTrackingPlan200Response;
import com.segment.publicapi.models.ListSourcesFromTrackingPlan200Response;
import com.segment.publicapi.models.ListTrackingPlans200Response;
import com.segment.publicapi.models.PaginationInput;
import com.segment.publicapi.models.RemoveRuleV1;
import com.segment.publicapi.models.RemoveRulesFromTrackingPlan200Response;
import com.segment.publicapi.models.RemoveSourceFromTrackingPlan200Response;
import com.segment.publicapi.models.ReplaceRulesInTrackingPlan200Response;
import com.segment.publicapi.models.ReplaceRulesInTrackingPlanV1Input;
import com.segment.publicapi.models.UpdateRulesInTrackingPlan200Response;
import com.segment.publicapi.models.UpdateRulesInTrackingPlanV1Input;
import com.segment.publicapi.models.UpdateTrackingPlan200Response;
import com.segment.publicapi.models.UpdateTrackingPlanV1Input;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TrackingPlansApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TrackingPlansApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TrackingPlansApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addSourceToTrackingPlan
     *
     * @param trackingPlanId (required)
     * @param addSourceToTrackingPlanV1Input (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call addSourceToTrackingPlanCall(
            String trackingPlanId,
            AddSourceToTrackingPlanV1Input addSourceToTrackingPlanV1Input,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addSourceToTrackingPlanV1Input;

        // create path and map variables
        String localVarPath =
                "/tracking-plans/{trackingPlanId}/sources"
                        .replaceAll(
                                "\\{" + "trackingPlanId" + "\\}",
                                localVarApiClient.escapeString(trackingPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.segment.v1alpha+json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1+json"
        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addSourceToTrackingPlanValidateBeforeCall(
            String trackingPlanId,
            AddSourceToTrackingPlanV1Input addSourceToTrackingPlanV1Input,
            final ApiCallback _callback)
            throws ApiException {

        // verify the required parameter 'trackingPlanId' is set
        if (trackingPlanId == null) {
            throw new ApiException(
                    "Missing the required parameter 'trackingPlanId' when calling"
                            + " addSourceToTrackingPlan(Async)");
        }

        // verify the required parameter 'addSourceToTrackingPlanV1Input' is set
        if (addSourceToTrackingPlanV1Input == null) {
            throw new ApiException(
                    "Missing the required parameter 'addSourceToTrackingPlanV1Input' when calling"
                            + " addSourceToTrackingPlan(Async)");
        }

        okhttp3.Call localVarCall =
                addSourceToTrackingPlanCall(
                        trackingPlanId, addSourceToTrackingPlanV1Input, _callback);
        return localVarCall;
    }

    /**
     * Add Source to Tracking Plan Connects a Source to a Tracking Plan. When called, this endpoint
     * may generate the &#x60;Source Modified&#x60; [Audit Trail](/tag/Audit-Trail) event. **Note**:
     * In order to successfully call this endpoint, the specified Workspace needs to have the
     * Protocols feature enabled. Please reach out to your customer success manager for more
     * information.
     *
     * @param trackingPlanId (required)
     * @param addSourceToTrackingPlanV1Input (required)
     * @return AddSourceToTrackingPlan200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public AddSourceToTrackingPlan200Response addSourceToTrackingPlan(
            String trackingPlanId, AddSourceToTrackingPlanV1Input addSourceToTrackingPlanV1Input)
            throws ApiException {
        ApiResponse<AddSourceToTrackingPlan200Response> localVarResp =
                addSourceToTrackingPlanWithHttpInfo(trackingPlanId, addSourceToTrackingPlanV1Input);
        return localVarResp.getData();
    }

    /**
     * Add Source to Tracking Plan Connects a Source to a Tracking Plan. When called, this endpoint
     * may generate the &#x60;Source Modified&#x60; [Audit Trail](/tag/Audit-Trail) event. **Note**:
     * In order to successfully call this endpoint, the specified Workspace needs to have the
     * Protocols feature enabled. Please reach out to your customer success manager for more
     * information.
     *
     * @param trackingPlanId (required)
     * @param addSourceToTrackingPlanV1Input (required)
     * @return ApiResponse&lt;AddSourceToTrackingPlan200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<AddSourceToTrackingPlan200Response> addSourceToTrackingPlanWithHttpInfo(
            String trackingPlanId, AddSourceToTrackingPlanV1Input addSourceToTrackingPlanV1Input)
            throws ApiException {
        okhttp3.Call localVarCall =
                addSourceToTrackingPlanValidateBeforeCall(
                        trackingPlanId, addSourceToTrackingPlanV1Input, null);
        Type localVarReturnType = new TypeToken<AddSourceToTrackingPlan200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Source to Tracking Plan (asynchronously) Connects a Source to a Tracking Plan. When
     * called, this endpoint may generate the &#x60;Source Modified&#x60; [Audit
     * Trail](/tag/Audit-Trail) event. **Note**: In order to successfully call this endpoint, the
     * specified Workspace needs to have the Protocols feature enabled. Please reach out to your
     * customer success manager for more information.
     *
     * @param trackingPlanId (required)
     * @param addSourceToTrackingPlanV1Input (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call addSourceToTrackingPlanAsync(
            String trackingPlanId,
            AddSourceToTrackingPlanV1Input addSourceToTrackingPlanV1Input,
            final ApiCallback<AddSourceToTrackingPlan200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                addSourceToTrackingPlanValidateBeforeCall(
                        trackingPlanId, addSourceToTrackingPlanV1Input, _callback);
        Type localVarReturnType = new TypeToken<AddSourceToTrackingPlan200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTrackingPlan
     *
     * @param createTrackingPlanV1Input (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createTrackingPlanCall(
            CreateTrackingPlanV1Input createTrackingPlanV1Input, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTrackingPlanV1Input;

        // create path and map variables
        String localVarPath = "/tracking-plans";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.segment.v1alpha+json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1+json"
        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTrackingPlanValidateBeforeCall(
            CreateTrackingPlanV1Input createTrackingPlanV1Input, final ApiCallback _callback)
            throws ApiException {

        // verify the required parameter 'createTrackingPlanV1Input' is set
        if (createTrackingPlanV1Input == null) {
            throw new ApiException(
                    "Missing the required parameter 'createTrackingPlanV1Input' when calling"
                            + " createTrackingPlan(Async)");
        }

        okhttp3.Call localVarCall = createTrackingPlanCall(createTrackingPlanV1Input, _callback);
        return localVarCall;
    }

    /**
     * Create Tracking Plan Creates a Tracking Plan. **Note**: In order to successfully call this
     * endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach
     * out to your customer success manager for more information.
     *
     * @param createTrackingPlanV1Input (required)
     * @return CreateTrackingPlan200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public CreateTrackingPlan200Response createTrackingPlan(
            CreateTrackingPlanV1Input createTrackingPlanV1Input) throws ApiException {
        ApiResponse<CreateTrackingPlan200Response> localVarResp =
                createTrackingPlanWithHttpInfo(createTrackingPlanV1Input);
        return localVarResp.getData();
    }

    /**
     * Create Tracking Plan Creates a Tracking Plan. **Note**: In order to successfully call this
     * endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach
     * out to your customer success manager for more information.
     *
     * @param createTrackingPlanV1Input (required)
     * @return ApiResponse&lt;CreateTrackingPlan200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CreateTrackingPlan200Response> createTrackingPlanWithHttpInfo(
            CreateTrackingPlanV1Input createTrackingPlanV1Input) throws ApiException {
        okhttp3.Call localVarCall =
                createTrackingPlanValidateBeforeCall(createTrackingPlanV1Input, null);
        Type localVarReturnType = new TypeToken<CreateTrackingPlan200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Tracking Plan (asynchronously) Creates a Tracking Plan. **Note**: In order to
     * successfully call this endpoint, the specified Workspace needs to have the Protocols feature
     * enabled. Please reach out to your customer success manager for more information.
     *
     * @param createTrackingPlanV1Input (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createTrackingPlanAsync(
            CreateTrackingPlanV1Input createTrackingPlanV1Input,
            final ApiCallback<CreateTrackingPlan200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                createTrackingPlanValidateBeforeCall(createTrackingPlanV1Input, _callback);
        Type localVarReturnType = new TypeToken<CreateTrackingPlan200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTrackingPlan
     *
     * @param trackingPlanId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteTrackingPlanCall(String trackingPlanId, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/tracking-plans/{trackingPlanId}"
                        .replaceAll(
                                "\\{" + "trackingPlanId" + "\\}",
                                localVarApiClient.escapeString(trackingPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};

        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "DELETE",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTrackingPlanValidateBeforeCall(
            String trackingPlanId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'trackingPlanId' is set
        if (trackingPlanId == null) {
            throw new ApiException(
                    "Missing the required parameter 'trackingPlanId' when calling"
                            + " deleteTrackingPlan(Async)");
        }

        okhttp3.Call localVarCall = deleteTrackingPlanCall(trackingPlanId, _callback);
        return localVarCall;
    }

    /**
     * Delete Tracking Plan Deletes a Tracking Plan. **Note**: In order to successfully call this
     * endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach
     * out to your customer success manager for more information.
     *
     * @param trackingPlanId (required)
     * @return DeleteTrackingPlan200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public DeleteTrackingPlan200Response deleteTrackingPlan(String trackingPlanId)
            throws ApiException {
        ApiResponse<DeleteTrackingPlan200Response> localVarResp =
                deleteTrackingPlanWithHttpInfo(trackingPlanId);
        return localVarResp.getData();
    }

    /**
     * Delete Tracking Plan Deletes a Tracking Plan. **Note**: In order to successfully call this
     * endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach
     * out to your customer success manager for more information.
     *
     * @param trackingPlanId (required)
     * @return ApiResponse&lt;DeleteTrackingPlan200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<DeleteTrackingPlan200Response> deleteTrackingPlanWithHttpInfo(
            String trackingPlanId) throws ApiException {
        okhttp3.Call localVarCall = deleteTrackingPlanValidateBeforeCall(trackingPlanId, null);
        Type localVarReturnType = new TypeToken<DeleteTrackingPlan200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Tracking Plan (asynchronously) Deletes a Tracking Plan. **Note**: In order to
     * successfully call this endpoint, the specified Workspace needs to have the Protocols feature
     * enabled. Please reach out to your customer success manager for more information.
     *
     * @param trackingPlanId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteTrackingPlanAsync(
            String trackingPlanId, final ApiCallback<DeleteTrackingPlan200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = deleteTrackingPlanValidateBeforeCall(trackingPlanId, _callback);
        Type localVarReturnType = new TypeToken<DeleteTrackingPlan200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTrackingPlan
     *
     * @param trackingPlanId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getTrackingPlanCall(String trackingPlanId, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/tracking-plans/{trackingPlanId}"
                        .replaceAll(
                                "\\{" + "trackingPlanId" + "\\}",
                                localVarApiClient.escapeString(trackingPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};

        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrackingPlanValidateBeforeCall(
            String trackingPlanId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'trackingPlanId' is set
        if (trackingPlanId == null) {
            throw new ApiException(
                    "Missing the required parameter 'trackingPlanId' when calling"
                            + " getTrackingPlan(Async)");
        }

        okhttp3.Call localVarCall = getTrackingPlanCall(trackingPlanId, _callback);
        return localVarCall;
    }

    /**
     * Get Tracking Plan Returns a Tracking Plan. **Note**: In order to successfully call this
     * endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach
     * out to your customer success manager for more information.
     *
     * @param trackingPlanId (required)
     * @return GetTrackingPlan200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public GetTrackingPlan200Response getTrackingPlan(String trackingPlanId) throws ApiException {
        ApiResponse<GetTrackingPlan200Response> localVarResp =
                getTrackingPlanWithHttpInfo(trackingPlanId);
        return localVarResp.getData();
    }

    /**
     * Get Tracking Plan Returns a Tracking Plan. **Note**: In order to successfully call this
     * endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach
     * out to your customer success manager for more information.
     *
     * @param trackingPlanId (required)
     * @return ApiResponse&lt;GetTrackingPlan200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<GetTrackingPlan200Response> getTrackingPlanWithHttpInfo(
            String trackingPlanId) throws ApiException {
        okhttp3.Call localVarCall = getTrackingPlanValidateBeforeCall(trackingPlanId, null);
        Type localVarReturnType = new TypeToken<GetTrackingPlan200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Tracking Plan (asynchronously) Returns a Tracking Plan. **Note**: In order to
     * successfully call this endpoint, the specified Workspace needs to have the Protocols feature
     * enabled. Please reach out to your customer success manager for more information.
     *
     * @param trackingPlanId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getTrackingPlanAsync(
            String trackingPlanId, final ApiCallback<GetTrackingPlan200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = getTrackingPlanValidateBeforeCall(trackingPlanId, _callback);
        Type localVarReturnType = new TypeToken<GetTrackingPlan200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listRulesFromTrackingPlan
     *
     * @param trackingPlanId (required)
     * @param pagination Pagination options. This parameter exists in alpha. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listRulesFromTrackingPlanCall(
            String trackingPlanId, PaginationInput pagination, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/tracking-plans/{trackingPlanId}/rules"
                        .replaceAll(
                                "\\{" + "trackingPlanId" + "\\}",
                                localVarApiClient.escapeString(trackingPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pagination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination", pagination));
        }

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};

        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRulesFromTrackingPlanValidateBeforeCall(
            String trackingPlanId, PaginationInput pagination, final ApiCallback _callback)
            throws ApiException {

        // verify the required parameter 'trackingPlanId' is set
        if (trackingPlanId == null) {
            throw new ApiException(
                    "Missing the required parameter 'trackingPlanId' when calling"
                            + " listRulesFromTrackingPlan(Async)");
        }

        // verify the required parameter 'pagination' is set
        if (pagination == null) {
            throw new ApiException(
                    "Missing the required parameter 'pagination' when calling"
                            + " listRulesFromTrackingPlan(Async)");
        }

        okhttp3.Call localVarCall =
                listRulesFromTrackingPlanCall(trackingPlanId, pagination, _callback);
        return localVarCall;
    }

    /**
     * List Rules from Tracking Plan Lists Tracking Plan rules. **Note**: In order to successfully
     * call this endpoint, the specified Workspace needs to have the Protocols feature enabled.
     * Please reach out to your customer success manager for more information. The rate limit for
     * this endpoint is 20 requests per minute, which is lower than the default due to access
     * pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code
     * with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more
     * information.
     *
     * @param trackingPlanId (required)
     * @param pagination Pagination options. This parameter exists in alpha. (required)
     * @return ListRulesFromTrackingPlan200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ListRulesFromTrackingPlan200Response listRulesFromTrackingPlan(
            String trackingPlanId, PaginationInput pagination) throws ApiException {
        ApiResponse<ListRulesFromTrackingPlan200Response> localVarResp =
                listRulesFromTrackingPlanWithHttpInfo(trackingPlanId, pagination);
        return localVarResp.getData();
    }

    /**
     * List Rules from Tracking Plan Lists Tracking Plan rules. **Note**: In order to successfully
     * call this endpoint, the specified Workspace needs to have the Protocols feature enabled.
     * Please reach out to your customer success manager for more information. The rate limit for
     * this endpoint is 20 requests per minute, which is lower than the default due to access
     * pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code
     * with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more
     * information.
     *
     * @param trackingPlanId (required)
     * @param pagination Pagination options. This parameter exists in alpha. (required)
     * @return ApiResponse&lt;ListRulesFromTrackingPlan200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ListRulesFromTrackingPlan200Response> listRulesFromTrackingPlanWithHttpInfo(
            String trackingPlanId, PaginationInput pagination) throws ApiException {
        okhttp3.Call localVarCall =
                listRulesFromTrackingPlanValidateBeforeCall(trackingPlanId, pagination, null);
        Type localVarReturnType =
                new TypeToken<ListRulesFromTrackingPlan200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Rules from Tracking Plan (asynchronously) Lists Tracking Plan rules. **Note**: In order
     * to successfully call this endpoint, the specified Workspace needs to have the Protocols
     * feature enabled. Please reach out to your customer success manager for more information. The
     * rate limit for this endpoint is 20 requests per minute, which is lower than the default due
     * to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP
     * status code with headers indicating the limit parameters. See [Rate
     * Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param trackingPlanId (required)
     * @param pagination Pagination options. This parameter exists in alpha. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listRulesFromTrackingPlanAsync(
            String trackingPlanId,
            PaginationInput pagination,
            final ApiCallback<ListRulesFromTrackingPlan200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                listRulesFromTrackingPlanValidateBeforeCall(trackingPlanId, pagination, _callback);
        Type localVarReturnType =
                new TypeToken<ListRulesFromTrackingPlan200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSourcesFromTrackingPlan
     *
     * @param trackingPlanId (required)
     * @param pagination Pagination options. This parameter exists in alpha. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listSourcesFromTrackingPlanCall(
            String trackingPlanId, PaginationInput pagination, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/tracking-plans/{trackingPlanId}/sources"
                        .replaceAll(
                                "\\{" + "trackingPlanId" + "\\}",
                                localVarApiClient.escapeString(trackingPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pagination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination", pagination));
        }

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};

        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSourcesFromTrackingPlanValidateBeforeCall(
            String trackingPlanId, PaginationInput pagination, final ApiCallback _callback)
            throws ApiException {

        // verify the required parameter 'trackingPlanId' is set
        if (trackingPlanId == null) {
            throw new ApiException(
                    "Missing the required parameter 'trackingPlanId' when calling"
                            + " listSourcesFromTrackingPlan(Async)");
        }

        // verify the required parameter 'pagination' is set
        if (pagination == null) {
            throw new ApiException(
                    "Missing the required parameter 'pagination' when calling"
                            + " listSourcesFromTrackingPlan(Async)");
        }

        okhttp3.Call localVarCall =
                listSourcesFromTrackingPlanCall(trackingPlanId, pagination, _callback);
        return localVarCall;
    }

    /**
     * List Sources from Tracking Plan Lists Sources connected to a Tracking Plan. **Note**: In
     * order to successfully call this endpoint, the specified Workspace needs to have the Protocols
     * feature enabled. Please reach out to your customer success manager for more information. This
     * endpoint requires the user to have at least the following permission(s): * Source Read-only *
     * Tracking Plan Read-only
     *
     * @param trackingPlanId (required)
     * @param pagination Pagination options. This parameter exists in alpha. (required)
     * @return ListSourcesFromTrackingPlan200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ListSourcesFromTrackingPlan200Response listSourcesFromTrackingPlan(
            String trackingPlanId, PaginationInput pagination) throws ApiException {
        ApiResponse<ListSourcesFromTrackingPlan200Response> localVarResp =
                listSourcesFromTrackingPlanWithHttpInfo(trackingPlanId, pagination);
        return localVarResp.getData();
    }

    /**
     * List Sources from Tracking Plan Lists Sources connected to a Tracking Plan. **Note**: In
     * order to successfully call this endpoint, the specified Workspace needs to have the Protocols
     * feature enabled. Please reach out to your customer success manager for more information. This
     * endpoint requires the user to have at least the following permission(s): * Source Read-only *
     * Tracking Plan Read-only
     *
     * @param trackingPlanId (required)
     * @param pagination Pagination options. This parameter exists in alpha. (required)
     * @return ApiResponse&lt;ListSourcesFromTrackingPlan200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ListSourcesFromTrackingPlan200Response>
            listSourcesFromTrackingPlanWithHttpInfo(
                    String trackingPlanId, PaginationInput pagination) throws ApiException {
        okhttp3.Call localVarCall =
                listSourcesFromTrackingPlanValidateBeforeCall(trackingPlanId, pagination, null);
        Type localVarReturnType =
                new TypeToken<ListSourcesFromTrackingPlan200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Sources from Tracking Plan (asynchronously) Lists Sources connected to a Tracking Plan.
     * **Note**: In order to successfully call this endpoint, the specified Workspace needs to have
     * the Protocols feature enabled. Please reach out to your customer success manager for more
     * information. This endpoint requires the user to have at least the following permission(s): *
     * Source Read-only * Tracking Plan Read-only
     *
     * @param trackingPlanId (required)
     * @param pagination Pagination options. This parameter exists in alpha. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listSourcesFromTrackingPlanAsync(
            String trackingPlanId,
            PaginationInput pagination,
            final ApiCallback<ListSourcesFromTrackingPlan200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                listSourcesFromTrackingPlanValidateBeforeCall(
                        trackingPlanId, pagination, _callback);
        Type localVarReturnType =
                new TypeToken<ListSourcesFromTrackingPlan200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTrackingPlans
     *
     * @param pagination Pagination options. This parameter exists in alpha. (required)
     * @param type Requests Tracking Plans of a certain type. If omitted, lists all types. This
     *     parameter exists in alpha. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listTrackingPlansCall(
            PaginationInput pagination, String type, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tracking-plans";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (pagination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination", pagination));
        }

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};

        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTrackingPlansValidateBeforeCall(
            PaginationInput pagination, String type, final ApiCallback _callback)
            throws ApiException {

        // verify the required parameter 'pagination' is set
        if (pagination == null) {
            throw new ApiException(
                    "Missing the required parameter 'pagination' when calling"
                            + " listTrackingPlans(Async)");
        }

        okhttp3.Call localVarCall = listTrackingPlansCall(pagination, type, _callback);
        return localVarCall;
    }

    /**
     * List Tracking Plans Returns a list of Tracking Plans. **Note**: In order to successfully call
     * this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please
     * reach out to your customer success manager for more information.
     *
     * @param pagination Pagination options. This parameter exists in alpha. (required)
     * @param type Requests Tracking Plans of a certain type. If omitted, lists all types. This
     *     parameter exists in alpha. (optional)
     * @return ListTrackingPlans200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ListTrackingPlans200Response listTrackingPlans(PaginationInput pagination, String type)
            throws ApiException {
        ApiResponse<ListTrackingPlans200Response> localVarResp =
                listTrackingPlansWithHttpInfo(pagination, type);
        return localVarResp.getData();
    }

    /**
     * List Tracking Plans Returns a list of Tracking Plans. **Note**: In order to successfully call
     * this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please
     * reach out to your customer success manager for more information.
     *
     * @param pagination Pagination options. This parameter exists in alpha. (required)
     * @param type Requests Tracking Plans of a certain type. If omitted, lists all types. This
     *     parameter exists in alpha. (optional)
     * @return ApiResponse&lt;ListTrackingPlans200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ListTrackingPlans200Response> listTrackingPlansWithHttpInfo(
            PaginationInput pagination, String type) throws ApiException {
        okhttp3.Call localVarCall = listTrackingPlansValidateBeforeCall(pagination, type, null);
        Type localVarReturnType = new TypeToken<ListTrackingPlans200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Tracking Plans (asynchronously) Returns a list of Tracking Plans. **Note**: In order to
     * successfully call this endpoint, the specified Workspace needs to have the Protocols feature
     * enabled. Please reach out to your customer success manager for more information.
     *
     * @param pagination Pagination options. This parameter exists in alpha. (required)
     * @param type Requests Tracking Plans of a certain type. If omitted, lists all types. This
     *     parameter exists in alpha. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listTrackingPlansAsync(
            PaginationInput pagination,
            String type,
            final ApiCallback<ListTrackingPlans200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                listTrackingPlansValidateBeforeCall(pagination, type, _callback);
        Type localVarReturnType = new TypeToken<ListTrackingPlans200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeRulesFromTrackingPlan
     *
     * @param trackingPlanId (required)
     * @param rules Rules to delete. This parameter exists in alpha. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call removeRulesFromTrackingPlanCall(
            String trackingPlanId, List<RemoveRuleV1> rules, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/tracking-plans/{trackingPlanId}/rules"
                        .replaceAll(
                                "\\{" + "trackingPlanId" + "\\}",
                                localVarApiClient.escapeString(trackingPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rules != null) {
            localVarCollectionQueryParams.addAll(
                    localVarApiClient.parameterToPairs("csv", "rules", rules));
        }

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};

        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "DELETE",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeRulesFromTrackingPlanValidateBeforeCall(
            String trackingPlanId, List<RemoveRuleV1> rules, final ApiCallback _callback)
            throws ApiException {

        // verify the required parameter 'trackingPlanId' is set
        if (trackingPlanId == null) {
            throw new ApiException(
                    "Missing the required parameter 'trackingPlanId' when calling"
                            + " removeRulesFromTrackingPlan(Async)");
        }

        // verify the required parameter 'rules' is set
        if (rules == null) {
            throw new ApiException(
                    "Missing the required parameter 'rules' when calling"
                            + " removeRulesFromTrackingPlan(Async)");
        }

        okhttp3.Call localVarCall =
                removeRulesFromTrackingPlanCall(trackingPlanId, rules, _callback);
        return localVarCall;
    }

    /**
     * Remove Rules from Tracking Plan Deletes Tracking Plan rules. **Note**: In order to
     * successfully call this endpoint, the specified Workspace needs to have the Protocols feature
     * enabled. Please reach out to your customer success manager for more information.
     *
     * @param trackingPlanId (required)
     * @param rules Rules to delete. This parameter exists in alpha. (required)
     * @return RemoveRulesFromTrackingPlan200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public RemoveRulesFromTrackingPlan200Response removeRulesFromTrackingPlan(
            String trackingPlanId, List<RemoveRuleV1> rules) throws ApiException {
        ApiResponse<RemoveRulesFromTrackingPlan200Response> localVarResp =
                removeRulesFromTrackingPlanWithHttpInfo(trackingPlanId, rules);
        return localVarResp.getData();
    }

    /**
     * Remove Rules from Tracking Plan Deletes Tracking Plan rules. **Note**: In order to
     * successfully call this endpoint, the specified Workspace needs to have the Protocols feature
     * enabled. Please reach out to your customer success manager for more information.
     *
     * @param trackingPlanId (required)
     * @param rules Rules to delete. This parameter exists in alpha. (required)
     * @return ApiResponse&lt;RemoveRulesFromTrackingPlan200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RemoveRulesFromTrackingPlan200Response>
            removeRulesFromTrackingPlanWithHttpInfo(String trackingPlanId, List<RemoveRuleV1> rules)
                    throws ApiException {
        okhttp3.Call localVarCall =
                removeRulesFromTrackingPlanValidateBeforeCall(trackingPlanId, rules, null);
        Type localVarReturnType =
                new TypeToken<RemoveRulesFromTrackingPlan200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove Rules from Tracking Plan (asynchronously) Deletes Tracking Plan rules. **Note**: In
     * order to successfully call this endpoint, the specified Workspace needs to have the Protocols
     * feature enabled. Please reach out to your customer success manager for more information.
     *
     * @param trackingPlanId (required)
     * @param rules Rules to delete. This parameter exists in alpha. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call removeRulesFromTrackingPlanAsync(
            String trackingPlanId,
            List<RemoveRuleV1> rules,
            final ApiCallback<RemoveRulesFromTrackingPlan200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                removeRulesFromTrackingPlanValidateBeforeCall(trackingPlanId, rules, _callback);
        Type localVarReturnType =
                new TypeToken<RemoveRulesFromTrackingPlan200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeSourceFromTrackingPlan
     *
     * @param trackingPlanId (required)
     * @param sourceId The id of the Source associated with the Tracking Plan. Config API note:
     *     analogous to &#x60;sourceName&#x60;. This parameter exists in alpha. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call removeSourceFromTrackingPlanCall(
            String trackingPlanId, String sourceId, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/tracking-plans/{trackingPlanId}/sources"
                        .replaceAll(
                                "\\{" + "trackingPlanId" + "\\}",
                                localVarApiClient.escapeString(trackingPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sourceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourceId", sourceId));
        }

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};

        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "DELETE",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeSourceFromTrackingPlanValidateBeforeCall(
            String trackingPlanId, String sourceId, final ApiCallback _callback)
            throws ApiException {

        // verify the required parameter 'trackingPlanId' is set
        if (trackingPlanId == null) {
            throw new ApiException(
                    "Missing the required parameter 'trackingPlanId' when calling"
                            + " removeSourceFromTrackingPlan(Async)");
        }

        // verify the required parameter 'sourceId' is set
        if (sourceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'sourceId' when calling"
                            + " removeSourceFromTrackingPlan(Async)");
        }

        okhttp3.Call localVarCall =
                removeSourceFromTrackingPlanCall(trackingPlanId, sourceId, _callback);
        return localVarCall;
    }

    /**
     * Remove Source from Tracking Plan Disconnects a Source from a Tracking Plan. When called, this
     * endpoint may generate the &#x60;Source Modified&#x60; [Audit Trail](/tag/Audit-Trail) event.
     * **Note**: In order to successfully call this endpoint, the specified Workspace needs to have
     * the Protocols feature enabled. Please reach out to your customer success manager for more
     * information.
     *
     * @param trackingPlanId (required)
     * @param sourceId The id of the Source associated with the Tracking Plan. Config API note:
     *     analogous to &#x60;sourceName&#x60;. This parameter exists in alpha. (required)
     * @return RemoveSourceFromTrackingPlan200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public RemoveSourceFromTrackingPlan200Response removeSourceFromTrackingPlan(
            String trackingPlanId, String sourceId) throws ApiException {
        ApiResponse<RemoveSourceFromTrackingPlan200Response> localVarResp =
                removeSourceFromTrackingPlanWithHttpInfo(trackingPlanId, sourceId);
        return localVarResp.getData();
    }

    /**
     * Remove Source from Tracking Plan Disconnects a Source from a Tracking Plan. When called, this
     * endpoint may generate the &#x60;Source Modified&#x60; [Audit Trail](/tag/Audit-Trail) event.
     * **Note**: In order to successfully call this endpoint, the specified Workspace needs to have
     * the Protocols feature enabled. Please reach out to your customer success manager for more
     * information.
     *
     * @param trackingPlanId (required)
     * @param sourceId The id of the Source associated with the Tracking Plan. Config API note:
     *     analogous to &#x60;sourceName&#x60;. This parameter exists in alpha. (required)
     * @return ApiResponse&lt;RemoveSourceFromTrackingPlan200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RemoveSourceFromTrackingPlan200Response>
            removeSourceFromTrackingPlanWithHttpInfo(String trackingPlanId, String sourceId)
                    throws ApiException {
        okhttp3.Call localVarCall =
                removeSourceFromTrackingPlanValidateBeforeCall(trackingPlanId, sourceId, null);
        Type localVarReturnType =
                new TypeToken<RemoveSourceFromTrackingPlan200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove Source from Tracking Plan (asynchronously) Disconnects a Source from a Tracking Plan.
     * When called, this endpoint may generate the &#x60;Source Modified&#x60; [Audit
     * Trail](/tag/Audit-Trail) event. **Note**: In order to successfully call this endpoint, the
     * specified Workspace needs to have the Protocols feature enabled. Please reach out to your
     * customer success manager for more information.
     *
     * @param trackingPlanId (required)
     * @param sourceId The id of the Source associated with the Tracking Plan. Config API note:
     *     analogous to &#x60;sourceName&#x60;. This parameter exists in alpha. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call removeSourceFromTrackingPlanAsync(
            String trackingPlanId,
            String sourceId,
            final ApiCallback<RemoveSourceFromTrackingPlan200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                removeSourceFromTrackingPlanValidateBeforeCall(trackingPlanId, sourceId, _callback);
        Type localVarReturnType =
                new TypeToken<RemoveSourceFromTrackingPlan200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replaceRulesInTrackingPlan
     *
     * @param trackingPlanId (required)
     * @param replaceRulesInTrackingPlanV1Input (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call replaceRulesInTrackingPlanCall(
            String trackingPlanId,
            ReplaceRulesInTrackingPlanV1Input replaceRulesInTrackingPlanV1Input,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = replaceRulesInTrackingPlanV1Input;

        // create path and map variables
        String localVarPath =
                "/tracking-plans/{trackingPlanId}/rules"
                        .replaceAll(
                                "\\{" + "trackingPlanId" + "\\}",
                                localVarApiClient.escapeString(trackingPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.segment.v1alpha+json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1+json"
        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "PUT",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceRulesInTrackingPlanValidateBeforeCall(
            String trackingPlanId,
            ReplaceRulesInTrackingPlanV1Input replaceRulesInTrackingPlanV1Input,
            final ApiCallback _callback)
            throws ApiException {

        // verify the required parameter 'trackingPlanId' is set
        if (trackingPlanId == null) {
            throw new ApiException(
                    "Missing the required parameter 'trackingPlanId' when calling"
                            + " replaceRulesInTrackingPlan(Async)");
        }

        // verify the required parameter 'replaceRulesInTrackingPlanV1Input' is set
        if (replaceRulesInTrackingPlanV1Input == null) {
            throw new ApiException(
                    "Missing the required parameter 'replaceRulesInTrackingPlanV1Input' when"
                            + " calling replaceRulesInTrackingPlan(Async)");
        }

        okhttp3.Call localVarCall =
                replaceRulesInTrackingPlanCall(
                        trackingPlanId, replaceRulesInTrackingPlanV1Input, _callback);
        return localVarCall;
    }

    /**
     * Replace Rules in Tracking Plan Replaces Tracking Plan rules. **Note**: In order to
     * successfully call this endpoint, the specified Workspace needs to have the Protocols feature
     * enabled. Please reach out to your customer success manager for more information.
     *
     * @param trackingPlanId (required)
     * @param replaceRulesInTrackingPlanV1Input (required)
     * @return ReplaceRulesInTrackingPlan200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ReplaceRulesInTrackingPlan200Response replaceRulesInTrackingPlan(
            String trackingPlanId,
            ReplaceRulesInTrackingPlanV1Input replaceRulesInTrackingPlanV1Input)
            throws ApiException {
        ApiResponse<ReplaceRulesInTrackingPlan200Response> localVarResp =
                replaceRulesInTrackingPlanWithHttpInfo(
                        trackingPlanId, replaceRulesInTrackingPlanV1Input);
        return localVarResp.getData();
    }

    /**
     * Replace Rules in Tracking Plan Replaces Tracking Plan rules. **Note**: In order to
     * successfully call this endpoint, the specified Workspace needs to have the Protocols feature
     * enabled. Please reach out to your customer success manager for more information.
     *
     * @param trackingPlanId (required)
     * @param replaceRulesInTrackingPlanV1Input (required)
     * @return ApiResponse&lt;ReplaceRulesInTrackingPlan200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ReplaceRulesInTrackingPlan200Response>
            replaceRulesInTrackingPlanWithHttpInfo(
                    String trackingPlanId,
                    ReplaceRulesInTrackingPlanV1Input replaceRulesInTrackingPlanV1Input)
                    throws ApiException {
        okhttp3.Call localVarCall =
                replaceRulesInTrackingPlanValidateBeforeCall(
                        trackingPlanId, replaceRulesInTrackingPlanV1Input, null);
        Type localVarReturnType =
                new TypeToken<ReplaceRulesInTrackingPlan200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace Rules in Tracking Plan (asynchronously) Replaces Tracking Plan rules. **Note**: In
     * order to successfully call this endpoint, the specified Workspace needs to have the Protocols
     * feature enabled. Please reach out to your customer success manager for more information.
     *
     * @param trackingPlanId (required)
     * @param replaceRulesInTrackingPlanV1Input (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call replaceRulesInTrackingPlanAsync(
            String trackingPlanId,
            ReplaceRulesInTrackingPlanV1Input replaceRulesInTrackingPlanV1Input,
            final ApiCallback<ReplaceRulesInTrackingPlan200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                replaceRulesInTrackingPlanValidateBeforeCall(
                        trackingPlanId, replaceRulesInTrackingPlanV1Input, _callback);
        Type localVarReturnType =
                new TypeToken<ReplaceRulesInTrackingPlan200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRulesInTrackingPlan
     *
     * @param trackingPlanId (required)
     * @param updateRulesInTrackingPlanV1Input (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateRulesInTrackingPlanCall(
            String trackingPlanId,
            UpdateRulesInTrackingPlanV1Input updateRulesInTrackingPlanV1Input,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRulesInTrackingPlanV1Input;

        // create path and map variables
        String localVarPath =
                "/tracking-plans/{trackingPlanId}/rules"
                        .replaceAll(
                                "\\{" + "trackingPlanId" + "\\}",
                                localVarApiClient.escapeString(trackingPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.segment.v1alpha+json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1+json"
        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "PATCH",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRulesInTrackingPlanValidateBeforeCall(
            String trackingPlanId,
            UpdateRulesInTrackingPlanV1Input updateRulesInTrackingPlanV1Input,
            final ApiCallback _callback)
            throws ApiException {

        // verify the required parameter 'trackingPlanId' is set
        if (trackingPlanId == null) {
            throw new ApiException(
                    "Missing the required parameter 'trackingPlanId' when calling"
                            + " updateRulesInTrackingPlan(Async)");
        }

        // verify the required parameter 'updateRulesInTrackingPlanV1Input' is set
        if (updateRulesInTrackingPlanV1Input == null) {
            throw new ApiException(
                    "Missing the required parameter 'updateRulesInTrackingPlanV1Input' when"
                            + " calling updateRulesInTrackingPlan(Async)");
        }

        okhttp3.Call localVarCall =
                updateRulesInTrackingPlanCall(
                        trackingPlanId, updateRulesInTrackingPlanV1Input, _callback);
        return localVarCall;
    }

    /**
     * Update Rules in Tracking Plan Updates Tracking Plan rules. **Note**: In order to successfully
     * call this endpoint, the specified Workspace needs to have the Protocols feature enabled.
     * Please reach out to your customer success manager for more information.
     *
     * @param trackingPlanId (required)
     * @param updateRulesInTrackingPlanV1Input (required)
     * @return UpdateRulesInTrackingPlan200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public UpdateRulesInTrackingPlan200Response updateRulesInTrackingPlan(
            String trackingPlanId,
            UpdateRulesInTrackingPlanV1Input updateRulesInTrackingPlanV1Input)
            throws ApiException {
        ApiResponse<UpdateRulesInTrackingPlan200Response> localVarResp =
                updateRulesInTrackingPlanWithHttpInfo(
                        trackingPlanId, updateRulesInTrackingPlanV1Input);
        return localVarResp.getData();
    }

    /**
     * Update Rules in Tracking Plan Updates Tracking Plan rules. **Note**: In order to successfully
     * call this endpoint, the specified Workspace needs to have the Protocols feature enabled.
     * Please reach out to your customer success manager for more information.
     *
     * @param trackingPlanId (required)
     * @param updateRulesInTrackingPlanV1Input (required)
     * @return ApiResponse&lt;UpdateRulesInTrackingPlan200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<UpdateRulesInTrackingPlan200Response> updateRulesInTrackingPlanWithHttpInfo(
            String trackingPlanId,
            UpdateRulesInTrackingPlanV1Input updateRulesInTrackingPlanV1Input)
            throws ApiException {
        okhttp3.Call localVarCall =
                updateRulesInTrackingPlanValidateBeforeCall(
                        trackingPlanId, updateRulesInTrackingPlanV1Input, null);
        Type localVarReturnType =
                new TypeToken<UpdateRulesInTrackingPlan200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Rules in Tracking Plan (asynchronously) Updates Tracking Plan rules. **Note**: In
     * order to successfully call this endpoint, the specified Workspace needs to have the Protocols
     * feature enabled. Please reach out to your customer success manager for more information.
     *
     * @param trackingPlanId (required)
     * @param updateRulesInTrackingPlanV1Input (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateRulesInTrackingPlanAsync(
            String trackingPlanId,
            UpdateRulesInTrackingPlanV1Input updateRulesInTrackingPlanV1Input,
            final ApiCallback<UpdateRulesInTrackingPlan200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                updateRulesInTrackingPlanValidateBeforeCall(
                        trackingPlanId, updateRulesInTrackingPlanV1Input, _callback);
        Type localVarReturnType =
                new TypeToken<UpdateRulesInTrackingPlan200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTrackingPlan
     *
     * @param trackingPlanId (required)
     * @param updateTrackingPlanV1Input (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateTrackingPlanCall(
            String trackingPlanId,
            UpdateTrackingPlanV1Input updateTrackingPlanV1Input,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateTrackingPlanV1Input;

        // create path and map variables
        String localVarPath =
                "/tracking-plans/{trackingPlanId}"
                        .replaceAll(
                                "\\{" + "trackingPlanId" + "\\}",
                                localVarApiClient.escapeString(trackingPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1+json",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.segment.v1alpha+json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1+json"
        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "PATCH",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTrackingPlanValidateBeforeCall(
            String trackingPlanId,
            UpdateTrackingPlanV1Input updateTrackingPlanV1Input,
            final ApiCallback _callback)
            throws ApiException {

        // verify the required parameter 'trackingPlanId' is set
        if (trackingPlanId == null) {
            throw new ApiException(
                    "Missing the required parameter 'trackingPlanId' when calling"
                            + " updateTrackingPlan(Async)");
        }

        // verify the required parameter 'updateTrackingPlanV1Input' is set
        if (updateTrackingPlanV1Input == null) {
            throw new ApiException(
                    "Missing the required parameter 'updateTrackingPlanV1Input' when calling"
                            + " updateTrackingPlan(Async)");
        }

        okhttp3.Call localVarCall =
                updateTrackingPlanCall(trackingPlanId, updateTrackingPlanV1Input, _callback);
        return localVarCall;
    }

    /**
     * Update Tracking Plan Updates a Tracking Plan. **Note**: In order to successfully call this
     * endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach
     * out to your customer success manager for more information. Config API omitted fields: -
     * &#x60;updateMask&#x60;
     *
     * @param trackingPlanId (required)
     * @param updateTrackingPlanV1Input (required)
     * @return UpdateTrackingPlan200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public UpdateTrackingPlan200Response updateTrackingPlan(
            String trackingPlanId, UpdateTrackingPlanV1Input updateTrackingPlanV1Input)
            throws ApiException {
        ApiResponse<UpdateTrackingPlan200Response> localVarResp =
                updateTrackingPlanWithHttpInfo(trackingPlanId, updateTrackingPlanV1Input);
        return localVarResp.getData();
    }

    /**
     * Update Tracking Plan Updates a Tracking Plan. **Note**: In order to successfully call this
     * endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach
     * out to your customer success manager for more information. Config API omitted fields: -
     * &#x60;updateMask&#x60;
     *
     * @param trackingPlanId (required)
     * @param updateTrackingPlanV1Input (required)
     * @return ApiResponse&lt;UpdateTrackingPlan200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<UpdateTrackingPlan200Response> updateTrackingPlanWithHttpInfo(
            String trackingPlanId, UpdateTrackingPlanV1Input updateTrackingPlanV1Input)
            throws ApiException {
        okhttp3.Call localVarCall =
                updateTrackingPlanValidateBeforeCall(
                        trackingPlanId, updateTrackingPlanV1Input, null);
        Type localVarReturnType = new TypeToken<UpdateTrackingPlan200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Tracking Plan (asynchronously) Updates a Tracking Plan. **Note**: In order to
     * successfully call this endpoint, the specified Workspace needs to have the Protocols feature
     * enabled. Please reach out to your customer success manager for more information. Config API
     * omitted fields: - &#x60;updateMask&#x60;
     *
     * @param trackingPlanId (required)
     * @param updateTrackingPlanV1Input (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateTrackingPlanAsync(
            String trackingPlanId,
            UpdateTrackingPlanV1Input updateTrackingPlanV1Input,
            final ApiCallback<UpdateTrackingPlan200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                updateTrackingPlanValidateBeforeCall(
                        trackingPlanId, updateTrackingPlanV1Input, _callback);
        Type localVarReturnType = new TypeToken<UpdateTrackingPlan200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
