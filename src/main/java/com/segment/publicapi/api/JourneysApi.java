/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.api;

import com.google.gson.reflect.TypeToken;
import com.segment.publicapi.ApiCallback;
import com.segment.publicapi.ApiClient;
import com.segment.publicapi.ApiException;
import com.segment.publicapi.ApiResponse;
import com.segment.publicapi.Configuration;
import com.segment.publicapi.Pair;
import com.segment.publicapi.models.CreateJourney201Response;
import com.segment.publicapi.models.CreateJourneyAlphaInput;
import com.segment.publicapi.models.GetJourney200Response;
import com.segment.publicapi.models.GetJourneyAnalytics200Response;
import com.segment.publicapi.models.RemoveJourneyFromSpace200Response;
import com.segment.publicapi.models.ReplaceStepsForJourney200Response;
import com.segment.publicapi.models.ReplaceStepsForJourneyAlphaInput;
import com.segment.publicapi.models.UpdateDestinationsForJourney200Response;
import com.segment.publicapi.models.UpdateDestinationsForJourneyAlphaInput;
import com.segment.publicapi.models.UpdateStatusForJourney200Response;
import com.segment.publicapi.models.UpdateStatusForJourneyAlphaInput;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class JourneysApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public JourneysApi() {
        this(Configuration.getDefaultApiClient());
    }

    public JourneysApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createJourney
     *
     * @param spaceId (required)
     * @param createJourneyAlphaInput (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createJourneyCall(
            String spaceId,
            CreateJourneyAlphaInput createJourneyAlphaInput,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createJourneyAlphaInput;

        // create path and map variables
        String localVarPath =
                "/spaces/{spaceId}/journeys"
                        .replace(
                                "{" + "spaceId" + "}",
                                localVarApiClient.escapeString(spaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/vnd.segment.v1alpha+json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createJourneyValidateBeforeCall(
            String spaceId,
            CreateJourneyAlphaInput createJourneyAlphaInput,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'spaceId' when calling createJourney(Async)");
        }

        // verify the required parameter 'createJourneyAlphaInput' is set
        if (createJourneyAlphaInput == null) {
            throw new ApiException(
                    "Missing the required parameter 'createJourneyAlphaInput' when calling"
                            + " createJourney(Async)");
        }

        return createJourneyCall(spaceId, createJourneyAlphaInput, _callback);
    }

    /**
     * Create Journey Creates Journey. • This endpoint is in **Alpha** testing. Please submit any
     * feedback by sending an email to friends@segment.com. • In order to successfully call this
     * endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach
     * out to your customer success manager for more information.
     *
     * @param spaceId (required)
     * @param createJourneyAlphaInput (required)
     * @return CreateJourney201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public CreateJourney201Response createJourney(
            String spaceId, CreateJourneyAlphaInput createJourneyAlphaInput) throws ApiException {
        ApiResponse<CreateJourney201Response> localVarResp =
                createJourneyWithHttpInfo(spaceId, createJourneyAlphaInput);
        return localVarResp.getData();
    }

    /**
     * Create Journey Creates Journey. • This endpoint is in **Alpha** testing. Please submit any
     * feedback by sending an email to friends@segment.com. • In order to successfully call this
     * endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach
     * out to your customer success manager for more information.
     *
     * @param spaceId (required)
     * @param createJourneyAlphaInput (required)
     * @return ApiResponse&lt;CreateJourney201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CreateJourney201Response> createJourneyWithHttpInfo(
            String spaceId, CreateJourneyAlphaInput createJourneyAlphaInput) throws ApiException {
        okhttp3.Call localVarCall =
                createJourneyValidateBeforeCall(spaceId, createJourneyAlphaInput, null);
        Type localVarReturnType = new TypeToken<CreateJourney201Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Journey (asynchronously) Creates Journey. • This endpoint is in **Alpha** testing.
     * Please submit any feedback by sending an email to friends@segment.com. • In order to
     * successfully call this endpoint, the specified Workspace needs to have the Journeys feature
     * enabled. Please reach out to your customer success manager for more information.
     *
     * @param spaceId (required)
     * @param createJourneyAlphaInput (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createJourneyAsync(
            String spaceId,
            CreateJourneyAlphaInput createJourneyAlphaInput,
            final ApiCallback<CreateJourney201Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                createJourneyValidateBeforeCall(spaceId, createJourneyAlphaInput, _callback);
        Type localVarReturnType = new TypeToken<CreateJourney201Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getJourney
     *
     * @param spaceId (required)
     * @param containerId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getJourneyCall(
            String spaceId, String containerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/spaces/{spaceId}/journeys/{containerId}"
                        .replace(
                                "{" + "spaceId" + "}",
                                localVarApiClient.escapeString(spaceId.toString()))
                        .replace(
                                "{" + "containerId" + "}",
                                localVarApiClient.escapeString(containerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJourneyValidateBeforeCall(
            String spaceId, String containerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'spaceId' when calling getJourney(Async)");
        }

        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException(
                    "Missing the required parameter 'containerId' when calling getJourney(Async)");
        }

        return getJourneyCall(spaceId, containerId, _callback);
    }

    /**
     * Get Journey Returns the journey by containerId • This endpoint is in **Alpha** testing.
     * Please submit any feedback by sending an email to friends@segment.com. • In order to
     * successfully call this endpoint, the specified Workspace needs to have the Journeys feature
     * enabled. Please reach out to your customer success manager for more information.
     *
     * @param spaceId (required)
     * @param containerId (required)
     * @return GetJourney200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public GetJourney200Response getJourney(String spaceId, String containerId)
            throws ApiException {
        ApiResponse<GetJourney200Response> localVarResp =
                getJourneyWithHttpInfo(spaceId, containerId);
        return localVarResp.getData();
    }

    /**
     * Get Journey Returns the journey by containerId • This endpoint is in **Alpha** testing.
     * Please submit any feedback by sending an email to friends@segment.com. • In order to
     * successfully call this endpoint, the specified Workspace needs to have the Journeys feature
     * enabled. Please reach out to your customer success manager for more information.
     *
     * @param spaceId (required)
     * @param containerId (required)
     * @return ApiResponse&lt;GetJourney200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<GetJourney200Response> getJourneyWithHttpInfo(
            String spaceId, String containerId) throws ApiException {
        okhttp3.Call localVarCall = getJourneyValidateBeforeCall(spaceId, containerId, null);
        Type localVarReturnType = new TypeToken<GetJourney200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Journey (asynchronously) Returns the journey by containerId • This endpoint is in
     * **Alpha** testing. Please submit any feedback by sending an email to friends@segment.com. •
     * In order to successfully call this endpoint, the specified Workspace needs to have the
     * Journeys feature enabled. Please reach out to your customer success manager for more
     * information.
     *
     * @param spaceId (required)
     * @param containerId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getJourneyAsync(
            String spaceId, String containerId, final ApiCallback<GetJourney200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = getJourneyValidateBeforeCall(spaceId, containerId, _callback);
        Type localVarReturnType = new TypeToken<GetJourney200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getJourneyAnalytics
     *
     * @param spaceId (required)
     * @param containerId (required)
     * @param version The journey version. This parameter exists in alpha. (required)
     * @param fromDate This parameter exists in alpha. (required)
     * @param toDate This parameter exists in alpha. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getJourneyAnalyticsCall(
            String spaceId,
            String containerId,
            BigDecimal version,
            String fromDate,
            String toDate,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/spaces/{spaceId}/journeys/{containerId}/analytics"
                        .replace(
                                "{" + "spaceId" + "}",
                                localVarApiClient.escapeString(spaceId.toString()))
                        .replace(
                                "{" + "containerId" + "}",
                                localVarApiClient.escapeString(containerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDate", fromDate));
        }

        if (toDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDate", toDate));
        }

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJourneyAnalyticsValidateBeforeCall(
            String spaceId,
            String containerId,
            BigDecimal version,
            String fromDate,
            String toDate,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'spaceId' when calling"
                            + " getJourneyAnalytics(Async)");
        }

        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException(
                    "Missing the required parameter 'containerId' when calling"
                            + " getJourneyAnalytics(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException(
                    "Missing the required parameter 'version' when calling"
                            + " getJourneyAnalytics(Async)");
        }

        // verify the required parameter 'fromDate' is set
        if (fromDate == null) {
            throw new ApiException(
                    "Missing the required parameter 'fromDate' when calling"
                            + " getJourneyAnalytics(Async)");
        }

        return getJourneyAnalyticsCall(spaceId, containerId, version, fromDate, toDate, _callback);
    }

    /**
     * Get Journey Analytics Get Analytics for a journey • This endpoint is in **Alpha** testing.
     * Please submit any feedback by sending an email to friends@segment.com. • In order to
     * successfully call this endpoint, the specified Workspace needs to have the Journeys feature
     * enabled. Please reach out to your customer success manager for more information.
     *
     * @param spaceId (required)
     * @param containerId (required)
     * @param version The journey version. This parameter exists in alpha. (required)
     * @param fromDate This parameter exists in alpha. (required)
     * @param toDate This parameter exists in alpha. (optional)
     * @return GetJourneyAnalytics200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public GetJourneyAnalytics200Response getJourneyAnalytics(
            String spaceId, String containerId, BigDecimal version, String fromDate, String toDate)
            throws ApiException {
        ApiResponse<GetJourneyAnalytics200Response> localVarResp =
                getJourneyAnalyticsWithHttpInfo(spaceId, containerId, version, fromDate, toDate);
        return localVarResp.getData();
    }

    /**
     * Get Journey Analytics Get Analytics for a journey • This endpoint is in **Alpha** testing.
     * Please submit any feedback by sending an email to friends@segment.com. • In order to
     * successfully call this endpoint, the specified Workspace needs to have the Journeys feature
     * enabled. Please reach out to your customer success manager for more information.
     *
     * @param spaceId (required)
     * @param containerId (required)
     * @param version The journey version. This parameter exists in alpha. (required)
     * @param fromDate This parameter exists in alpha. (required)
     * @param toDate This parameter exists in alpha. (optional)
     * @return ApiResponse&lt;GetJourneyAnalytics200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<GetJourneyAnalytics200Response> getJourneyAnalyticsWithHttpInfo(
            String spaceId, String containerId, BigDecimal version, String fromDate, String toDate)
            throws ApiException {
        okhttp3.Call localVarCall =
                getJourneyAnalyticsValidateBeforeCall(
                        spaceId, containerId, version, fromDate, toDate, null);
        Type localVarReturnType = new TypeToken<GetJourneyAnalytics200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Journey Analytics (asynchronously) Get Analytics for a journey • This endpoint is in
     * **Alpha** testing. Please submit any feedback by sending an email to friends@segment.com. •
     * In order to successfully call this endpoint, the specified Workspace needs to have the
     * Journeys feature enabled. Please reach out to your customer success manager for more
     * information.
     *
     * @param spaceId (required)
     * @param containerId (required)
     * @param version The journey version. This parameter exists in alpha. (required)
     * @param fromDate This parameter exists in alpha. (required)
     * @param toDate This parameter exists in alpha. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getJourneyAnalyticsAsync(
            String spaceId,
            String containerId,
            BigDecimal version,
            String fromDate,
            String toDate,
            final ApiCallback<GetJourneyAnalytics200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                getJourneyAnalyticsValidateBeforeCall(
                        spaceId, containerId, version, fromDate, toDate, _callback);
        Type localVarReturnType = new TypeToken<GetJourneyAnalytics200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for removeJourneyFromSpace
     *
     * @param spaceId (required)
     * @param containerId (required)
     * @param version The journey version. This parameter exists in alpha. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call removeJourneyFromSpaceCall(
            String spaceId, String containerId, BigDecimal version, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/spaces/{spaceId}/journeys/{containerId}"
                        .replace(
                                "{" + "spaceId" + "}",
                                localVarApiClient.escapeString(spaceId.toString()))
                        .replace(
                                "{" + "containerId" + "}",
                                localVarApiClient.escapeString(containerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "DELETE",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeJourneyFromSpaceValidateBeforeCall(
            String spaceId, String containerId, BigDecimal version, final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'spaceId' when calling"
                            + " removeJourneyFromSpace(Async)");
        }

        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException(
                    "Missing the required parameter 'containerId' when calling"
                            + " removeJourneyFromSpace(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException(
                    "Missing the required parameter 'version' when calling"
                            + " removeJourneyFromSpace(Async)");
        }

        return removeJourneyFromSpaceCall(spaceId, containerId, version, _callback);
    }

    /**
     * Remove Journey from Space Delete a journey • This endpoint is in **Alpha** testing. Please
     * submit any feedback by sending an email to friends@segment.com. • In order to successfully
     * call this endpoint, the specified Workspace needs to have the Journeys feature enabled.
     * Please reach out to your customer success manager for more information.
     *
     * @param spaceId (required)
     * @param containerId (required)
     * @param version The journey version. This parameter exists in alpha. (required)
     * @return RemoveJourneyFromSpace200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public RemoveJourneyFromSpace200Response removeJourneyFromSpace(
            String spaceId, String containerId, BigDecimal version) throws ApiException {
        ApiResponse<RemoveJourneyFromSpace200Response> localVarResp =
                removeJourneyFromSpaceWithHttpInfo(spaceId, containerId, version);
        return localVarResp.getData();
    }

    /**
     * Remove Journey from Space Delete a journey • This endpoint is in **Alpha** testing. Please
     * submit any feedback by sending an email to friends@segment.com. • In order to successfully
     * call this endpoint, the specified Workspace needs to have the Journeys feature enabled.
     * Please reach out to your customer success manager for more information.
     *
     * @param spaceId (required)
     * @param containerId (required)
     * @param version The journey version. This parameter exists in alpha. (required)
     * @return ApiResponse&lt;RemoveJourneyFromSpace200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RemoveJourneyFromSpace200Response> removeJourneyFromSpaceWithHttpInfo(
            String spaceId, String containerId, BigDecimal version) throws ApiException {
        okhttp3.Call localVarCall =
                removeJourneyFromSpaceValidateBeforeCall(spaceId, containerId, version, null);
        Type localVarReturnType = new TypeToken<RemoveJourneyFromSpace200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove Journey from Space (asynchronously) Delete a journey • This endpoint is in **Alpha**
     * testing. Please submit any feedback by sending an email to friends@segment.com. • In order to
     * successfully call this endpoint, the specified Workspace needs to have the Journeys feature
     * enabled. Please reach out to your customer success manager for more information.
     *
     * @param spaceId (required)
     * @param containerId (required)
     * @param version The journey version. This parameter exists in alpha. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call removeJourneyFromSpaceAsync(
            String spaceId,
            String containerId,
            BigDecimal version,
            final ApiCallback<RemoveJourneyFromSpace200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                removeJourneyFromSpaceValidateBeforeCall(spaceId, containerId, version, _callback);
        Type localVarReturnType = new TypeToken<RemoveJourneyFromSpace200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for replaceStepsForJourney
     *
     * @param spaceId (required)
     * @param containerId (required)
     * @param replaceStepsForJourneyAlphaInput (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call replaceStepsForJourneyCall(
            String spaceId,
            String containerId,
            ReplaceStepsForJourneyAlphaInput replaceStepsForJourneyAlphaInput,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = replaceStepsForJourneyAlphaInput;

        // create path and map variables
        String localVarPath =
                "/spaces/{spaceId}/journeys/{containerId}/steps"
                        .replace(
                                "{" + "spaceId" + "}",
                                localVarApiClient.escapeString(spaceId.toString()))
                        .replace(
                                "{" + "containerId" + "}",
                                localVarApiClient.escapeString(containerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/vnd.segment.v1alpha+json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "PUT",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceStepsForJourneyValidateBeforeCall(
            String spaceId,
            String containerId,
            ReplaceStepsForJourneyAlphaInput replaceStepsForJourneyAlphaInput,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'spaceId' when calling"
                            + " replaceStepsForJourney(Async)");
        }

        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException(
                    "Missing the required parameter 'containerId' when calling"
                            + " replaceStepsForJourney(Async)");
        }

        // verify the required parameter 'replaceStepsForJourneyAlphaInput' is set
        if (replaceStepsForJourneyAlphaInput == null) {
            throw new ApiException(
                    "Missing the required parameter 'replaceStepsForJourneyAlphaInput' when calling"
                            + " replaceStepsForJourney(Async)");
        }

        return replaceStepsForJourneyCall(
                spaceId, containerId, replaceStepsForJourneyAlphaInput, _callback);
    }

    /**
     * Replace Steps for Journey Replace steps for a journey • This endpoint is in **Alpha**
     * testing. Please submit any feedback by sending an email to friends@segment.com. • In order to
     * successfully call this endpoint, the specified Workspace needs to have the Journeys feature
     * enabled. Please reach out to your customer success manager for more information.
     *
     * @param spaceId (required)
     * @param containerId (required)
     * @param replaceStepsForJourneyAlphaInput (required)
     * @return ReplaceStepsForJourney200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ReplaceStepsForJourney200Response replaceStepsForJourney(
            String spaceId,
            String containerId,
            ReplaceStepsForJourneyAlphaInput replaceStepsForJourneyAlphaInput)
            throws ApiException {
        ApiResponse<ReplaceStepsForJourney200Response> localVarResp =
                replaceStepsForJourneyWithHttpInfo(
                        spaceId, containerId, replaceStepsForJourneyAlphaInput);
        return localVarResp.getData();
    }

    /**
     * Replace Steps for Journey Replace steps for a journey • This endpoint is in **Alpha**
     * testing. Please submit any feedback by sending an email to friends@segment.com. • In order to
     * successfully call this endpoint, the specified Workspace needs to have the Journeys feature
     * enabled. Please reach out to your customer success manager for more information.
     *
     * @param spaceId (required)
     * @param containerId (required)
     * @param replaceStepsForJourneyAlphaInput (required)
     * @return ApiResponse&lt;ReplaceStepsForJourney200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ReplaceStepsForJourney200Response> replaceStepsForJourneyWithHttpInfo(
            String spaceId,
            String containerId,
            ReplaceStepsForJourneyAlphaInput replaceStepsForJourneyAlphaInput)
            throws ApiException {
        okhttp3.Call localVarCall =
                replaceStepsForJourneyValidateBeforeCall(
                        spaceId, containerId, replaceStepsForJourneyAlphaInput, null);
        Type localVarReturnType = new TypeToken<ReplaceStepsForJourney200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace Steps for Journey (asynchronously) Replace steps for a journey • This endpoint is in
     * **Alpha** testing. Please submit any feedback by sending an email to friends@segment.com. •
     * In order to successfully call this endpoint, the specified Workspace needs to have the
     * Journeys feature enabled. Please reach out to your customer success manager for more
     * information.
     *
     * @param spaceId (required)
     * @param containerId (required)
     * @param replaceStepsForJourneyAlphaInput (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call replaceStepsForJourneyAsync(
            String spaceId,
            String containerId,
            ReplaceStepsForJourneyAlphaInput replaceStepsForJourneyAlphaInput,
            final ApiCallback<ReplaceStepsForJourney200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                replaceStepsForJourneyValidateBeforeCall(
                        spaceId, containerId, replaceStepsForJourneyAlphaInput, _callback);
        Type localVarReturnType = new TypeToken<ReplaceStepsForJourney200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for updateDestinationsForJourney
     *
     * @param spaceId (required)
     * @param containerId (required)
     * @param updateDestinationsForJourneyAlphaInput (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateDestinationsForJourneyCall(
            String spaceId,
            String containerId,
            UpdateDestinationsForJourneyAlphaInput updateDestinationsForJourneyAlphaInput,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDestinationsForJourneyAlphaInput;

        // create path and map variables
        String localVarPath =
                "/spaces/{spaceId}/journeys/{containerId}/destinations"
                        .replace(
                                "{" + "spaceId" + "}",
                                localVarApiClient.escapeString(spaceId.toString()))
                        .replace(
                                "{" + "containerId" + "}",
                                localVarApiClient.escapeString(containerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/vnd.segment.v1alpha+json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "PATCH",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDestinationsForJourneyValidateBeforeCall(
            String spaceId,
            String containerId,
            UpdateDestinationsForJourneyAlphaInput updateDestinationsForJourneyAlphaInput,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'spaceId' when calling"
                            + " updateDestinationsForJourney(Async)");
        }

        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException(
                    "Missing the required parameter 'containerId' when calling"
                            + " updateDestinationsForJourney(Async)");
        }

        // verify the required parameter 'updateDestinationsForJourneyAlphaInput' is set
        if (updateDestinationsForJourneyAlphaInput == null) {
            throw new ApiException(
                    "Missing the required parameter 'updateDestinationsForJourneyAlphaInput' when"
                            + " calling updateDestinationsForJourney(Async)");
        }

        return updateDestinationsForJourneyCall(
                spaceId, containerId, updateDestinationsForJourneyAlphaInput, _callback);
    }

    /**
     * Update Destinations for Journey Update DESTINATIONS for a journey • This endpoint is in
     * **Alpha** testing. Please submit any feedback by sending an email to friends@segment.com. •
     * In order to successfully call this endpoint, the specified Workspace needs to have the
     * Journeys feature enabled. Please reach out to your customer success manager for more
     * information.
     *
     * @param spaceId (required)
     * @param containerId (required)
     * @param updateDestinationsForJourneyAlphaInput (required)
     * @return UpdateDestinationsForJourney200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public UpdateDestinationsForJourney200Response updateDestinationsForJourney(
            String spaceId,
            String containerId,
            UpdateDestinationsForJourneyAlphaInput updateDestinationsForJourneyAlphaInput)
            throws ApiException {
        ApiResponse<UpdateDestinationsForJourney200Response> localVarResp =
                updateDestinationsForJourneyWithHttpInfo(
                        spaceId, containerId, updateDestinationsForJourneyAlphaInput);
        return localVarResp.getData();
    }

    /**
     * Update Destinations for Journey Update DESTINATIONS for a journey • This endpoint is in
     * **Alpha** testing. Please submit any feedback by sending an email to friends@segment.com. •
     * In order to successfully call this endpoint, the specified Workspace needs to have the
     * Journeys feature enabled. Please reach out to your customer success manager for more
     * information.
     *
     * @param spaceId (required)
     * @param containerId (required)
     * @param updateDestinationsForJourneyAlphaInput (required)
     * @return ApiResponse&lt;UpdateDestinationsForJourney200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<UpdateDestinationsForJourney200Response>
            updateDestinationsForJourneyWithHttpInfo(
                    String spaceId,
                    String containerId,
                    UpdateDestinationsForJourneyAlphaInput updateDestinationsForJourneyAlphaInput)
                    throws ApiException {
        okhttp3.Call localVarCall =
                updateDestinationsForJourneyValidateBeforeCall(
                        spaceId, containerId, updateDestinationsForJourneyAlphaInput, null);
        Type localVarReturnType =
                new TypeToken<UpdateDestinationsForJourney200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Destinations for Journey (asynchronously) Update DESTINATIONS for a journey • This
     * endpoint is in **Alpha** testing. Please submit any feedback by sending an email to
     * friends@segment.com. • In order to successfully call this endpoint, the specified Workspace
     * needs to have the Journeys feature enabled. Please reach out to your customer success manager
     * for more information.
     *
     * @param spaceId (required)
     * @param containerId (required)
     * @param updateDestinationsForJourneyAlphaInput (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateDestinationsForJourneyAsync(
            String spaceId,
            String containerId,
            UpdateDestinationsForJourneyAlphaInput updateDestinationsForJourneyAlphaInput,
            final ApiCallback<UpdateDestinationsForJourney200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                updateDestinationsForJourneyValidateBeforeCall(
                        spaceId, containerId, updateDestinationsForJourneyAlphaInput, _callback);
        Type localVarReturnType =
                new TypeToken<UpdateDestinationsForJourney200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for updateStatusForJourney
     *
     * @param spaceId (required)
     * @param containerId (required)
     * @param updateStatusForJourneyAlphaInput (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateStatusForJourneyCall(
            String spaceId,
            String containerId,
            UpdateStatusForJourneyAlphaInput updateStatusForJourneyAlphaInput,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateStatusForJourneyAlphaInput;

        // create path and map variables
        String localVarPath =
                "/spaces/{spaceId}/journeys/{containerId}/status"
                        .replace(
                                "{" + "spaceId" + "}",
                                localVarApiClient.escapeString(spaceId.toString()))
                        .replace(
                                "{" + "containerId" + "}",
                                localVarApiClient.escapeString(containerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/vnd.segment.v1alpha+json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "PATCH",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStatusForJourneyValidateBeforeCall(
            String spaceId,
            String containerId,
            UpdateStatusForJourneyAlphaInput updateStatusForJourneyAlphaInput,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'spaceId' when calling"
                            + " updateStatusForJourney(Async)");
        }

        // verify the required parameter 'containerId' is set
        if (containerId == null) {
            throw new ApiException(
                    "Missing the required parameter 'containerId' when calling"
                            + " updateStatusForJourney(Async)");
        }

        // verify the required parameter 'updateStatusForJourneyAlphaInput' is set
        if (updateStatusForJourneyAlphaInput == null) {
            throw new ApiException(
                    "Missing the required parameter 'updateStatusForJourneyAlphaInput' when calling"
                            + " updateStatusForJourney(Async)");
        }

        return updateStatusForJourneyCall(
                spaceId, containerId, updateStatusForJourneyAlphaInput, _callback);
    }

    /**
     * Update Status for Journey Update status of the journey • This endpoint is in **Alpha**
     * testing. Please submit any feedback by sending an email to friends@segment.com. • In order to
     * successfully call this endpoint, the specified Workspace needs to have the Journeys feature
     * enabled. Please reach out to your customer success manager for more information.
     *
     * @param spaceId (required)
     * @param containerId (required)
     * @param updateStatusForJourneyAlphaInput (required)
     * @return UpdateStatusForJourney200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public UpdateStatusForJourney200Response updateStatusForJourney(
            String spaceId,
            String containerId,
            UpdateStatusForJourneyAlphaInput updateStatusForJourneyAlphaInput)
            throws ApiException {
        ApiResponse<UpdateStatusForJourney200Response> localVarResp =
                updateStatusForJourneyWithHttpInfo(
                        spaceId, containerId, updateStatusForJourneyAlphaInput);
        return localVarResp.getData();
    }

    /**
     * Update Status for Journey Update status of the journey • This endpoint is in **Alpha**
     * testing. Please submit any feedback by sending an email to friends@segment.com. • In order to
     * successfully call this endpoint, the specified Workspace needs to have the Journeys feature
     * enabled. Please reach out to your customer success manager for more information.
     *
     * @param spaceId (required)
     * @param containerId (required)
     * @param updateStatusForJourneyAlphaInput (required)
     * @return ApiResponse&lt;UpdateStatusForJourney200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<UpdateStatusForJourney200Response> updateStatusForJourneyWithHttpInfo(
            String spaceId,
            String containerId,
            UpdateStatusForJourneyAlphaInput updateStatusForJourneyAlphaInput)
            throws ApiException {
        okhttp3.Call localVarCall =
                updateStatusForJourneyValidateBeforeCall(
                        spaceId, containerId, updateStatusForJourneyAlphaInput, null);
        Type localVarReturnType = new TypeToken<UpdateStatusForJourney200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Status for Journey (asynchronously) Update status of the journey • This endpoint is in
     * **Alpha** testing. Please submit any feedback by sending an email to friends@segment.com. •
     * In order to successfully call this endpoint, the specified Workspace needs to have the
     * Journeys feature enabled. Please reach out to your customer success manager for more
     * information.
     *
     * @param spaceId (required)
     * @param containerId (required)
     * @param updateStatusForJourneyAlphaInput (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateStatusForJourneyAsync(
            String spaceId,
            String containerId,
            UpdateStatusForJourneyAlphaInput updateStatusForJourneyAlphaInput,
            final ApiCallback<UpdateStatusForJourney200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                updateStatusForJourneyValidateBeforeCall(
                        spaceId, containerId, updateStatusForJourneyAlphaInput, _callback);
        Type localVarReturnType = new TypeToken<UpdateStatusForJourney200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
