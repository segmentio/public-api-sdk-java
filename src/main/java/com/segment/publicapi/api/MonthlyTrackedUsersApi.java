/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.api;

import com.google.gson.reflect.TypeToken;
import com.segment.publicapi.ApiCallback;
import com.segment.publicapi.ApiClient;
import com.segment.publicapi.ApiException;
import com.segment.publicapi.ApiResponse;
import com.segment.publicapi.Configuration;
import com.segment.publicapi.Pair;
import com.segment.publicapi.models.GetDailyPerSourceMTUUsage200Response;
import com.segment.publicapi.models.GetDailyWorkspaceMTUUsage200Response;
import com.segment.publicapi.models.PaginationInput;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MonthlyTrackedUsersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MonthlyTrackedUsersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MonthlyTrackedUsersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getDailyPerSourceMTUUsage
     *
     * @param period The start of the usage month, in the ISO-8601 format. This parameter exists in
     *     v1. (required)
     * @param pagination Pagination input for per Source MTU counts. This parameter exists in v1.
     *     (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getDailyPerSourceMTUUsageCall(
            String period, PaginationInput pagination, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usage/mtu/sources/daily";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("period", period));
        }

        if (pagination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination", pagination));
        }

        final String[] localVarAccepts = {
            "application/vnd.segment.v1+json",
            "application/json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDailyPerSourceMTUUsageValidateBeforeCall(
            String period, PaginationInput pagination, final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException(
                    "Missing the required parameter 'period' when calling"
                            + " getDailyPerSourceMTUUsage(Async)");
        }

        // verify the required parameter 'pagination' is set
        if (pagination == null) {
            throw new ApiException(
                    "Missing the required parameter 'pagination' when calling"
                            + " getDailyPerSourceMTUUsage(Async)");
        }

        return getDailyPerSourceMTUUsageCall(period, pagination, _callback);
    }

    /**
     * Get Daily Per Source MTU Usage Provides daily cumulative per-source MTU counts for a usage
     * period.
     *
     * @param period The start of the usage month, in the ISO-8601 format. This parameter exists in
     *     v1. (required)
     * @param pagination Pagination input for per Source MTU counts. This parameter exists in v1.
     *     (required)
     * @return GetDailyPerSourceMTUUsage200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public GetDailyPerSourceMTUUsage200Response getDailyPerSourceMTUUsage(
            String period, PaginationInput pagination) throws ApiException {
        ApiResponse<GetDailyPerSourceMTUUsage200Response> localVarResp =
                getDailyPerSourceMTUUsageWithHttpInfo(period, pagination);
        return localVarResp.getData();
    }

    /**
     * Get Daily Per Source MTU Usage Provides daily cumulative per-source MTU counts for a usage
     * period.
     *
     * @param period The start of the usage month, in the ISO-8601 format. This parameter exists in
     *     v1. (required)
     * @param pagination Pagination input for per Source MTU counts. This parameter exists in v1.
     *     (required)
     * @return ApiResponse&lt;GetDailyPerSourceMTUUsage200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<GetDailyPerSourceMTUUsage200Response> getDailyPerSourceMTUUsageWithHttpInfo(
            String period, PaginationInput pagination) throws ApiException {
        okhttp3.Call localVarCall =
                getDailyPerSourceMTUUsageValidateBeforeCall(period, pagination, null);
        Type localVarReturnType =
                new TypeToken<GetDailyPerSourceMTUUsage200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Daily Per Source MTU Usage (asynchronously) Provides daily cumulative per-source MTU
     * counts for a usage period.
     *
     * @param period The start of the usage month, in the ISO-8601 format. This parameter exists in
     *     v1. (required)
     * @param pagination Pagination input for per Source MTU counts. This parameter exists in v1.
     *     (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getDailyPerSourceMTUUsageAsync(
            String period,
            PaginationInput pagination,
            final ApiCallback<GetDailyPerSourceMTUUsage200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                getDailyPerSourceMTUUsageValidateBeforeCall(period, pagination, _callback);
        Type localVarReturnType =
                new TypeToken<GetDailyPerSourceMTUUsage200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getDailyWorkspaceMTUUsage
     *
     * @param period The start of the usage month, in the ISO-8601 format. This parameter exists in
     *     v1. (required)
     * @param pagination Pagination input for Workspace MTU counts. This parameter exists in v1.
     *     (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getDailyWorkspaceMTUUsageCall(
            String period, PaginationInput pagination, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usage/mtu/daily";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("period", period));
        }

        if (pagination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination", pagination));
        }

        final String[] localVarAccepts = {
            "application/vnd.segment.v1+json",
            "application/json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDailyWorkspaceMTUUsageValidateBeforeCall(
            String period, PaginationInput pagination, final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException(
                    "Missing the required parameter 'period' when calling"
                            + " getDailyWorkspaceMTUUsage(Async)");
        }

        // verify the required parameter 'pagination' is set
        if (pagination == null) {
            throw new ApiException(
                    "Missing the required parameter 'pagination' when calling"
                            + " getDailyWorkspaceMTUUsage(Async)");
        }

        return getDailyWorkspaceMTUUsageCall(period, pagination, _callback);
    }

    /**
     * Get Daily Workspace MTU Usage Provides daily cumulative MTU counts for a usage period.
     *
     * @param period The start of the usage month, in the ISO-8601 format. This parameter exists in
     *     v1. (required)
     * @param pagination Pagination input for Workspace MTU counts. This parameter exists in v1.
     *     (required)
     * @return GetDailyWorkspaceMTUUsage200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public GetDailyWorkspaceMTUUsage200Response getDailyWorkspaceMTUUsage(
            String period, PaginationInput pagination) throws ApiException {
        ApiResponse<GetDailyWorkspaceMTUUsage200Response> localVarResp =
                getDailyWorkspaceMTUUsageWithHttpInfo(period, pagination);
        return localVarResp.getData();
    }

    /**
     * Get Daily Workspace MTU Usage Provides daily cumulative MTU counts for a usage period.
     *
     * @param period The start of the usage month, in the ISO-8601 format. This parameter exists in
     *     v1. (required)
     * @param pagination Pagination input for Workspace MTU counts. This parameter exists in v1.
     *     (required)
     * @return ApiResponse&lt;GetDailyWorkspaceMTUUsage200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<GetDailyWorkspaceMTUUsage200Response> getDailyWorkspaceMTUUsageWithHttpInfo(
            String period, PaginationInput pagination) throws ApiException {
        okhttp3.Call localVarCall =
                getDailyWorkspaceMTUUsageValidateBeforeCall(period, pagination, null);
        Type localVarReturnType =
                new TypeToken<GetDailyWorkspaceMTUUsage200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Daily Workspace MTU Usage (asynchronously) Provides daily cumulative MTU counts for a
     * usage period.
     *
     * @param period The start of the usage month, in the ISO-8601 format. This parameter exists in
     *     v1. (required)
     * @param pagination Pagination input for Workspace MTU counts. This parameter exists in v1.
     *     (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getDailyWorkspaceMTUUsageAsync(
            String period,
            PaginationInput pagination,
            final ApiCallback<GetDailyWorkspaceMTUUsage200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                getDailyWorkspaceMTUUsageValidateBeforeCall(period, pagination, _callback);
        Type localVarReturnType =
                new TypeToken<GetDailyWorkspaceMTUUsage200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
