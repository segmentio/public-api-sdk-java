/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.api;

import com.google.gson.reflect.TypeToken;
import com.segment.publicapi.ApiCallback;
import com.segment.publicapi.ApiClient;
import com.segment.publicapi.ApiException;
import com.segment.publicapi.ApiResponse;
import com.segment.publicapi.Configuration;
import com.segment.publicapi.Pair;
import com.segment.publicapi.models.GetPersonalizationData200Response;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PersonalizationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PersonalizationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PersonalizationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getPersonalizationData
     *
     * @param spaceId (required)
     * @param entityType (required)
     * @param entityIdentifier (required)
     * @param childrenEntityType Child entity type. This parameter exists in alpha. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getPersonalizationDataCall(
            String spaceId,
            String entityType,
            String entityIdentifier,
            String childrenEntityType,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/personalization/v1/spaces/{spaceId}/{entityType}/{entityIdentifier}"
                        .replace(
                                "{" + "spaceId" + "}",
                                localVarApiClient.escapeString(spaceId.toString()))
                        .replace(
                                "{" + "entityType" + "}",
                                localVarApiClient.escapeString(entityType.toString()))
                        .replace(
                                "{" + "entityIdentifier" + "}",
                                localVarApiClient.escapeString(entityIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (childrenEntityType != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("childrenEntityType", childrenEntityType));
        }

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPersonalizationDataValidateBeforeCall(
            String spaceId,
            String entityType,
            String entityIdentifier,
            String childrenEntityType,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'spaceId' when calling"
                            + " getPersonalizationData(Async)");
        }

        // verify the required parameter 'entityType' is set
        if (entityType == null) {
            throw new ApiException(
                    "Missing the required parameter 'entityType' when calling"
                            + " getPersonalizationData(Async)");
        }

        // verify the required parameter 'entityIdentifier' is set
        if (entityIdentifier == null) {
            throw new ApiException(
                    "Missing the required parameter 'entityIdentifier' when calling"
                            + " getPersonalizationData(Async)");
        }

        return getPersonalizationDataCall(
                spaceId, entityType, entityIdentifier, childrenEntityType, _callback);
    }

    /**
     * Get Personalization Data Get Personalization Data. • This endpoint is in **Alpha** testing.
     * Please submit any feedback by sending an email to friends@segment.com. • In order to
     * successfully call this endpoint, the specified Workspace needs to have the Entities feature
     * enabled. Please reach out to your customer success manager for more information.
     *
     * @param spaceId (required)
     * @param entityType (required)
     * @param entityIdentifier (required)
     * @param childrenEntityType Child entity type. This parameter exists in alpha. (optional)
     * @return GetPersonalizationData200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public GetPersonalizationData200Response getPersonalizationData(
            String spaceId, String entityType, String entityIdentifier, String childrenEntityType)
            throws ApiException {
        ApiResponse<GetPersonalizationData200Response> localVarResp =
                getPersonalizationDataWithHttpInfo(
                        spaceId, entityType, entityIdentifier, childrenEntityType);
        return localVarResp.getData();
    }

    /**
     * Get Personalization Data Get Personalization Data. • This endpoint is in **Alpha** testing.
     * Please submit any feedback by sending an email to friends@segment.com. • In order to
     * successfully call this endpoint, the specified Workspace needs to have the Entities feature
     * enabled. Please reach out to your customer success manager for more information.
     *
     * @param spaceId (required)
     * @param entityType (required)
     * @param entityIdentifier (required)
     * @param childrenEntityType Child entity type. This parameter exists in alpha. (optional)
     * @return ApiResponse&lt;GetPersonalizationData200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<GetPersonalizationData200Response> getPersonalizationDataWithHttpInfo(
            String spaceId, String entityType, String entityIdentifier, String childrenEntityType)
            throws ApiException {
        okhttp3.Call localVarCall =
                getPersonalizationDataValidateBeforeCall(
                        spaceId, entityType, entityIdentifier, childrenEntityType, null);
        Type localVarReturnType = new TypeToken<GetPersonalizationData200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Personalization Data (asynchronously) Get Personalization Data. • This endpoint is in
     * **Alpha** testing. Please submit any feedback by sending an email to friends@segment.com. •
     * In order to successfully call this endpoint, the specified Workspace needs to have the
     * Entities feature enabled. Please reach out to your customer success manager for more
     * information.
     *
     * @param spaceId (required)
     * @param entityType (required)
     * @param entityIdentifier (required)
     * @param childrenEntityType Child entity type. This parameter exists in alpha. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getPersonalizationDataAsync(
            String spaceId,
            String entityType,
            String entityIdentifier,
            String childrenEntityType,
            final ApiCallback<GetPersonalizationData200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                getPersonalizationDataValidateBeforeCall(
                        spaceId, entityType, entityIdentifier, childrenEntityType, _callback);
        Type localVarReturnType = new TypeToken<GetPersonalizationData200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
