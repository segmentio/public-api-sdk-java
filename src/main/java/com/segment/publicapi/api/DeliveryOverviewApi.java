/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.api;

import com.google.gson.reflect.TypeToken;
import com.segment.publicapi.ApiCallback;
import com.segment.publicapi.ApiClient;
import com.segment.publicapi.ApiException;
import com.segment.publicapi.ApiResponse;
import com.segment.publicapi.Configuration;
import com.segment.publicapi.Pair;
import com.segment.publicapi.models.GetDeliveryOverviewDestMetricsBetaInput;
import com.segment.publicapi.models.GetDeliveryOverviewSourceMetricsBetaInput;
import com.segment.publicapi.models.GetEgressFailedMetricsFromDeliveryOverview200Response;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DeliveryOverviewApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DeliveryOverviewApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DeliveryOverviewApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getEgressFailedMetricsFromDeliveryOverview
     *
     * @param metrics Metrics for this Destination pipeline step. This parameter exists in beta.
     *     (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getEgressFailedMetricsFromDeliveryOverviewCall(
            GetDeliveryOverviewDestMetricsBetaInput metrics, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delivery-overview/failed-delivery";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (metrics != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metrics", metrics));
        }

        final String[] localVarAccepts = {
            "application/vnd.segment.v1beta+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEgressFailedMetricsFromDeliveryOverviewValidateBeforeCall(
            GetDeliveryOverviewDestMetricsBetaInput metrics, final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'metrics' is set
        if (metrics == null) {
            throw new ApiException(
                    "Missing the required parameter 'metrics' when calling"
                            + " getEgressFailedMetricsFromDeliveryOverview(Async)");
        }

        return getEgressFailedMetricsFromDeliveryOverviewCall(metrics, _callback);
    }

    /**
     * Get Egress Failed Metrics from Delivery Overview Get events that failed to be delivered to
     * Destination.
     *
     * @param metrics Metrics for this Destination pipeline step. This parameter exists in beta.
     *     (required)
     * @return GetEgressFailedMetricsFromDeliveryOverview200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public GetEgressFailedMetricsFromDeliveryOverview200Response
            getEgressFailedMetricsFromDeliveryOverview(
                    GetDeliveryOverviewDestMetricsBetaInput metrics) throws ApiException {
        ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response> localVarResp =
                getEgressFailedMetricsFromDeliveryOverviewWithHttpInfo(metrics);
        return localVarResp.getData();
    }

    /**
     * Get Egress Failed Metrics from Delivery Overview Get events that failed to be delivered to
     * Destination.
     *
     * @param metrics Metrics for this Destination pipeline step. This parameter exists in beta.
     *     (required)
     * @return ApiResponse&lt;GetEgressFailedMetricsFromDeliveryOverview200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response>
            getEgressFailedMetricsFromDeliveryOverviewWithHttpInfo(
                    GetDeliveryOverviewDestMetricsBetaInput metrics) throws ApiException {
        okhttp3.Call localVarCall =
                getEgressFailedMetricsFromDeliveryOverviewValidateBeforeCall(metrics, null);
        Type localVarReturnType =
                new TypeToken<GetEgressFailedMetricsFromDeliveryOverview200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Egress Failed Metrics from Delivery Overview (asynchronously) Get events that failed to
     * be delivered to Destination.
     *
     * @param metrics Metrics for this Destination pipeline step. This parameter exists in beta.
     *     (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getEgressFailedMetricsFromDeliveryOverviewAsync(
            GetDeliveryOverviewDestMetricsBetaInput metrics,
            final ApiCallback<GetEgressFailedMetricsFromDeliveryOverview200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                getEgressFailedMetricsFromDeliveryOverviewValidateBeforeCall(metrics, _callback);
        Type localVarReturnType =
                new TypeToken<GetEgressFailedMetricsFromDeliveryOverview200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getEgressSuccessMetricsFromDeliveryOverview
     *
     * @param metrics Metrics for this Destination pipeline step. This parameter exists in beta.
     *     (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getEgressSuccessMetricsFromDeliveryOverviewCall(
            GetDeliveryOverviewDestMetricsBetaInput metrics, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delivery-overview/successful-delivery";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (metrics != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metrics", metrics));
        }

        final String[] localVarAccepts = {
            "application/vnd.segment.v1beta+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEgressSuccessMetricsFromDeliveryOverviewValidateBeforeCall(
            GetDeliveryOverviewDestMetricsBetaInput metrics, final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'metrics' is set
        if (metrics == null) {
            throw new ApiException(
                    "Missing the required parameter 'metrics' when calling"
                            + " getEgressSuccessMetricsFromDeliveryOverview(Async)");
        }

        return getEgressSuccessMetricsFromDeliveryOverviewCall(metrics, _callback);
    }

    /**
     * Get Egress Success Metrics from Delivery Overview Get events successfully delivered to
     * Destination.
     *
     * @param metrics Metrics for this Destination pipeline step. This parameter exists in beta.
     *     (required)
     * @return GetEgressFailedMetricsFromDeliveryOverview200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public GetEgressFailedMetricsFromDeliveryOverview200Response
            getEgressSuccessMetricsFromDeliveryOverview(
                    GetDeliveryOverviewDestMetricsBetaInput metrics) throws ApiException {
        ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response> localVarResp =
                getEgressSuccessMetricsFromDeliveryOverviewWithHttpInfo(metrics);
        return localVarResp.getData();
    }

    /**
     * Get Egress Success Metrics from Delivery Overview Get events successfully delivered to
     * Destination.
     *
     * @param metrics Metrics for this Destination pipeline step. This parameter exists in beta.
     *     (required)
     * @return ApiResponse&lt;GetEgressFailedMetricsFromDeliveryOverview200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response>
            getEgressSuccessMetricsFromDeliveryOverviewWithHttpInfo(
                    GetDeliveryOverviewDestMetricsBetaInput metrics) throws ApiException {
        okhttp3.Call localVarCall =
                getEgressSuccessMetricsFromDeliveryOverviewValidateBeforeCall(metrics, null);
        Type localVarReturnType =
                new TypeToken<GetEgressFailedMetricsFromDeliveryOverview200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Egress Success Metrics from Delivery Overview (asynchronously) Get events successfully
     * delivered to Destination.
     *
     * @param metrics Metrics for this Destination pipeline step. This parameter exists in beta.
     *     (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getEgressSuccessMetricsFromDeliveryOverviewAsync(
            GetDeliveryOverviewDestMetricsBetaInput metrics,
            final ApiCallback<GetEgressFailedMetricsFromDeliveryOverview200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                getEgressSuccessMetricsFromDeliveryOverviewValidateBeforeCall(metrics, _callback);
        Type localVarReturnType =
                new TypeToken<GetEgressFailedMetricsFromDeliveryOverview200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getFilteredAtDestinationMetricsFromDeliveryOverview
     *
     * @param metrics Metrics for this Destination pipeline step. This parameter exists in beta.
     *     (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getFilteredAtDestinationMetricsFromDeliveryOverviewCall(
            GetDeliveryOverviewDestMetricsBetaInput metrics, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delivery-overview/filtered-at-destination";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (metrics != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metrics", metrics));
        }

        final String[] localVarAccepts = {
            "application/vnd.segment.v1beta+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFilteredAtDestinationMetricsFromDeliveryOverviewValidateBeforeCall(
            GetDeliveryOverviewDestMetricsBetaInput metrics, final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'metrics' is set
        if (metrics == null) {
            throw new ApiException(
                    "Missing the required parameter 'metrics' when calling"
                            + " getFilteredAtDestinationMetricsFromDeliveryOverview(Async)");
        }

        return getFilteredAtDestinationMetricsFromDeliveryOverviewCall(metrics, _callback);
    }

    /**
     * Get Filtered At Destination Metrics from Delivery Overview Get events that were filtered at
     * Destination.
     *
     * @param metrics Metrics for this Destination pipeline step. This parameter exists in beta.
     *     (required)
     * @return GetEgressFailedMetricsFromDeliveryOverview200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public GetEgressFailedMetricsFromDeliveryOverview200Response
            getFilteredAtDestinationMetricsFromDeliveryOverview(
                    GetDeliveryOverviewDestMetricsBetaInput metrics) throws ApiException {
        ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response> localVarResp =
                getFilteredAtDestinationMetricsFromDeliveryOverviewWithHttpInfo(metrics);
        return localVarResp.getData();
    }

    /**
     * Get Filtered At Destination Metrics from Delivery Overview Get events that were filtered at
     * Destination.
     *
     * @param metrics Metrics for this Destination pipeline step. This parameter exists in beta.
     *     (required)
     * @return ApiResponse&lt;GetEgressFailedMetricsFromDeliveryOverview200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response>
            getFilteredAtDestinationMetricsFromDeliveryOverviewWithHttpInfo(
                    GetDeliveryOverviewDestMetricsBetaInput metrics) throws ApiException {
        okhttp3.Call localVarCall =
                getFilteredAtDestinationMetricsFromDeliveryOverviewValidateBeforeCall(
                        metrics, null);
        Type localVarReturnType =
                new TypeToken<GetEgressFailedMetricsFromDeliveryOverview200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Filtered At Destination Metrics from Delivery Overview (asynchronously) Get events that
     * were filtered at Destination.
     *
     * @param metrics Metrics for this Destination pipeline step. This parameter exists in beta.
     *     (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getFilteredAtDestinationMetricsFromDeliveryOverviewAsync(
            GetDeliveryOverviewDestMetricsBetaInput metrics,
            final ApiCallback<GetEgressFailedMetricsFromDeliveryOverview200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                getFilteredAtDestinationMetricsFromDeliveryOverviewValidateBeforeCall(
                        metrics, _callback);
        Type localVarReturnType =
                new TypeToken<GetEgressFailedMetricsFromDeliveryOverview200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getFilteredAtSourceMetricsFromDeliveryOverview
     *
     * @param metrics Metrics for this Source pipeline step. This parameter exists in beta.
     *     (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getFilteredAtSourceMetricsFromDeliveryOverviewCall(
            GetDeliveryOverviewSourceMetricsBetaInput metrics, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delivery-overview/filtered-at-source";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (metrics != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metrics", metrics));
        }

        final String[] localVarAccepts = {
            "application/vnd.segment.v1beta+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFilteredAtSourceMetricsFromDeliveryOverviewValidateBeforeCall(
            GetDeliveryOverviewSourceMetricsBetaInput metrics, final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'metrics' is set
        if (metrics == null) {
            throw new ApiException(
                    "Missing the required parameter 'metrics' when calling"
                            + " getFilteredAtSourceMetricsFromDeliveryOverview(Async)");
        }

        return getFilteredAtSourceMetricsFromDeliveryOverviewCall(metrics, _callback);
    }

    /**
     * Get Filtered At Source Metrics from Delivery Overview Get events that were filtered at
     * Source.
     *
     * @param metrics Metrics for this Source pipeline step. This parameter exists in beta.
     *     (required)
     * @return GetEgressFailedMetricsFromDeliveryOverview200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public GetEgressFailedMetricsFromDeliveryOverview200Response
            getFilteredAtSourceMetricsFromDeliveryOverview(
                    GetDeliveryOverviewSourceMetricsBetaInput metrics) throws ApiException {
        ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response> localVarResp =
                getFilteredAtSourceMetricsFromDeliveryOverviewWithHttpInfo(metrics);
        return localVarResp.getData();
    }

    /**
     * Get Filtered At Source Metrics from Delivery Overview Get events that were filtered at
     * Source.
     *
     * @param metrics Metrics for this Source pipeline step. This parameter exists in beta.
     *     (required)
     * @return ApiResponse&lt;GetEgressFailedMetricsFromDeliveryOverview200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response>
            getFilteredAtSourceMetricsFromDeliveryOverviewWithHttpInfo(
                    GetDeliveryOverviewSourceMetricsBetaInput metrics) throws ApiException {
        okhttp3.Call localVarCall =
                getFilteredAtSourceMetricsFromDeliveryOverviewValidateBeforeCall(metrics, null);
        Type localVarReturnType =
                new TypeToken<GetEgressFailedMetricsFromDeliveryOverview200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Filtered At Source Metrics from Delivery Overview (asynchronously) Get events that were
     * filtered at Source.
     *
     * @param metrics Metrics for this Source pipeline step. This parameter exists in beta.
     *     (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getFilteredAtSourceMetricsFromDeliveryOverviewAsync(
            GetDeliveryOverviewSourceMetricsBetaInput metrics,
            final ApiCallback<GetEgressFailedMetricsFromDeliveryOverview200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                getFilteredAtSourceMetricsFromDeliveryOverviewValidateBeforeCall(
                        metrics, _callback);
        Type localVarReturnType =
                new TypeToken<GetEgressFailedMetricsFromDeliveryOverview200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getIngressFailedMetricsFromDeliveryOverview
     *
     * @param metrics Metrics for this Source pipeline step. This parameter exists in beta.
     *     (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getIngressFailedMetricsFromDeliveryOverviewCall(
            GetDeliveryOverviewSourceMetricsBetaInput metrics, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delivery-overview/failed-on-ingest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (metrics != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metrics", metrics));
        }

        final String[] localVarAccepts = {
            "application/vnd.segment.v1beta+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIngressFailedMetricsFromDeliveryOverviewValidateBeforeCall(
            GetDeliveryOverviewSourceMetricsBetaInput metrics, final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'metrics' is set
        if (metrics == null) {
            throw new ApiException(
                    "Missing the required parameter 'metrics' when calling"
                            + " getIngressFailedMetricsFromDeliveryOverview(Async)");
        }

        return getIngressFailedMetricsFromDeliveryOverviewCall(metrics, _callback);
    }

    /**
     * Get Ingress Failed Metrics from Delivery Overview Get events that failed on ingest.
     *
     * @param metrics Metrics for this Source pipeline step. This parameter exists in beta.
     *     (required)
     * @return GetEgressFailedMetricsFromDeliveryOverview200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public GetEgressFailedMetricsFromDeliveryOverview200Response
            getIngressFailedMetricsFromDeliveryOverview(
                    GetDeliveryOverviewSourceMetricsBetaInput metrics) throws ApiException {
        ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response> localVarResp =
                getIngressFailedMetricsFromDeliveryOverviewWithHttpInfo(metrics);
        return localVarResp.getData();
    }

    /**
     * Get Ingress Failed Metrics from Delivery Overview Get events that failed on ingest.
     *
     * @param metrics Metrics for this Source pipeline step. This parameter exists in beta.
     *     (required)
     * @return ApiResponse&lt;GetEgressFailedMetricsFromDeliveryOverview200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response>
            getIngressFailedMetricsFromDeliveryOverviewWithHttpInfo(
                    GetDeliveryOverviewSourceMetricsBetaInput metrics) throws ApiException {
        okhttp3.Call localVarCall =
                getIngressFailedMetricsFromDeliveryOverviewValidateBeforeCall(metrics, null);
        Type localVarReturnType =
                new TypeToken<GetEgressFailedMetricsFromDeliveryOverview200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Ingress Failed Metrics from Delivery Overview (asynchronously) Get events that failed on
     * ingest.
     *
     * @param metrics Metrics for this Source pipeline step. This parameter exists in beta.
     *     (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getIngressFailedMetricsFromDeliveryOverviewAsync(
            GetDeliveryOverviewSourceMetricsBetaInput metrics,
            final ApiCallback<GetEgressFailedMetricsFromDeliveryOverview200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                getIngressFailedMetricsFromDeliveryOverviewValidateBeforeCall(metrics, _callback);
        Type localVarReturnType =
                new TypeToken<GetEgressFailedMetricsFromDeliveryOverview200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getIngressSuccessMetricsFromDeliveryOverview
     *
     * @param metrics Metrics for this Source pipeline step. This parameter exists in beta.
     *     (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getIngressSuccessMetricsFromDeliveryOverviewCall(
            GetDeliveryOverviewSourceMetricsBetaInput metrics, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delivery-overview/successfully-received";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (metrics != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metrics", metrics));
        }

        final String[] localVarAccepts = {
            "application/vnd.segment.v1beta+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIngressSuccessMetricsFromDeliveryOverviewValidateBeforeCall(
            GetDeliveryOverviewSourceMetricsBetaInput metrics, final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'metrics' is set
        if (metrics == null) {
            throw new ApiException(
                    "Missing the required parameter 'metrics' when calling"
                            + " getIngressSuccessMetricsFromDeliveryOverview(Async)");
        }

        return getIngressSuccessMetricsFromDeliveryOverviewCall(metrics, _callback);
    }

    /**
     * Get Ingress Success Metrics from Delivery Overview Get events that were successfully received
     * by Segment.
     *
     * @param metrics Metrics for this Source pipeline step. This parameter exists in beta.
     *     (required)
     * @return GetEgressFailedMetricsFromDeliveryOverview200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public GetEgressFailedMetricsFromDeliveryOverview200Response
            getIngressSuccessMetricsFromDeliveryOverview(
                    GetDeliveryOverviewSourceMetricsBetaInput metrics) throws ApiException {
        ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response> localVarResp =
                getIngressSuccessMetricsFromDeliveryOverviewWithHttpInfo(metrics);
        return localVarResp.getData();
    }

    /**
     * Get Ingress Success Metrics from Delivery Overview Get events that were successfully received
     * by Segment.
     *
     * @param metrics Metrics for this Source pipeline step. This parameter exists in beta.
     *     (required)
     * @return ApiResponse&lt;GetEgressFailedMetricsFromDeliveryOverview200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response>
            getIngressSuccessMetricsFromDeliveryOverviewWithHttpInfo(
                    GetDeliveryOverviewSourceMetricsBetaInput metrics) throws ApiException {
        okhttp3.Call localVarCall =
                getIngressSuccessMetricsFromDeliveryOverviewValidateBeforeCall(metrics, null);
        Type localVarReturnType =
                new TypeToken<GetEgressFailedMetricsFromDeliveryOverview200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Ingress Success Metrics from Delivery Overview (asynchronously) Get events that were
     * successfully received by Segment.
     *
     * @param metrics Metrics for this Source pipeline step. This parameter exists in beta.
     *     (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getIngressSuccessMetricsFromDeliveryOverviewAsync(
            GetDeliveryOverviewSourceMetricsBetaInput metrics,
            final ApiCallback<GetEgressFailedMetricsFromDeliveryOverview200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                getIngressSuccessMetricsFromDeliveryOverviewValidateBeforeCall(metrics, _callback);
        Type localVarReturnType =
                new TypeToken<GetEgressFailedMetricsFromDeliveryOverview200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
