/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.api;

import com.segment.publicapi.ApiCallback;
import com.segment.publicapi.ApiClient;
import com.segment.publicapi.ApiException;
import com.segment.publicapi.ApiResponse;
import com.segment.publicapi.Configuration;
import com.segment.publicapi.Pair;
import com.segment.publicapi.models.CreateFilterInput;
import com.segment.publicapi.models.PaginationInput;
import com.segment.publicapi.models.UpdateFilterByIdInput;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FiltersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FiltersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FiltersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createFilter
     *
     * @param integrationId (required)
     * @param createFilterInput (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createFilterCall(
            String integrationId, CreateFilterInput createFilterInput, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createFilterInput;

        // create path and map variables
        String localVarPath =
                "/filters/create/{integrationId}"
                        .replace(
                                "{" + "integrationId" + "}",
                                localVarApiClient.escapeString(integrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/vnd.segment.v1alpha+json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFilterValidateBeforeCall(
            String integrationId, CreateFilterInput createFilterInput, final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'integrationId' is set
        if (integrationId == null) {
            throw new ApiException(
                    "Missing the required parameter 'integrationId' when calling"
                            + " createFilter(Async)");
        }

        // verify the required parameter 'createFilterInput' is set
        if (createFilterInput == null) {
            throw new ApiException(
                    "Missing the required parameter 'createFilterInput' when calling"
                            + " createFilter(Async)");
        }

        return createFilterCall(integrationId, createFilterInput, _callback);
    }

    /**
     * Create Filter Creates a filter. • When called, this endpoint may generate the &#x60;Filter
     * Created&#x60; event in the [audit trail](/tag/Audit-Trail).
     *
     * @param integrationId (required)
     * @param createFilterInput (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public void createFilter(String integrationId, CreateFilterInput createFilterInput)
            throws ApiException {
        createFilterWithHttpInfo(integrationId, createFilterInput);
    }

    /**
     * Create Filter Creates a filter. • When called, this endpoint may generate the &#x60;Filter
     * Created&#x60; event in the [audit trail](/tag/Audit-Trail).
     *
     * @param integrationId (required)
     * @param createFilterInput (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> createFilterWithHttpInfo(
            String integrationId, CreateFilterInput createFilterInput) throws ApiException {
        okhttp3.Call localVarCall =
                createFilterValidateBeforeCall(integrationId, createFilterInput, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create Filter (asynchronously) Creates a filter. • When called, this endpoint may generate
     * the &#x60;Filter Created&#x60; event in the [audit trail](/tag/Audit-Trail).
     *
     * @param integrationId (required)
     * @param createFilterInput (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createFilterAsync(
            String integrationId,
            CreateFilterInput createFilterInput,
            final ApiCallback<Void> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                createFilterValidateBeforeCall(integrationId, createFilterInput, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    /**
     * Build call for deleteFilterById
     *
     * @param id (required)
     * @param productArea The product area of the filter This parameter exists in alpha. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteFilterByIdCall(
            String id, String productArea, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/filters/delete/{id}"
                        .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (productArea != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("productArea", productArea));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "DELETE",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFilterByIdValidateBeforeCall(
            String id, String productArea, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling deleteFilterById(Async)");
        }

        // verify the required parameter 'productArea' is set
        if (productArea == null) {
            throw new ApiException(
                    "Missing the required parameter 'productArea' when calling"
                            + " deleteFilterById(Async)");
        }

        return deleteFilterByIdCall(id, productArea, _callback);
    }

    /**
     * Delete Filter By Id Deletes a filter by id. • When called, this endpoint may generate the
     * &#x60;Filter Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).
     *
     * @param id (required)
     * @param productArea The product area of the filter This parameter exists in alpha. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public void deleteFilterById(String id, String productArea) throws ApiException {
        deleteFilterByIdWithHttpInfo(id, productArea);
    }

    /**
     * Delete Filter By Id Deletes a filter by id. • When called, this endpoint may generate the
     * &#x60;Filter Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).
     *
     * @param id (required)
     * @param productArea The product area of the filter This parameter exists in alpha. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> deleteFilterByIdWithHttpInfo(String id, String productArea)
            throws ApiException {
        okhttp3.Call localVarCall = deleteFilterByIdValidateBeforeCall(id, productArea, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Filter By Id (asynchronously) Deletes a filter by id. • When called, this endpoint may
     * generate the &#x60;Filter Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).
     *
     * @param id (required)
     * @param productArea The product area of the filter This parameter exists in alpha. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteFilterByIdAsync(
            String id, String productArea, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFilterByIdValidateBeforeCall(id, productArea, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    /**
     * Build call for getFilterById
     *
     * @param id (required)
     * @param productArea The product area of the filter, which should be spaces (endpoint table
     *     should be able to determine the resource) This parameter exists in alpha. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getFilterByIdCall(
            String id, String productArea, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/filters/filter/{id}"
                        .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (productArea != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("productArea", productArea));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFilterByIdValidateBeforeCall(
            String id, String productArea, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling getFilterById(Async)");
        }

        // verify the required parameter 'productArea' is set
        if (productArea == null) {
            throw new ApiException(
                    "Missing the required parameter 'productArea' when calling"
                            + " getFilterById(Async)");
        }

        return getFilterByIdCall(id, productArea, _callback);
    }

    /**
     * Get Filter By Id Gets a filter by id.
     *
     * @param id (required)
     * @param productArea The product area of the filter, which should be spaces (endpoint table
     *     should be able to determine the resource) This parameter exists in alpha. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public void getFilterById(String id, String productArea) throws ApiException {
        getFilterByIdWithHttpInfo(id, productArea);
    }

    /**
     * Get Filter By Id Gets a filter by id.
     *
     * @param id (required)
     * @param productArea The product area of the filter, which should be spaces (endpoint table
     *     should be able to determine the resource) This parameter exists in alpha. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> getFilterByIdWithHttpInfo(String id, String productArea)
            throws ApiException {
        okhttp3.Call localVarCall = getFilterByIdValidateBeforeCall(id, productArea, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get Filter By Id (asynchronously) Gets a filter by id.
     *
     * @param id (required)
     * @param productArea The product area of the filter, which should be spaces (endpoint table
     *     should be able to determine the resource) This parameter exists in alpha. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getFilterByIdAsync(
            String id, String productArea, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFilterByIdValidateBeforeCall(id, productArea, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    /**
     * Build call for listFiltersByIntegrationId
     *
     * @param integrationId (required)
     * @param productArea The product area of the filter, which should be spaces (endpoint table
     *     should be able to determine the resource) This parameter exists in alpha. (required)
     * @param pagination Pagination parameters. This parameter exists in alpha. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listFiltersByIntegrationIdCall(
            String integrationId,
            String productArea,
            PaginationInput pagination,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/filters/{integrationId}"
                        .replace(
                                "{" + "integrationId" + "}",
                                localVarApiClient.escapeString(integrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (productArea != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("productArea", productArea));
        }

        if (pagination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination", pagination));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFiltersByIntegrationIdValidateBeforeCall(
            String integrationId,
            String productArea,
            PaginationInput pagination,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'integrationId' is set
        if (integrationId == null) {
            throw new ApiException(
                    "Missing the required parameter 'integrationId' when calling"
                            + " listFiltersByIntegrationId(Async)");
        }

        // verify the required parameter 'productArea' is set
        if (productArea == null) {
            throw new ApiException(
                    "Missing the required parameter 'productArea' when calling"
                            + " listFiltersByIntegrationId(Async)");
        }

        return listFiltersByIntegrationIdCall(integrationId, productArea, pagination, _callback);
    }

    /**
     * List Filters By Integration Id Lists filters by integration id.
     *
     * @param integrationId (required)
     * @param productArea The product area of the filter, which should be spaces (endpoint table
     *     should be able to determine the resource) This parameter exists in alpha. (required)
     * @param pagination Pagination parameters. This parameter exists in alpha. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public void listFiltersByIntegrationId(
            String integrationId, String productArea, PaginationInput pagination)
            throws ApiException {
        listFiltersByIntegrationIdWithHttpInfo(integrationId, productArea, pagination);
    }

    /**
     * List Filters By Integration Id Lists filters by integration id.
     *
     * @param integrationId (required)
     * @param productArea The product area of the filter, which should be spaces (endpoint table
     *     should be able to determine the resource) This parameter exists in alpha. (required)
     * @param pagination Pagination parameters. This parameter exists in alpha. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> listFiltersByIntegrationIdWithHttpInfo(
            String integrationId, String productArea, PaginationInput pagination)
            throws ApiException {
        okhttp3.Call localVarCall =
                listFiltersByIntegrationIdValidateBeforeCall(
                        integrationId, productArea, pagination, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * List Filters By Integration Id (asynchronously) Lists filters by integration id.
     *
     * @param integrationId (required)
     * @param productArea The product area of the filter, which should be spaces (endpoint table
     *     should be able to determine the resource) This parameter exists in alpha. (required)
     * @param pagination Pagination parameters. This parameter exists in alpha. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listFiltersByIntegrationIdAsync(
            String integrationId,
            String productArea,
            PaginationInput pagination,
            final ApiCallback<Void> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                listFiltersByIntegrationIdValidateBeforeCall(
                        integrationId, productArea, pagination, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    /**
     * Build call for updateFilterById
     *
     * @param id (required)
     * @param updateFilterByIdInput (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateFilterByIdCall(
            String id, UpdateFilterByIdInput updateFilterByIdInput, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateFilterByIdInput;

        // create path and map variables
        String localVarPath =
                "/filters/update/{id}"
                        .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/vnd.segment.v1alpha+json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "PATCH",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFilterByIdValidateBeforeCall(
            String id, UpdateFilterByIdInput updateFilterByIdInput, final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling updateFilterById(Async)");
        }

        // verify the required parameter 'updateFilterByIdInput' is set
        if (updateFilterByIdInput == null) {
            throw new ApiException(
                    "Missing the required parameter 'updateFilterByIdInput' when calling"
                            + " updateFilterById(Async)");
        }

        return updateFilterByIdCall(id, updateFilterByIdInput, _callback);
    }

    /**
     * Update Filter By Id Updates a filter by id. • When called, this endpoint may generate the
     * &#x60;Filter Updated&#x60; event in the [audit trail](/tag/Audit-Trail).
     *
     * @param id (required)
     * @param updateFilterByIdInput (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public void updateFilterById(String id, UpdateFilterByIdInput updateFilterByIdInput)
            throws ApiException {
        updateFilterByIdWithHttpInfo(id, updateFilterByIdInput);
    }

    /**
     * Update Filter By Id Updates a filter by id. • When called, this endpoint may generate the
     * &#x60;Filter Updated&#x60; event in the [audit trail](/tag/Audit-Trail).
     *
     * @param id (required)
     * @param updateFilterByIdInput (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<Void> updateFilterByIdWithHttpInfo(
            String id, UpdateFilterByIdInput updateFilterByIdInput) throws ApiException {
        okhttp3.Call localVarCall =
                updateFilterByIdValidateBeforeCall(id, updateFilterByIdInput, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Filter By Id (asynchronously) Updates a filter by id. • When called, this endpoint may
     * generate the &#x60;Filter Updated&#x60; event in the [audit trail](/tag/Audit-Trail).
     *
     * @param id (required)
     * @param updateFilterByIdInput (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateFilterByIdAsync(
            String id,
            UpdateFilterByIdInput updateFilterByIdInput,
            final ApiCallback<Void> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                updateFilterByIdValidateBeforeCall(id, updateFilterByIdInput, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
