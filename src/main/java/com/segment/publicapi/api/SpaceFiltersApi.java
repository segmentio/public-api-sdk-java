/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.api;

import com.google.gson.reflect.TypeToken;
import com.segment.publicapi.ApiCallback;
import com.segment.publicapi.ApiClient;
import com.segment.publicapi.ApiException;
import com.segment.publicapi.ApiResponse;
import com.segment.publicapi.Configuration;
import com.segment.publicapi.Pair;
import com.segment.publicapi.models.CreateFilter200Response;
import com.segment.publicapi.models.CreateFilterInput;
import com.segment.publicapi.models.DeleteFilterById200Response;
import com.segment.publicapi.models.GetFilterById200Response;
import com.segment.publicapi.models.ListFiltersByIntegrationId200Response;
import com.segment.publicapi.models.ListFiltersPaginationInput;
import com.segment.publicapi.models.UpdateFilterById200Response;
import com.segment.publicapi.models.UpdateFilterByIdInput;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SpaceFiltersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SpaceFiltersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SpaceFiltersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createFilter
     *
     * @param createFilterInput (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createFilterCall(
            CreateFilterInput createFilterInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createFilterInput;

        // create path and map variables
        String localVarPath = "/filters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/vnd.segment.v1alpha+json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFilterValidateBeforeCall(
            CreateFilterInput createFilterInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createFilterInput' is set
        if (createFilterInput == null) {
            throw new ApiException(
                    "Missing the required parameter 'createFilterInput' when calling"
                            + " createFilter(Async)");
        }

        return createFilterCall(createFilterInput, _callback);
    }

    /**
     * Create Filter Creates a filter. • This endpoint is in **Alpha** testing. Please submit any
     * feedback by sending an email to friends@segment.com. • In order to successfully call this
     * endpoint, the specified Workspace needs to have the Space Filters feature enabled. Please
     * reach out to your customer success manager for more information. • When called, this endpoint
     * may generate the &#x60;Filter Created&#x60; event in the [audit trail](/tag/Audit-Trail).
     *
     * @param createFilterInput (required)
     * @return CreateFilter200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public CreateFilter200Response createFilter(CreateFilterInput createFilterInput)
            throws ApiException {
        ApiResponse<CreateFilter200Response> localVarResp =
                createFilterWithHttpInfo(createFilterInput);
        return localVarResp.getData();
    }

    /**
     * Create Filter Creates a filter. • This endpoint is in **Alpha** testing. Please submit any
     * feedback by sending an email to friends@segment.com. • In order to successfully call this
     * endpoint, the specified Workspace needs to have the Space Filters feature enabled. Please
     * reach out to your customer success manager for more information. • When called, this endpoint
     * may generate the &#x60;Filter Created&#x60; event in the [audit trail](/tag/Audit-Trail).
     *
     * @param createFilterInput (required)
     * @return ApiResponse&lt;CreateFilter200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CreateFilter200Response> createFilterWithHttpInfo(
            CreateFilterInput createFilterInput) throws ApiException {
        okhttp3.Call localVarCall = createFilterValidateBeforeCall(createFilterInput, null);
        Type localVarReturnType = new TypeToken<CreateFilter200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Filter (asynchronously) Creates a filter. • This endpoint is in **Alpha** testing.
     * Please submit any feedback by sending an email to friends@segment.com. • In order to
     * successfully call this endpoint, the specified Workspace needs to have the Space Filters
     * feature enabled. Please reach out to your customer success manager for more information. •
     * When called, this endpoint may generate the &#x60;Filter Created&#x60; event in the [audit
     * trail](/tag/Audit-Trail).
     *
     * @param createFilterInput (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createFilterAsync(
            CreateFilterInput createFilterInput,
            final ApiCallback<CreateFilter200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = createFilterValidateBeforeCall(createFilterInput, _callback);
        Type localVarReturnType = new TypeToken<CreateFilter200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for deleteFilterById
     *
     * @param id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteFilterByIdCall(String id, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/filters/{id}"
                        .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "DELETE",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFilterByIdValidateBeforeCall(String id, final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling deleteFilterById(Async)");
        }

        return deleteFilterByIdCall(id, _callback);
    }

    /**
     * Delete Filter By Id Deletes a filter by id. • This endpoint is in **Alpha** testing. Please
     * submit any feedback by sending an email to friends@segment.com. • In order to successfully
     * call this endpoint, the specified Workspace needs to have the Space Filters feature enabled.
     * Please reach out to your customer success manager for more information. • When called, this
     * endpoint may generate the &#x60;Filter Deleted&#x60; event in the [audit
     * trail](/tag/Audit-Trail).
     *
     * @param id (required)
     * @return DeleteFilterById200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public DeleteFilterById200Response deleteFilterById(String id) throws ApiException {
        ApiResponse<DeleteFilterById200Response> localVarResp = deleteFilterByIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete Filter By Id Deletes a filter by id. • This endpoint is in **Alpha** testing. Please
     * submit any feedback by sending an email to friends@segment.com. • In order to successfully
     * call this endpoint, the specified Workspace needs to have the Space Filters feature enabled.
     * Please reach out to your customer success manager for more information. • When called, this
     * endpoint may generate the &#x60;Filter Deleted&#x60; event in the [audit
     * trail](/tag/Audit-Trail).
     *
     * @param id (required)
     * @return ApiResponse&lt;DeleteFilterById200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<DeleteFilterById200Response> deleteFilterByIdWithHttpInfo(String id)
            throws ApiException {
        okhttp3.Call localVarCall = deleteFilterByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DeleteFilterById200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Filter By Id (asynchronously) Deletes a filter by id. • This endpoint is in **Alpha**
     * testing. Please submit any feedback by sending an email to friends@segment.com. • In order to
     * successfully call this endpoint, the specified Workspace needs to have the Space Filters
     * feature enabled. Please reach out to your customer success manager for more information. •
     * When called, this endpoint may generate the &#x60;Filter Deleted&#x60; event in the [audit
     * trail](/tag/Audit-Trail).
     *
     * @param id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteFilterByIdAsync(
            String id, final ApiCallback<DeleteFilterById200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = deleteFilterByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DeleteFilterById200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getFilterById
     *
     * @param id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getFilterByIdCall(String id, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/filters/{id}"
                        .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFilterByIdValidateBeforeCall(String id, final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling getFilterById(Async)");
        }

        return getFilterByIdCall(id, _callback);
    }

    /**
     * Get Filter By Id Gets a filter by id. • This endpoint is in **Alpha** testing. Please submit
     * any feedback by sending an email to friends@segment.com. • In order to successfully call this
     * endpoint, the specified Workspace needs to have the Space Filters feature enabled. Please
     * reach out to your customer success manager for more information.
     *
     * @param id (required)
     * @return GetFilterById200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public GetFilterById200Response getFilterById(String id) throws ApiException {
        ApiResponse<GetFilterById200Response> localVarResp = getFilterByIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Filter By Id Gets a filter by id. • This endpoint is in **Alpha** testing. Please submit
     * any feedback by sending an email to friends@segment.com. • In order to successfully call this
     * endpoint, the specified Workspace needs to have the Space Filters feature enabled. Please
     * reach out to your customer success manager for more information.
     *
     * @param id (required)
     * @return ApiResponse&lt;GetFilterById200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<GetFilterById200Response> getFilterByIdWithHttpInfo(String id)
            throws ApiException {
        okhttp3.Call localVarCall = getFilterByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<GetFilterById200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Filter By Id (asynchronously) Gets a filter by id. • This endpoint is in **Alpha**
     * testing. Please submit any feedback by sending an email to friends@segment.com. • In order to
     * successfully call this endpoint, the specified Workspace needs to have the Space Filters
     * feature enabled. Please reach out to your customer success manager for more information.
     *
     * @param id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getFilterByIdAsync(
            String id, final ApiCallback<GetFilterById200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFilterByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<GetFilterById200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for listFiltersByIntegrationId
     *
     * @param integrationId The integration id used to fetch filters. This parameter exists in
     *     alpha. (required)
     * @param pagination Pagination parameters. This parameter exists in alpha. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listFiltersByIntegrationIdCall(
            String integrationId,
            ListFiltersPaginationInput pagination,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/filters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (integrationId != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("integrationId", integrationId));
        }

        if (pagination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination", pagination));
        }

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFiltersByIntegrationIdValidateBeforeCall(
            String integrationId,
            ListFiltersPaginationInput pagination,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'integrationId' is set
        if (integrationId == null) {
            throw new ApiException(
                    "Missing the required parameter 'integrationId' when calling"
                            + " listFiltersByIntegrationId(Async)");
        }

        return listFiltersByIntegrationIdCall(integrationId, pagination, _callback);
    }

    /**
     * List Filters By Integration Id Lists filters by Integration id. • This endpoint is in
     * **Alpha** testing. Please submit any feedback by sending an email to friends@segment.com. •
     * In order to successfully call this endpoint, the specified Workspace needs to have the Space
     * Filters feature enabled. Please reach out to your customer success manager for more
     * information.
     *
     * @param integrationId The integration id used to fetch filters. This parameter exists in
     *     alpha. (required)
     * @param pagination Pagination parameters. This parameter exists in alpha. (optional)
     * @return ListFiltersByIntegrationId200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ListFiltersByIntegrationId200Response listFiltersByIntegrationId(
            String integrationId, ListFiltersPaginationInput pagination) throws ApiException {
        ApiResponse<ListFiltersByIntegrationId200Response> localVarResp =
                listFiltersByIntegrationIdWithHttpInfo(integrationId, pagination);
        return localVarResp.getData();
    }

    /**
     * List Filters By Integration Id Lists filters by Integration id. • This endpoint is in
     * **Alpha** testing. Please submit any feedback by sending an email to friends@segment.com. •
     * In order to successfully call this endpoint, the specified Workspace needs to have the Space
     * Filters feature enabled. Please reach out to your customer success manager for more
     * information.
     *
     * @param integrationId The integration id used to fetch filters. This parameter exists in
     *     alpha. (required)
     * @param pagination Pagination parameters. This parameter exists in alpha. (optional)
     * @return ApiResponse&lt;ListFiltersByIntegrationId200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ListFiltersByIntegrationId200Response>
            listFiltersByIntegrationIdWithHttpInfo(
                    String integrationId, ListFiltersPaginationInput pagination)
                    throws ApiException {
        okhttp3.Call localVarCall =
                listFiltersByIntegrationIdValidateBeforeCall(integrationId, pagination, null);
        Type localVarReturnType =
                new TypeToken<ListFiltersByIntegrationId200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Filters By Integration Id (asynchronously) Lists filters by Integration id. • This
     * endpoint is in **Alpha** testing. Please submit any feedback by sending an email to
     * friends@segment.com. • In order to successfully call this endpoint, the specified Workspace
     * needs to have the Space Filters feature enabled. Please reach out to your customer success
     * manager for more information.
     *
     * @param integrationId The integration id used to fetch filters. This parameter exists in
     *     alpha. (required)
     * @param pagination Pagination parameters. This parameter exists in alpha. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listFiltersByIntegrationIdAsync(
            String integrationId,
            ListFiltersPaginationInput pagination,
            final ApiCallback<ListFiltersByIntegrationId200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                listFiltersByIntegrationIdValidateBeforeCall(integrationId, pagination, _callback);
        Type localVarReturnType =
                new TypeToken<ListFiltersByIntegrationId200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for updateFilterById
     *
     * @param id (required)
     * @param updateFilterByIdInput (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateFilterByIdCall(
            String id, UpdateFilterByIdInput updateFilterByIdInput, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateFilterByIdInput;

        // create path and map variables
        String localVarPath =
                "/filters/{id}"
                        .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/vnd.segment.v1alpha+json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "PATCH",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFilterByIdValidateBeforeCall(
            String id, UpdateFilterByIdInput updateFilterByIdInput, final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling updateFilterById(Async)");
        }

        // verify the required parameter 'updateFilterByIdInput' is set
        if (updateFilterByIdInput == null) {
            throw new ApiException(
                    "Missing the required parameter 'updateFilterByIdInput' when calling"
                            + " updateFilterById(Async)");
        }

        return updateFilterByIdCall(id, updateFilterByIdInput, _callback);
    }

    /**
     * Update Filter By Id Updates a filter by id and replaces the existing filter. • This endpoint
     * is in **Alpha** testing. Please submit any feedback by sending an email to
     * friends@segment.com. • In order to successfully call this endpoint, the specified Workspace
     * needs to have the Space Filters feature enabled. Please reach out to your customer success
     * manager for more information. • When called, this endpoint may generate the &#x60;Filter
     * Updated&#x60; event in the [audit trail](/tag/Audit-Trail).
     *
     * @param id (required)
     * @param updateFilterByIdInput (required)
     * @return UpdateFilterById200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public UpdateFilterById200Response updateFilterById(
            String id, UpdateFilterByIdInput updateFilterByIdInput) throws ApiException {
        ApiResponse<UpdateFilterById200Response> localVarResp =
                updateFilterByIdWithHttpInfo(id, updateFilterByIdInput);
        return localVarResp.getData();
    }

    /**
     * Update Filter By Id Updates a filter by id and replaces the existing filter. • This endpoint
     * is in **Alpha** testing. Please submit any feedback by sending an email to
     * friends@segment.com. • In order to successfully call this endpoint, the specified Workspace
     * needs to have the Space Filters feature enabled. Please reach out to your customer success
     * manager for more information. • When called, this endpoint may generate the &#x60;Filter
     * Updated&#x60; event in the [audit trail](/tag/Audit-Trail).
     *
     * @param id (required)
     * @param updateFilterByIdInput (required)
     * @return ApiResponse&lt;UpdateFilterById200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<UpdateFilterById200Response> updateFilterByIdWithHttpInfo(
            String id, UpdateFilterByIdInput updateFilterByIdInput) throws ApiException {
        okhttp3.Call localVarCall =
                updateFilterByIdValidateBeforeCall(id, updateFilterByIdInput, null);
        Type localVarReturnType = new TypeToken<UpdateFilterById200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Filter By Id (asynchronously) Updates a filter by id and replaces the existing filter.
     * • This endpoint is in **Alpha** testing. Please submit any feedback by sending an email to
     * friends@segment.com. • In order to successfully call this endpoint, the specified Workspace
     * needs to have the Space Filters feature enabled. Please reach out to your customer success
     * manager for more information. • When called, this endpoint may generate the &#x60;Filter
     * Updated&#x60; event in the [audit trail](/tag/Audit-Trail).
     *
     * @param id (required)
     * @param updateFilterByIdInput (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateFilterByIdAsync(
            String id,
            UpdateFilterByIdInput updateFilterByIdInput,
            final ApiCallback<UpdateFilterById200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                updateFilterByIdValidateBeforeCall(id, updateFilterByIdInput, _callback);
        Type localVarReturnType = new TypeToken<UpdateFilterById200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
