/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.api;

import com.google.gson.reflect.TypeToken;
import com.segment.publicapi.ApiCallback;
import com.segment.publicapi.ApiClient;
import com.segment.publicapi.ApiException;
import com.segment.publicapi.ApiResponse;
import com.segment.publicapi.Configuration;
import com.segment.publicapi.Pair;
import com.segment.publicapi.models.CreateLivePlugin200Response;
import com.segment.publicapi.models.CreateLivePluginAlphaInput;
import com.segment.publicapi.models.DeleteLivePluginCode200Response;
import com.segment.publicapi.models.GetLatestFromLivePlugins200Response;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LivePluginsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LivePluginsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LivePluginsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createLivePlugin
     *
     * @param sourceId (required)
     * @param createLivePluginAlphaInput (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createLivePluginCall(
            String sourceId,
            CreateLivePluginAlphaInput createLivePluginAlphaInput,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createLivePluginAlphaInput;

        // create path and map variables
        String localVarPath =
                "/sources/{sourceId}/live-plugins/create"
                        .replace(
                                "{" + "sourceId" + "}",
                                localVarApiClient.escapeString(sourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/vnd.segment.v1alpha+json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLivePluginValidateBeforeCall(
            String sourceId,
            CreateLivePluginAlphaInput createLivePluginAlphaInput,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'sourceId' is set
        if (sourceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'sourceId' when calling"
                            + " createLivePlugin(Async)");
        }

        // verify the required parameter 'createLivePluginAlphaInput' is set
        if (createLivePluginAlphaInput == null) {
            throw new ApiException(
                    "Missing the required parameter 'createLivePluginAlphaInput' when calling"
                            + " createLivePlugin(Async)");
        }

        return createLivePluginCall(sourceId, createLivePluginAlphaInput, _callback);
    }

    /**
     * Create Live Plugin Creates or updates a Live Plugin for your Source with given code. • This
     * endpoint is in **Alpha** testing. Please submit any feedback by sending an email to
     * friends@segment.com. • In order to successfully call this endpoint, the specified Workspace
     * needs to have the Live Plugins feature enabled. Please reach out to your customer success
     * manager for more information.
     *
     * @param sourceId (required)
     * @param createLivePluginAlphaInput (required)
     * @return CreateLivePlugin200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public CreateLivePlugin200Response createLivePlugin(
            String sourceId, CreateLivePluginAlphaInput createLivePluginAlphaInput)
            throws ApiException {
        ApiResponse<CreateLivePlugin200Response> localVarResp =
                createLivePluginWithHttpInfo(sourceId, createLivePluginAlphaInput);
        return localVarResp.getData();
    }

    /**
     * Create Live Plugin Creates or updates a Live Plugin for your Source with given code. • This
     * endpoint is in **Alpha** testing. Please submit any feedback by sending an email to
     * friends@segment.com. • In order to successfully call this endpoint, the specified Workspace
     * needs to have the Live Plugins feature enabled. Please reach out to your customer success
     * manager for more information.
     *
     * @param sourceId (required)
     * @param createLivePluginAlphaInput (required)
     * @return ApiResponse&lt;CreateLivePlugin200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CreateLivePlugin200Response> createLivePluginWithHttpInfo(
            String sourceId, CreateLivePluginAlphaInput createLivePluginAlphaInput)
            throws ApiException {
        okhttp3.Call localVarCall =
                createLivePluginValidateBeforeCall(sourceId, createLivePluginAlphaInput, null);
        Type localVarReturnType = new TypeToken<CreateLivePlugin200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Live Plugin (asynchronously) Creates or updates a Live Plugin for your Source with
     * given code. • This endpoint is in **Alpha** testing. Please submit any feedback by sending an
     * email to friends@segment.com. • In order to successfully call this endpoint, the specified
     * Workspace needs to have the Live Plugins feature enabled. Please reach out to your customer
     * success manager for more information.
     *
     * @param sourceId (required)
     * @param createLivePluginAlphaInput (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createLivePluginAsync(
            String sourceId,
            CreateLivePluginAlphaInput createLivePluginAlphaInput,
            final ApiCallback<CreateLivePlugin200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                createLivePluginValidateBeforeCall(sourceId, createLivePluginAlphaInput, _callback);
        Type localVarReturnType = new TypeToken<CreateLivePlugin200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for deleteLivePluginCode
     *
     * @param sourceId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteLivePluginCodeCall(String sourceId, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/sources/{sourceId}/live-plugins/delete-code"
                        .replace(
                                "{" + "sourceId" + "}",
                                localVarApiClient.escapeString(sourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "DELETE",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteLivePluginCodeValidateBeforeCall(
            String sourceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceId' is set
        if (sourceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'sourceId' when calling"
                            + " deleteLivePluginCode(Async)");
        }

        return deleteLivePluginCodeCall(sourceId, _callback);
    }

    /**
     * Delete Live Plugin Code Delete the Live Plugin code for a Source. This will not disable Live
     * Plugins for the Source, but will remove any existing code. • This endpoint is in **Alpha**
     * testing. Please submit any feedback by sending an email to friends@segment.com. • In order to
     * successfully call this endpoint, the specified Workspace needs to have the Live Plugins
     * feature enabled. Please reach out to your customer success manager for more information.
     *
     * @param sourceId (required)
     * @return DeleteLivePluginCode200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public DeleteLivePluginCode200Response deleteLivePluginCode(String sourceId)
            throws ApiException {
        ApiResponse<DeleteLivePluginCode200Response> localVarResp =
                deleteLivePluginCodeWithHttpInfo(sourceId);
        return localVarResp.getData();
    }

    /**
     * Delete Live Plugin Code Delete the Live Plugin code for a Source. This will not disable Live
     * Plugins for the Source, but will remove any existing code. • This endpoint is in **Alpha**
     * testing. Please submit any feedback by sending an email to friends@segment.com. • In order to
     * successfully call this endpoint, the specified Workspace needs to have the Live Plugins
     * feature enabled. Please reach out to your customer success manager for more information.
     *
     * @param sourceId (required)
     * @return ApiResponse&lt;DeleteLivePluginCode200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<DeleteLivePluginCode200Response> deleteLivePluginCodeWithHttpInfo(
            String sourceId) throws ApiException {
        okhttp3.Call localVarCall = deleteLivePluginCodeValidateBeforeCall(sourceId, null);
        Type localVarReturnType = new TypeToken<DeleteLivePluginCode200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Live Plugin Code (asynchronously) Delete the Live Plugin code for a Source. This will
     * not disable Live Plugins for the Source, but will remove any existing code. • This endpoint
     * is in **Alpha** testing. Please submit any feedback by sending an email to
     * friends@segment.com. • In order to successfully call this endpoint, the specified Workspace
     * needs to have the Live Plugins feature enabled. Please reach out to your customer success
     * manager for more information.
     *
     * @param sourceId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteLivePluginCodeAsync(
            String sourceId, final ApiCallback<DeleteLivePluginCode200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = deleteLivePluginCodeValidateBeforeCall(sourceId, _callback);
        Type localVarReturnType = new TypeToken<DeleteLivePluginCode200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getLatestFromLivePlugins
     *
     * @param sourceId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getLatestFromLivePluginsCall(String sourceId, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/sources/{sourceId}/live-plugins/latest"
                        .replace(
                                "{" + "sourceId" + "}",
                                localVarApiClient.escapeString(sourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLatestFromLivePluginsValidateBeforeCall(
            String sourceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceId' is set
        if (sourceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'sourceId' when calling"
                            + " getLatestFromLivePlugins(Async)");
        }

        return getLatestFromLivePluginsCall(sourceId, _callback);
    }

    /**
     * Get Latest from Live Plugins Get the latest Live Plugins for your Source. • This endpoint is
     * in **Alpha** testing. Please submit any feedback by sending an email to friends@segment.com.
     * • In order to successfully call this endpoint, the specified Workspace needs to have the Live
     * Plugins feature enabled. Please reach out to your customer success manager for more
     * information.
     *
     * @param sourceId (required)
     * @return GetLatestFromLivePlugins200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public GetLatestFromLivePlugins200Response getLatestFromLivePlugins(String sourceId)
            throws ApiException {
        ApiResponse<GetLatestFromLivePlugins200Response> localVarResp =
                getLatestFromLivePluginsWithHttpInfo(sourceId);
        return localVarResp.getData();
    }

    /**
     * Get Latest from Live Plugins Get the latest Live Plugins for your Source. • This endpoint is
     * in **Alpha** testing. Please submit any feedback by sending an email to friends@segment.com.
     * • In order to successfully call this endpoint, the specified Workspace needs to have the Live
     * Plugins feature enabled. Please reach out to your customer success manager for more
     * information.
     *
     * @param sourceId (required)
     * @return ApiResponse&lt;GetLatestFromLivePlugins200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<GetLatestFromLivePlugins200Response> getLatestFromLivePluginsWithHttpInfo(
            String sourceId) throws ApiException {
        okhttp3.Call localVarCall = getLatestFromLivePluginsValidateBeforeCall(sourceId, null);
        Type localVarReturnType = new TypeToken<GetLatestFromLivePlugins200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Latest from Live Plugins (asynchronously) Get the latest Live Plugins for your Source. •
     * This endpoint is in **Alpha** testing. Please submit any feedback by sending an email to
     * friends@segment.com. • In order to successfully call this endpoint, the specified Workspace
     * needs to have the Live Plugins feature enabled. Please reach out to your customer success
     * manager for more information.
     *
     * @param sourceId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getLatestFromLivePluginsAsync(
            String sourceId, final ApiCallback<GetLatestFromLivePlugins200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = getLatestFromLivePluginsValidateBeforeCall(sourceId, _callback);
        Type localVarReturnType = new TypeToken<GetLatestFromLivePlugins200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
