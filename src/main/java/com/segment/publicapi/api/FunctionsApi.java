/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.api;

import com.google.gson.reflect.TypeToken;
import com.segment.publicapi.ApiCallback;
import com.segment.publicapi.ApiClient;
import com.segment.publicapi.ApiException;
import com.segment.publicapi.ApiResponse;
import com.segment.publicapi.Configuration;
import com.segment.publicapi.Pair;
import com.segment.publicapi.models.CreateFunction200Response;
import com.segment.publicapi.models.CreateFunctionDeployment200Response;
import com.segment.publicapi.models.CreateFunctionV1Input;
import com.segment.publicapi.models.CreateInsertFunctionInstance200Response;
import com.segment.publicapi.models.CreateInsertFunctionInstanceAlphaInput;
import com.segment.publicapi.models.DeleteFunction200Response;
import com.segment.publicapi.models.DeleteInsertFunctionInstance200Response;
import com.segment.publicapi.models.GetFunction200Response;
import com.segment.publicapi.models.GetFunctionVersion200Response;
import com.segment.publicapi.models.GetInsertFunctionInstance200Response;
import com.segment.publicapi.models.ListFunctionVersions200Response;
import com.segment.publicapi.models.ListFunctions200Response;
import com.segment.publicapi.models.ListInsertFunctionInstances200Response;
import com.segment.publicapi.models.PaginationInput;
import com.segment.publicapi.models.RestoreFunctionVersion200Response;
import com.segment.publicapi.models.RestoreFunctionVersionAlphaInput;
import com.segment.publicapi.models.UpdateFunction200Response;
import com.segment.publicapi.models.UpdateFunctionV1Input;
import com.segment.publicapi.models.UpdateInsertFunctionInstance200Response;
import com.segment.publicapi.models.UpdateInsertFunctionInstanceAlphaInput;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FunctionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FunctionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FunctionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createFunction
     *
     * @param createFunctionV1Input (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createFunctionCall(
            CreateFunctionV1Input createFunctionV1Input, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createFunctionV1Input;

        // create path and map variables
        String localVarPath = "/functions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1+json",
            "application/json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.segment.v1+json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFunctionValidateBeforeCall(
            CreateFunctionV1Input createFunctionV1Input, final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'createFunctionV1Input' is set
        if (createFunctionV1Input == null) {
            throw new ApiException(
                    "Missing the required parameter 'createFunctionV1Input' when calling"
                            + " createFunction(Async)");
        }

        return createFunctionCall(createFunctionV1Input, _callback);
    }

    /**
     * Create Function Creates a Function. • In order to successfully call this endpoint, the
     * specified Workspace needs to have the Functions feature enabled. Please reach out to your
     * customer success manager for more information.
     *
     * @param createFunctionV1Input (required)
     * @return CreateFunction200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public CreateFunction200Response createFunction(CreateFunctionV1Input createFunctionV1Input)
            throws ApiException {
        ApiResponse<CreateFunction200Response> localVarResp =
                createFunctionWithHttpInfo(createFunctionV1Input);
        return localVarResp.getData();
    }

    /**
     * Create Function Creates a Function. • In order to successfully call this endpoint, the
     * specified Workspace needs to have the Functions feature enabled. Please reach out to your
     * customer success manager for more information.
     *
     * @param createFunctionV1Input (required)
     * @return ApiResponse&lt;CreateFunction200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CreateFunction200Response> createFunctionWithHttpInfo(
            CreateFunctionV1Input createFunctionV1Input) throws ApiException {
        okhttp3.Call localVarCall = createFunctionValidateBeforeCall(createFunctionV1Input, null);
        Type localVarReturnType = new TypeToken<CreateFunction200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Function (asynchronously) Creates a Function. • In order to successfully call this
     * endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach
     * out to your customer success manager for more information.
     *
     * @param createFunctionV1Input (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createFunctionAsync(
            CreateFunctionV1Input createFunctionV1Input,
            final ApiCallback<CreateFunction200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                createFunctionValidateBeforeCall(createFunctionV1Input, _callback);
        Type localVarReturnType = new TypeToken<CreateFunction200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for createFunctionDeployment
     *
     * @param functionId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createFunctionDeploymentCall(String functionId, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/functions/{functionId}/deploy"
                        .replace(
                                "{" + "functionId" + "}",
                                localVarApiClient.escapeString(functionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1+json",
            "application/json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFunctionDeploymentValidateBeforeCall(
            String functionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'functionId' is set
        if (functionId == null) {
            throw new ApiException(
                    "Missing the required parameter 'functionId' when calling"
                            + " createFunctionDeployment(Async)");
        }

        return createFunctionDeploymentCall(functionId, _callback);
    }

    /**
     * Create Function Deployment Deploys a Function. Only applicable to Source Function instances.
     * • In order to successfully call this endpoint, the specified Workspace needs to have the
     * Functions feature enabled. Please reach out to your customer success manager for more
     * information.
     *
     * @param functionId (required)
     * @return CreateFunctionDeployment200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public CreateFunctionDeployment200Response createFunctionDeployment(String functionId)
            throws ApiException {
        ApiResponse<CreateFunctionDeployment200Response> localVarResp =
                createFunctionDeploymentWithHttpInfo(functionId);
        return localVarResp.getData();
    }

    /**
     * Create Function Deployment Deploys a Function. Only applicable to Source Function instances.
     * • In order to successfully call this endpoint, the specified Workspace needs to have the
     * Functions feature enabled. Please reach out to your customer success manager for more
     * information.
     *
     * @param functionId (required)
     * @return ApiResponse&lt;CreateFunctionDeployment200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CreateFunctionDeployment200Response> createFunctionDeploymentWithHttpInfo(
            String functionId) throws ApiException {
        okhttp3.Call localVarCall = createFunctionDeploymentValidateBeforeCall(functionId, null);
        Type localVarReturnType = new TypeToken<CreateFunctionDeployment200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Function Deployment (asynchronously) Deploys a Function. Only applicable to Source
     * Function instances. • In order to successfully call this endpoint, the specified Workspace
     * needs to have the Functions feature enabled. Please reach out to your customer success
     * manager for more information.
     *
     * @param functionId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createFunctionDeploymentAsync(
            String functionId, final ApiCallback<CreateFunctionDeployment200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                createFunctionDeploymentValidateBeforeCall(functionId, _callback);
        Type localVarReturnType = new TypeToken<CreateFunctionDeployment200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for createInsertFunctionInstance
     *
     * @param createInsertFunctionInstanceAlphaInput (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createInsertFunctionInstanceCall(
            CreateInsertFunctionInstanceAlphaInput createInsertFunctionInstanceAlphaInput,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createInsertFunctionInstanceAlphaInput;

        // create path and map variables
        String localVarPath = "/insert-function-instances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/vnd.segment.v1alpha+json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createInsertFunctionInstanceValidateBeforeCall(
            CreateInsertFunctionInstanceAlphaInput createInsertFunctionInstanceAlphaInput,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'createInsertFunctionInstanceAlphaInput' is set
        if (createInsertFunctionInstanceAlphaInput == null) {
            throw new ApiException(
                    "Missing the required parameter 'createInsertFunctionInstanceAlphaInput' when"
                            + " calling createInsertFunctionInstance(Async)");
        }

        return createInsertFunctionInstanceCall(createInsertFunctionInstanceAlphaInput, _callback);
    }

    /**
     * Create Insert Function Instance Creates an insert Function instance connected to the given
     * Destination. • In order to successfully call this endpoint, the specified Workspace needs to
     * have the Functions feature enabled. Please reach out to your customer success manager for
     * more information.
     *
     * @param createInsertFunctionInstanceAlphaInput (required)
     * @return CreateInsertFunctionInstance200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public CreateInsertFunctionInstance200Response createInsertFunctionInstance(
            CreateInsertFunctionInstanceAlphaInput createInsertFunctionInstanceAlphaInput)
            throws ApiException {
        ApiResponse<CreateInsertFunctionInstance200Response> localVarResp =
                createInsertFunctionInstanceWithHttpInfo(createInsertFunctionInstanceAlphaInput);
        return localVarResp.getData();
    }

    /**
     * Create Insert Function Instance Creates an insert Function instance connected to the given
     * Destination. • In order to successfully call this endpoint, the specified Workspace needs to
     * have the Functions feature enabled. Please reach out to your customer success manager for
     * more information.
     *
     * @param createInsertFunctionInstanceAlphaInput (required)
     * @return ApiResponse&lt;CreateInsertFunctionInstance200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CreateInsertFunctionInstance200Response>
            createInsertFunctionInstanceWithHttpInfo(
                    CreateInsertFunctionInstanceAlphaInput createInsertFunctionInstanceAlphaInput)
                    throws ApiException {
        okhttp3.Call localVarCall =
                createInsertFunctionInstanceValidateBeforeCall(
                        createInsertFunctionInstanceAlphaInput, null);
        Type localVarReturnType =
                new TypeToken<CreateInsertFunctionInstance200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Insert Function Instance (asynchronously) Creates an insert Function instance
     * connected to the given Destination. • In order to successfully call this endpoint, the
     * specified Workspace needs to have the Functions feature enabled. Please reach out to your
     * customer success manager for more information.
     *
     * @param createInsertFunctionInstanceAlphaInput (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createInsertFunctionInstanceAsync(
            CreateInsertFunctionInstanceAlphaInput createInsertFunctionInstanceAlphaInput,
            final ApiCallback<CreateInsertFunctionInstance200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                createInsertFunctionInstanceValidateBeforeCall(
                        createInsertFunctionInstanceAlphaInput, _callback);
        Type localVarReturnType =
                new TypeToken<CreateInsertFunctionInstance200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for deleteFunction
     *
     * @param functionId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteFunctionCall(String functionId, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/functions/{functionId}"
                        .replace(
                                "{" + "functionId" + "}",
                                localVarApiClient.escapeString(functionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1+json",
            "application/json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "DELETE",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFunctionValidateBeforeCall(
            String functionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'functionId' is set
        if (functionId == null) {
            throw new ApiException(
                    "Missing the required parameter 'functionId' when calling"
                            + " deleteFunction(Async)");
        }

        return deleteFunctionCall(functionId, _callback);
    }

    /**
     * Delete Function Deletes a Function. • In order to successfully call this endpoint, the
     * specified Workspace needs to have the Functions feature enabled. Please reach out to your
     * customer success manager for more information.
     *
     * @param functionId (required)
     * @return DeleteFunction200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public DeleteFunction200Response deleteFunction(String functionId) throws ApiException {
        ApiResponse<DeleteFunction200Response> localVarResp =
                deleteFunctionWithHttpInfo(functionId);
        return localVarResp.getData();
    }

    /**
     * Delete Function Deletes a Function. • In order to successfully call this endpoint, the
     * specified Workspace needs to have the Functions feature enabled. Please reach out to your
     * customer success manager for more information.
     *
     * @param functionId (required)
     * @return ApiResponse&lt;DeleteFunction200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<DeleteFunction200Response> deleteFunctionWithHttpInfo(String functionId)
            throws ApiException {
        okhttp3.Call localVarCall = deleteFunctionValidateBeforeCall(functionId, null);
        Type localVarReturnType = new TypeToken<DeleteFunction200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Function (asynchronously) Deletes a Function. • In order to successfully call this
     * endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach
     * out to your customer success manager for more information.
     *
     * @param functionId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteFunctionAsync(
            String functionId, final ApiCallback<DeleteFunction200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = deleteFunctionValidateBeforeCall(functionId, _callback);
        Type localVarReturnType = new TypeToken<DeleteFunction200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for deleteInsertFunctionInstance
     *
     * @param instanceId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteInsertFunctionInstanceCall(
            String instanceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/insert-function-instances/{instanceId}"
                        .replace(
                                "{" + "instanceId" + "}",
                                localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "DELETE",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteInsertFunctionInstanceValidateBeforeCall(
            String instanceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'instanceId' when calling"
                            + " deleteInsertFunctionInstance(Async)");
        }

        return deleteInsertFunctionInstanceCall(instanceId, _callback);
    }

    /**
     * Delete Insert Function Instance Deletes an insert Function instance. • In order to
     * successfully call this endpoint, the specified Workspace needs to have the Functions feature
     * enabled. Please reach out to your customer success manager for more information.
     *
     * @param instanceId (required)
     * @return DeleteInsertFunctionInstance200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public DeleteInsertFunctionInstance200Response deleteInsertFunctionInstance(String instanceId)
            throws ApiException {
        ApiResponse<DeleteInsertFunctionInstance200Response> localVarResp =
                deleteInsertFunctionInstanceWithHttpInfo(instanceId);
        return localVarResp.getData();
    }

    /**
     * Delete Insert Function Instance Deletes an insert Function instance. • In order to
     * successfully call this endpoint, the specified Workspace needs to have the Functions feature
     * enabled. Please reach out to your customer success manager for more information.
     *
     * @param instanceId (required)
     * @return ApiResponse&lt;DeleteInsertFunctionInstance200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<DeleteInsertFunctionInstance200Response>
            deleteInsertFunctionInstanceWithHttpInfo(String instanceId) throws ApiException {
        okhttp3.Call localVarCall =
                deleteInsertFunctionInstanceValidateBeforeCall(instanceId, null);
        Type localVarReturnType =
                new TypeToken<DeleteInsertFunctionInstance200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Insert Function Instance (asynchronously) Deletes an insert Function instance. • In
     * order to successfully call this endpoint, the specified Workspace needs to have the Functions
     * feature enabled. Please reach out to your customer success manager for more information.
     *
     * @param instanceId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteInsertFunctionInstanceAsync(
            String instanceId, final ApiCallback<DeleteInsertFunctionInstance200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                deleteInsertFunctionInstanceValidateBeforeCall(instanceId, _callback);
        Type localVarReturnType =
                new TypeToken<DeleteInsertFunctionInstance200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getFunction
     *
     * @param functionId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getFunctionCall(String functionId, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/functions/{functionId}"
                        .replace(
                                "{" + "functionId" + "}",
                                localVarApiClient.escapeString(functionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1+json",
            "application/json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFunctionValidateBeforeCall(
            String functionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'functionId' is set
        if (functionId == null) {
            throw new ApiException(
                    "Missing the required parameter 'functionId' when calling getFunction(Async)");
        }

        return getFunctionCall(functionId, _callback);
    }

    /**
     * Get Function Gets a Function. • In order to successfully call this endpoint, the specified
     * Workspace needs to have the Functions feature enabled. Please reach out to your customer
     * success manager for more information.
     *
     * @param functionId (required)
     * @return GetFunction200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public GetFunction200Response getFunction(String functionId) throws ApiException {
        ApiResponse<GetFunction200Response> localVarResp = getFunctionWithHttpInfo(functionId);
        return localVarResp.getData();
    }

    /**
     * Get Function Gets a Function. • In order to successfully call this endpoint, the specified
     * Workspace needs to have the Functions feature enabled. Please reach out to your customer
     * success manager for more information.
     *
     * @param functionId (required)
     * @return ApiResponse&lt;GetFunction200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<GetFunction200Response> getFunctionWithHttpInfo(String functionId)
            throws ApiException {
        okhttp3.Call localVarCall = getFunctionValidateBeforeCall(functionId, null);
        Type localVarReturnType = new TypeToken<GetFunction200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Function (asynchronously) Gets a Function. • In order to successfully call this endpoint,
     * the specified Workspace needs to have the Functions feature enabled. Please reach out to your
     * customer success manager for more information.
     *
     * @param functionId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getFunctionAsync(
            String functionId, final ApiCallback<GetFunction200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = getFunctionValidateBeforeCall(functionId, _callback);
        Type localVarReturnType = new TypeToken<GetFunction200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getFunctionVersion
     *
     * @param functionId (required)
     * @param versionId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getFunctionVersionCall(
            String functionId, String versionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/functions/{functionId}/versions/{versionId}"
                        .replace(
                                "{" + "functionId" + "}",
                                localVarApiClient.escapeString(functionId.toString()))
                        .replace(
                                "{" + "versionId" + "}",
                                localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFunctionVersionValidateBeforeCall(
            String functionId, String versionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'functionId' is set
        if (functionId == null) {
            throw new ApiException(
                    "Missing the required parameter 'functionId' when calling"
                            + " getFunctionVersion(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException(
                    "Missing the required parameter 'versionId' when calling"
                            + " getFunctionVersion(Async)");
        }

        return getFunctionVersionCall(functionId, versionId, _callback);
    }

    /**
     * Get Function Version Gets a Function version. • In order to successfully call this endpoint,
     * the specified Workspace needs to have the Functions feature enabled. Please reach out to your
     * customer success manager for more information.
     *
     * @param functionId (required)
     * @param versionId (required)
     * @return GetFunctionVersion200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public GetFunctionVersion200Response getFunctionVersion(String functionId, String versionId)
            throws ApiException {
        ApiResponse<GetFunctionVersion200Response> localVarResp =
                getFunctionVersionWithHttpInfo(functionId, versionId);
        return localVarResp.getData();
    }

    /**
     * Get Function Version Gets a Function version. • In order to successfully call this endpoint,
     * the specified Workspace needs to have the Functions feature enabled. Please reach out to your
     * customer success manager for more information.
     *
     * @param functionId (required)
     * @param versionId (required)
     * @return ApiResponse&lt;GetFunctionVersion200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<GetFunctionVersion200Response> getFunctionVersionWithHttpInfo(
            String functionId, String versionId) throws ApiException {
        okhttp3.Call localVarCall =
                getFunctionVersionValidateBeforeCall(functionId, versionId, null);
        Type localVarReturnType = new TypeToken<GetFunctionVersion200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Function Version (asynchronously) Gets a Function version. • In order to successfully
     * call this endpoint, the specified Workspace needs to have the Functions feature enabled.
     * Please reach out to your customer success manager for more information.
     *
     * @param functionId (required)
     * @param versionId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getFunctionVersionAsync(
            String functionId,
            String versionId,
            final ApiCallback<GetFunctionVersion200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                getFunctionVersionValidateBeforeCall(functionId, versionId, _callback);
        Type localVarReturnType = new TypeToken<GetFunctionVersion200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getInsertFunctionInstance
     *
     * @param instanceId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getInsertFunctionInstanceCall(
            String instanceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/insert-function-instances/{instanceId}"
                        .replace(
                                "{" + "instanceId" + "}",
                                localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInsertFunctionInstanceValidateBeforeCall(
            String instanceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'instanceId' when calling"
                            + " getInsertFunctionInstance(Async)");
        }

        return getInsertFunctionInstanceCall(instanceId, _callback);
    }

    /**
     * Get Insert Function Instance Gets an insert Function instance. • In order to successfully
     * call this endpoint, the specified Workspace needs to have the Functions feature enabled.
     * Please reach out to your customer success manager for more information.
     *
     * @param instanceId (required)
     * @return GetInsertFunctionInstance200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public GetInsertFunctionInstance200Response getInsertFunctionInstance(String instanceId)
            throws ApiException {
        ApiResponse<GetInsertFunctionInstance200Response> localVarResp =
                getInsertFunctionInstanceWithHttpInfo(instanceId);
        return localVarResp.getData();
    }

    /**
     * Get Insert Function Instance Gets an insert Function instance. • In order to successfully
     * call this endpoint, the specified Workspace needs to have the Functions feature enabled.
     * Please reach out to your customer success manager for more information.
     *
     * @param instanceId (required)
     * @return ApiResponse&lt;GetInsertFunctionInstance200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<GetInsertFunctionInstance200Response> getInsertFunctionInstanceWithHttpInfo(
            String instanceId) throws ApiException {
        okhttp3.Call localVarCall = getInsertFunctionInstanceValidateBeforeCall(instanceId, null);
        Type localVarReturnType =
                new TypeToken<GetInsertFunctionInstance200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Insert Function Instance (asynchronously) Gets an insert Function instance. • In order to
     * successfully call this endpoint, the specified Workspace needs to have the Functions feature
     * enabled. Please reach out to your customer success manager for more information.
     *
     * @param instanceId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getInsertFunctionInstanceAsync(
            String instanceId, final ApiCallback<GetInsertFunctionInstance200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                getInsertFunctionInstanceValidateBeforeCall(instanceId, _callback);
        Type localVarReturnType =
                new TypeToken<GetInsertFunctionInstance200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for listFunctionVersions
     *
     * @param functionId (required)
     * @param pagination Pagination parameters. This parameter exists in alpha. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listFunctionVersionsCall(
            String functionId, PaginationInput pagination, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/functions/{functionId}/versions"
                        .replace(
                                "{" + "functionId" + "}",
                                localVarApiClient.escapeString(functionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pagination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination", pagination));
        }

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFunctionVersionsValidateBeforeCall(
            String functionId, PaginationInput pagination, final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'functionId' is set
        if (functionId == null) {
            throw new ApiException(
                    "Missing the required parameter 'functionId' when calling"
                            + " listFunctionVersions(Async)");
        }

        // verify the required parameter 'pagination' is set
        if (pagination == null) {
            throw new ApiException(
                    "Missing the required parameter 'pagination' when calling"
                            + " listFunctionVersions(Async)");
        }

        return listFunctionVersionsCall(functionId, pagination, _callback);
    }

    /**
     * List Function Versions Lists versions for a Function in a Workspace. • In order to
     * successfully call this endpoint, the specified Workspace needs to have the Functions feature
     * enabled. Please reach out to your customer success manager for more information.
     *
     * @param functionId (required)
     * @param pagination Pagination parameters. This parameter exists in alpha. (required)
     * @return ListFunctionVersions200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ListFunctionVersions200Response listFunctionVersions(
            String functionId, PaginationInput pagination) throws ApiException {
        ApiResponse<ListFunctionVersions200Response> localVarResp =
                listFunctionVersionsWithHttpInfo(functionId, pagination);
        return localVarResp.getData();
    }

    /**
     * List Function Versions Lists versions for a Function in a Workspace. • In order to
     * successfully call this endpoint, the specified Workspace needs to have the Functions feature
     * enabled. Please reach out to your customer success manager for more information.
     *
     * @param functionId (required)
     * @param pagination Pagination parameters. This parameter exists in alpha. (required)
     * @return ApiResponse&lt;ListFunctionVersions200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ListFunctionVersions200Response> listFunctionVersionsWithHttpInfo(
            String functionId, PaginationInput pagination) throws ApiException {
        okhttp3.Call localVarCall =
                listFunctionVersionsValidateBeforeCall(functionId, pagination, null);
        Type localVarReturnType = new TypeToken<ListFunctionVersions200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Function Versions (asynchronously) Lists versions for a Function in a Workspace. • In
     * order to successfully call this endpoint, the specified Workspace needs to have the Functions
     * feature enabled. Please reach out to your customer success manager for more information.
     *
     * @param functionId (required)
     * @param pagination Pagination parameters. This parameter exists in alpha. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listFunctionVersionsAsync(
            String functionId,
            PaginationInput pagination,
            final ApiCallback<ListFunctionVersions200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                listFunctionVersionsValidateBeforeCall(functionId, pagination, _callback);
        Type localVarReturnType = new TypeToken<ListFunctionVersions200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for listFunctions
     *
     * @param pagination Pagination parameters. This parameter exists in v1. (required)
     * @param resourceType The Function type. Config API note: equal to &#x60;type&#x60;. This
     *     parameter exists in v1. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listFunctionsCall(
            PaginationInput pagination, String resourceType, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/functions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pagination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination", pagination));
        }

        if (resourceType != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("resourceType", resourceType));
        }

        final String[] localVarAccepts = {
            "application/vnd.segment.v1+json",
            "application/json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFunctionsValidateBeforeCall(
            PaginationInput pagination, String resourceType, final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'pagination' is set
        if (pagination == null) {
            throw new ApiException(
                    "Missing the required parameter 'pagination' when calling"
                            + " listFunctions(Async)");
        }

        // verify the required parameter 'resourceType' is set
        if (resourceType == null) {
            throw new ApiException(
                    "Missing the required parameter 'resourceType' when calling"
                            + " listFunctions(Async)");
        }

        return listFunctionsCall(pagination, resourceType, _callback);
    }

    /**
     * List Functions Lists all Functions in a Workspace. • In order to successfully call this
     * endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach
     * out to your customer success manager for more information.
     *
     * @param pagination Pagination parameters. This parameter exists in v1. (required)
     * @param resourceType The Function type. Config API note: equal to &#x60;type&#x60;. This
     *     parameter exists in v1. (required)
     * @return ListFunctions200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ListFunctions200Response listFunctions(PaginationInput pagination, String resourceType)
            throws ApiException {
        ApiResponse<ListFunctions200Response> localVarResp =
                listFunctionsWithHttpInfo(pagination, resourceType);
        return localVarResp.getData();
    }

    /**
     * List Functions Lists all Functions in a Workspace. • In order to successfully call this
     * endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach
     * out to your customer success manager for more information.
     *
     * @param pagination Pagination parameters. This parameter exists in v1. (required)
     * @param resourceType The Function type. Config API note: equal to &#x60;type&#x60;. This
     *     parameter exists in v1. (required)
     * @return ApiResponse&lt;ListFunctions200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ListFunctions200Response> listFunctionsWithHttpInfo(
            PaginationInput pagination, String resourceType) throws ApiException {
        okhttp3.Call localVarCall = listFunctionsValidateBeforeCall(pagination, resourceType, null);
        Type localVarReturnType = new TypeToken<ListFunctions200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Functions (asynchronously) Lists all Functions in a Workspace. • In order to
     * successfully call this endpoint, the specified Workspace needs to have the Functions feature
     * enabled. Please reach out to your customer success manager for more information.
     *
     * @param pagination Pagination parameters. This parameter exists in v1. (required)
     * @param resourceType The Function type. Config API note: equal to &#x60;type&#x60;. This
     *     parameter exists in v1. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listFunctionsAsync(
            PaginationInput pagination,
            String resourceType,
            final ApiCallback<ListFunctions200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                listFunctionsValidateBeforeCall(pagination, resourceType, _callback);
        Type localVarReturnType = new TypeToken<ListFunctions200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for listInsertFunctionInstances
     *
     * @param pagination Pagination parameters. This parameter exists in alpha. (required)
     * @param functionId The insert Function class id to lookup. This parameter exists in alpha.
     *     (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listInsertFunctionInstancesCall(
            PaginationInput pagination, String functionId, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/insert-function-instances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pagination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination", pagination));
        }

        if (functionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("functionId", functionId));
        }

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listInsertFunctionInstancesValidateBeforeCall(
            PaginationInput pagination, String functionId, final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'pagination' is set
        if (pagination == null) {
            throw new ApiException(
                    "Missing the required parameter 'pagination' when calling"
                            + " listInsertFunctionInstances(Async)");
        }

        // verify the required parameter 'functionId' is set
        if (functionId == null) {
            throw new ApiException(
                    "Missing the required parameter 'functionId' when calling"
                            + " listInsertFunctionInstances(Async)");
        }

        return listInsertFunctionInstancesCall(pagination, functionId, _callback);
    }

    /**
     * List Insert Function Instances Lists all insert Function instances connected to the given
     * insert Function. • In order to successfully call this endpoint, the specified Workspace needs
     * to have the Functions feature enabled. Please reach out to your customer success manager for
     * more information.
     *
     * @param pagination Pagination parameters. This parameter exists in alpha. (required)
     * @param functionId The insert Function class id to lookup. This parameter exists in alpha.
     *     (required)
     * @return ListInsertFunctionInstances200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ListInsertFunctionInstances200Response listInsertFunctionInstances(
            PaginationInput pagination, String functionId) throws ApiException {
        ApiResponse<ListInsertFunctionInstances200Response> localVarResp =
                listInsertFunctionInstancesWithHttpInfo(pagination, functionId);
        return localVarResp.getData();
    }

    /**
     * List Insert Function Instances Lists all insert Function instances connected to the given
     * insert Function. • In order to successfully call this endpoint, the specified Workspace needs
     * to have the Functions feature enabled. Please reach out to your customer success manager for
     * more information.
     *
     * @param pagination Pagination parameters. This parameter exists in alpha. (required)
     * @param functionId The insert Function class id to lookup. This parameter exists in alpha.
     *     (required)
     * @return ApiResponse&lt;ListInsertFunctionInstances200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ListInsertFunctionInstances200Response>
            listInsertFunctionInstancesWithHttpInfo(PaginationInput pagination, String functionId)
                    throws ApiException {
        okhttp3.Call localVarCall =
                listInsertFunctionInstancesValidateBeforeCall(pagination, functionId, null);
        Type localVarReturnType =
                new TypeToken<ListInsertFunctionInstances200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Insert Function Instances (asynchronously) Lists all insert Function instances connected
     * to the given insert Function. • In order to successfully call this endpoint, the specified
     * Workspace needs to have the Functions feature enabled. Please reach out to your customer
     * success manager for more information.
     *
     * @param pagination Pagination parameters. This parameter exists in alpha. (required)
     * @param functionId The insert Function class id to lookup. This parameter exists in alpha.
     *     (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listInsertFunctionInstancesAsync(
            PaginationInput pagination,
            String functionId,
            final ApiCallback<ListInsertFunctionInstances200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                listInsertFunctionInstancesValidateBeforeCall(pagination, functionId, _callback);
        Type localVarReturnType =
                new TypeToken<ListInsertFunctionInstances200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for restoreFunctionVersion
     *
     * @param functionId (required)
     * @param restoreFunctionVersionAlphaInput (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call restoreFunctionVersionCall(
            String functionId,
            RestoreFunctionVersionAlphaInput restoreFunctionVersionAlphaInput,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = restoreFunctionVersionAlphaInput;

        // create path and map variables
        String localVarPath =
                "/functions/{functionId}/versions"
                        .replace(
                                "{" + "functionId" + "}",
                                localVarApiClient.escapeString(functionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/vnd.segment.v1alpha+json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restoreFunctionVersionValidateBeforeCall(
            String functionId,
            RestoreFunctionVersionAlphaInput restoreFunctionVersionAlphaInput,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'functionId' is set
        if (functionId == null) {
            throw new ApiException(
                    "Missing the required parameter 'functionId' when calling"
                            + " restoreFunctionVersion(Async)");
        }

        // verify the required parameter 'restoreFunctionVersionAlphaInput' is set
        if (restoreFunctionVersionAlphaInput == null) {
            throw new ApiException(
                    "Missing the required parameter 'restoreFunctionVersionAlphaInput' when calling"
                            + " restoreFunctionVersion(Async)");
        }

        return restoreFunctionVersionCall(functionId, restoreFunctionVersionAlphaInput, _callback);
    }

    /**
     * Restore Function Version Restore an old Function version as the latest version. • In order to
     * successfully call this endpoint, the specified Workspace needs to have the Functions feature
     * enabled. Please reach out to your customer success manager for more information.
     *
     * @param functionId (required)
     * @param restoreFunctionVersionAlphaInput (required)
     * @return RestoreFunctionVersion200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public RestoreFunctionVersion200Response restoreFunctionVersion(
            String functionId, RestoreFunctionVersionAlphaInput restoreFunctionVersionAlphaInput)
            throws ApiException {
        ApiResponse<RestoreFunctionVersion200Response> localVarResp =
                restoreFunctionVersionWithHttpInfo(functionId, restoreFunctionVersionAlphaInput);
        return localVarResp.getData();
    }

    /**
     * Restore Function Version Restore an old Function version as the latest version. • In order to
     * successfully call this endpoint, the specified Workspace needs to have the Functions feature
     * enabled. Please reach out to your customer success manager for more information.
     *
     * @param functionId (required)
     * @param restoreFunctionVersionAlphaInput (required)
     * @return ApiResponse&lt;RestoreFunctionVersion200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RestoreFunctionVersion200Response> restoreFunctionVersionWithHttpInfo(
            String functionId, RestoreFunctionVersionAlphaInput restoreFunctionVersionAlphaInput)
            throws ApiException {
        okhttp3.Call localVarCall =
                restoreFunctionVersionValidateBeforeCall(
                        functionId, restoreFunctionVersionAlphaInput, null);
        Type localVarReturnType = new TypeToken<RestoreFunctionVersion200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Restore Function Version (asynchronously) Restore an old Function version as the latest
     * version. • In order to successfully call this endpoint, the specified Workspace needs to have
     * the Functions feature enabled. Please reach out to your customer success manager for more
     * information.
     *
     * @param functionId (required)
     * @param restoreFunctionVersionAlphaInput (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call restoreFunctionVersionAsync(
            String functionId,
            RestoreFunctionVersionAlphaInput restoreFunctionVersionAlphaInput,
            final ApiCallback<RestoreFunctionVersion200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                restoreFunctionVersionValidateBeforeCall(
                        functionId, restoreFunctionVersionAlphaInput, _callback);
        Type localVarReturnType = new TypeToken<RestoreFunctionVersion200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for updateFunction
     *
     * @param functionId (required)
     * @param updateFunctionV1Input (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateFunctionCall(
            String functionId,
            UpdateFunctionV1Input updateFunctionV1Input,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateFunctionV1Input;

        // create path and map variables
        String localVarPath =
                "/functions/{functionId}"
                        .replace(
                                "{" + "functionId" + "}",
                                localVarApiClient.escapeString(functionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1+json",
            "application/json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.segment.v1+json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "PATCH",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFunctionValidateBeforeCall(
            String functionId,
            UpdateFunctionV1Input updateFunctionV1Input,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'functionId' is set
        if (functionId == null) {
            throw new ApiException(
                    "Missing the required parameter 'functionId' when calling"
                            + " updateFunction(Async)");
        }

        // verify the required parameter 'updateFunctionV1Input' is set
        if (updateFunctionV1Input == null) {
            throw new ApiException(
                    "Missing the required parameter 'updateFunctionV1Input' when calling"
                            + " updateFunction(Async)");
        }

        return updateFunctionCall(functionId, updateFunctionV1Input, _callback);
    }

    /**
     * Update Function Updates a Function. • In order to successfully call this endpoint, the
     * specified Workspace needs to have the Functions feature enabled. Please reach out to your
     * customer success manager for more information. Config API omitted fields: -
     * &#x60;updateMask&#x60;
     *
     * @param functionId (required)
     * @param updateFunctionV1Input (required)
     * @return UpdateFunction200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public UpdateFunction200Response updateFunction(
            String functionId, UpdateFunctionV1Input updateFunctionV1Input) throws ApiException {
        ApiResponse<UpdateFunction200Response> localVarResp =
                updateFunctionWithHttpInfo(functionId, updateFunctionV1Input);
        return localVarResp.getData();
    }

    /**
     * Update Function Updates a Function. • In order to successfully call this endpoint, the
     * specified Workspace needs to have the Functions feature enabled. Please reach out to your
     * customer success manager for more information. Config API omitted fields: -
     * &#x60;updateMask&#x60;
     *
     * @param functionId (required)
     * @param updateFunctionV1Input (required)
     * @return ApiResponse&lt;UpdateFunction200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<UpdateFunction200Response> updateFunctionWithHttpInfo(
            String functionId, UpdateFunctionV1Input updateFunctionV1Input) throws ApiException {
        okhttp3.Call localVarCall =
                updateFunctionValidateBeforeCall(functionId, updateFunctionV1Input, null);
        Type localVarReturnType = new TypeToken<UpdateFunction200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Function (asynchronously) Updates a Function. • In order to successfully call this
     * endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach
     * out to your customer success manager for more information. Config API omitted fields: -
     * &#x60;updateMask&#x60;
     *
     * @param functionId (required)
     * @param updateFunctionV1Input (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateFunctionAsync(
            String functionId,
            UpdateFunctionV1Input updateFunctionV1Input,
            final ApiCallback<UpdateFunction200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                updateFunctionValidateBeforeCall(functionId, updateFunctionV1Input, _callback);
        Type localVarReturnType = new TypeToken<UpdateFunction200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for updateInsertFunctionInstance
     *
     * @param instanceId (required)
     * @param updateInsertFunctionInstanceAlphaInput (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateInsertFunctionInstanceCall(
            String instanceId,
            UpdateInsertFunctionInstanceAlphaInput updateInsertFunctionInstanceAlphaInput,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateInsertFunctionInstanceAlphaInput;

        // create path and map variables
        String localVarPath =
                "/insert-function-instances/{instanceId}"
                        .replace(
                                "{" + "instanceId" + "}",
                                localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/vnd.segment.v1alpha+json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "PATCH",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateInsertFunctionInstanceValidateBeforeCall(
            String instanceId,
            UpdateInsertFunctionInstanceAlphaInput updateInsertFunctionInstanceAlphaInput,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'instanceId' when calling"
                            + " updateInsertFunctionInstance(Async)");
        }

        // verify the required parameter 'updateInsertFunctionInstanceAlphaInput' is set
        if (updateInsertFunctionInstanceAlphaInput == null) {
            throw new ApiException(
                    "Missing the required parameter 'updateInsertFunctionInstanceAlphaInput' when"
                            + " calling updateInsertFunctionInstance(Async)");
        }

        return updateInsertFunctionInstanceCall(
                instanceId, updateInsertFunctionInstanceAlphaInput, _callback);
    }

    /**
     * Update Insert Function Instance Updates an insert Function instance connected to the given
     * Destination. • In order to successfully call this endpoint, the specified Workspace needs to
     * have the Functions feature enabled. Please reach out to your customer success manager for
     * more information.
     *
     * @param instanceId (required)
     * @param updateInsertFunctionInstanceAlphaInput (required)
     * @return UpdateInsertFunctionInstance200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public UpdateInsertFunctionInstance200Response updateInsertFunctionInstance(
            String instanceId,
            UpdateInsertFunctionInstanceAlphaInput updateInsertFunctionInstanceAlphaInput)
            throws ApiException {
        ApiResponse<UpdateInsertFunctionInstance200Response> localVarResp =
                updateInsertFunctionInstanceWithHttpInfo(
                        instanceId, updateInsertFunctionInstanceAlphaInput);
        return localVarResp.getData();
    }

    /**
     * Update Insert Function Instance Updates an insert Function instance connected to the given
     * Destination. • In order to successfully call this endpoint, the specified Workspace needs to
     * have the Functions feature enabled. Please reach out to your customer success manager for
     * more information.
     *
     * @param instanceId (required)
     * @param updateInsertFunctionInstanceAlphaInput (required)
     * @return ApiResponse&lt;UpdateInsertFunctionInstance200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<UpdateInsertFunctionInstance200Response>
            updateInsertFunctionInstanceWithHttpInfo(
                    String instanceId,
                    UpdateInsertFunctionInstanceAlphaInput updateInsertFunctionInstanceAlphaInput)
                    throws ApiException {
        okhttp3.Call localVarCall =
                updateInsertFunctionInstanceValidateBeforeCall(
                        instanceId, updateInsertFunctionInstanceAlphaInput, null);
        Type localVarReturnType =
                new TypeToken<UpdateInsertFunctionInstance200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Insert Function Instance (asynchronously) Updates an insert Function instance
     * connected to the given Destination. • In order to successfully call this endpoint, the
     * specified Workspace needs to have the Functions feature enabled. Please reach out to your
     * customer success manager for more information.
     *
     * @param instanceId (required)
     * @param updateInsertFunctionInstanceAlphaInput (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateInsertFunctionInstanceAsync(
            String instanceId,
            UpdateInsertFunctionInstanceAlphaInput updateInsertFunctionInstanceAlphaInput,
            final ApiCallback<UpdateInsertFunctionInstance200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                updateInsertFunctionInstanceValidateBeforeCall(
                        instanceId, updateInsertFunctionInstanceAlphaInput, _callback);
        Type localVarReturnType =
                new TypeToken<UpdateInsertFunctionInstance200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
