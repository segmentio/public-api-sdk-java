/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.api;

import com.google.gson.reflect.TypeToken;
import com.segment.publicapi.ApiCallback;
import com.segment.publicapi.ApiClient;
import com.segment.publicapi.ApiException;
import com.segment.publicapi.ApiResponse;
import com.segment.publicapi.Configuration;
import com.segment.publicapi.Pair;
import com.segment.publicapi.models.CreateReverseEtlModel200Response;
import com.segment.publicapi.models.CreateReverseEtlModelInput;
import com.segment.publicapi.models.DeleteReverseEtlModel200Response;
import com.segment.publicapi.models.GetReverseEtlModel200Response;
import com.segment.publicapi.models.ListReverseEtlModels200Response;
import com.segment.publicapi.models.PaginationInput;
import com.segment.publicapi.models.UpdateReverseEtlModel200Response;
import com.segment.publicapi.models.UpdateReverseEtlModelInput;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReverseEtlApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReverseEtlApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReverseEtlApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createReverseEtlModel
     *
     * @param createReverseEtlModelInput (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createReverseEtlModelCall(
            CreateReverseEtlModelInput createReverseEtlModelInput, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createReverseEtlModelInput;

        // create path and map variables
        String localVarPath = "/reverse-etl-models";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/vnd.segment.v1alpha+json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createReverseEtlModelValidateBeforeCall(
            CreateReverseEtlModelInput createReverseEtlModelInput, final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'createReverseEtlModelInput' is set
        if (createReverseEtlModelInput == null) {
            throw new ApiException(
                    "Missing the required parameter 'createReverseEtlModelInput' when calling"
                            + " createReverseEtlModel(Async)");
        }

        return createReverseEtlModelCall(createReverseEtlModelInput, _callback);
    }

    /**
     * Create Reverse Etl Model Creates a new Reverse ETL Model. • When called, this endpoint may
     * generate the &#x60;Model Created&#x60; event in the [audit trail](/tag/Audit-Trail).
     *
     * @param createReverseEtlModelInput (required)
     * @return CreateReverseEtlModel200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public CreateReverseEtlModel200Response createReverseEtlModel(
            CreateReverseEtlModelInput createReverseEtlModelInput) throws ApiException {
        ApiResponse<CreateReverseEtlModel200Response> localVarResp =
                createReverseEtlModelWithHttpInfo(createReverseEtlModelInput);
        return localVarResp.getData();
    }

    /**
     * Create Reverse Etl Model Creates a new Reverse ETL Model. • When called, this endpoint may
     * generate the &#x60;Model Created&#x60; event in the [audit trail](/tag/Audit-Trail).
     *
     * @param createReverseEtlModelInput (required)
     * @return ApiResponse&lt;CreateReverseEtlModel200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CreateReverseEtlModel200Response> createReverseEtlModelWithHttpInfo(
            CreateReverseEtlModelInput createReverseEtlModelInput) throws ApiException {
        okhttp3.Call localVarCall =
                createReverseEtlModelValidateBeforeCall(createReverseEtlModelInput, null);
        Type localVarReturnType = new TypeToken<CreateReverseEtlModel200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Reverse Etl Model (asynchronously) Creates a new Reverse ETL Model. • When called,
     * this endpoint may generate the &#x60;Model Created&#x60; event in the [audit
     * trail](/tag/Audit-Trail).
     *
     * @param createReverseEtlModelInput (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createReverseEtlModelAsync(
            CreateReverseEtlModelInput createReverseEtlModelInput,
            final ApiCallback<CreateReverseEtlModel200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                createReverseEtlModelValidateBeforeCall(createReverseEtlModelInput, _callback);
        Type localVarReturnType = new TypeToken<CreateReverseEtlModel200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for deleteReverseEtlModel
     *
     * @param modelId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteReverseEtlModelCall(String modelId, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/reverse-etl-models/{modelId}"
                        .replace(
                                "{" + "modelId" + "}",
                                localVarApiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "DELETE",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteReverseEtlModelValidateBeforeCall(
            String modelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException(
                    "Missing the required parameter 'modelId' when calling"
                            + " deleteReverseEtlModel(Async)");
        }

        return deleteReverseEtlModelCall(modelId, _callback);
    }

    /**
     * Delete Reverse Etl Model Deletes an existing Model. • When called, this endpoint may generate
     * the &#x60;Model Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).
     *
     * @param modelId (required)
     * @return DeleteReverseEtlModel200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public DeleteReverseEtlModel200Response deleteReverseEtlModel(String modelId)
            throws ApiException {
        ApiResponse<DeleteReverseEtlModel200Response> localVarResp =
                deleteReverseEtlModelWithHttpInfo(modelId);
        return localVarResp.getData();
    }

    /**
     * Delete Reverse Etl Model Deletes an existing Model. • When called, this endpoint may generate
     * the &#x60;Model Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).
     *
     * @param modelId (required)
     * @return ApiResponse&lt;DeleteReverseEtlModel200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<DeleteReverseEtlModel200Response> deleteReverseEtlModelWithHttpInfo(
            String modelId) throws ApiException {
        okhttp3.Call localVarCall = deleteReverseEtlModelValidateBeforeCall(modelId, null);
        Type localVarReturnType = new TypeToken<DeleteReverseEtlModel200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Reverse Etl Model (asynchronously) Deletes an existing Model. • When called, this
     * endpoint may generate the &#x60;Model Deleted&#x60; event in the [audit
     * trail](/tag/Audit-Trail).
     *
     * @param modelId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteReverseEtlModelAsync(
            String modelId, final ApiCallback<DeleteReverseEtlModel200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = deleteReverseEtlModelValidateBeforeCall(modelId, _callback);
        Type localVarReturnType = new TypeToken<DeleteReverseEtlModel200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getReverseEtlModel
     *
     * @param modelId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getReverseEtlModelCall(String modelId, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/reverse-etl-models/{modelId}"
                        .replace(
                                "{" + "modelId" + "}",
                                localVarApiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReverseEtlModelValidateBeforeCall(
            String modelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException(
                    "Missing the required parameter 'modelId' when calling"
                            + " getReverseEtlModel(Async)");
        }

        return getReverseEtlModelCall(modelId, _callback);
    }

    /**
     * Get Reverse Etl Model Returns a Reverse ETL Model by its id.
     *
     * @param modelId (required)
     * @return GetReverseEtlModel200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public GetReverseEtlModel200Response getReverseEtlModel(String modelId) throws ApiException {
        ApiResponse<GetReverseEtlModel200Response> localVarResp =
                getReverseEtlModelWithHttpInfo(modelId);
        return localVarResp.getData();
    }

    /**
     * Get Reverse Etl Model Returns a Reverse ETL Model by its id.
     *
     * @param modelId (required)
     * @return ApiResponse&lt;GetReverseEtlModel200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<GetReverseEtlModel200Response> getReverseEtlModelWithHttpInfo(String modelId)
            throws ApiException {
        okhttp3.Call localVarCall = getReverseEtlModelValidateBeforeCall(modelId, null);
        Type localVarReturnType = new TypeToken<GetReverseEtlModel200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Reverse Etl Model (asynchronously) Returns a Reverse ETL Model by its id.
     *
     * @param modelId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getReverseEtlModelAsync(
            String modelId, final ApiCallback<GetReverseEtlModel200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = getReverseEtlModelValidateBeforeCall(modelId, _callback);
        Type localVarReturnType = new TypeToken<GetReverseEtlModel200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for listReverseEtlModels
     *
     * @param pagination Defines the pagination parameters. This parameter exists in alpha.
     *     (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listReverseEtlModelsCall(
            PaginationInput pagination, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reverse-etl-models";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pagination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination", pagination));
        }

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listReverseEtlModelsValidateBeforeCall(
            PaginationInput pagination, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pagination' is set
        if (pagination == null) {
            throw new ApiException(
                    "Missing the required parameter 'pagination' when calling"
                            + " listReverseEtlModels(Async)");
        }

        return listReverseEtlModelsCall(pagination, _callback);
    }

    /**
     * List Reverse Etl Models Returns a list of Reverse ETL Models.
     *
     * @param pagination Defines the pagination parameters. This parameter exists in alpha.
     *     (required)
     * @return ListReverseEtlModels200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ListReverseEtlModels200Response listReverseEtlModels(PaginationInput pagination)
            throws ApiException {
        ApiResponse<ListReverseEtlModels200Response> localVarResp =
                listReverseEtlModelsWithHttpInfo(pagination);
        return localVarResp.getData();
    }

    /**
     * List Reverse Etl Models Returns a list of Reverse ETL Models.
     *
     * @param pagination Defines the pagination parameters. This parameter exists in alpha.
     *     (required)
     * @return ApiResponse&lt;ListReverseEtlModels200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ListReverseEtlModels200Response> listReverseEtlModelsWithHttpInfo(
            PaginationInput pagination) throws ApiException {
        okhttp3.Call localVarCall = listReverseEtlModelsValidateBeforeCall(pagination, null);
        Type localVarReturnType = new TypeToken<ListReverseEtlModels200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Reverse Etl Models (asynchronously) Returns a list of Reverse ETL Models.
     *
     * @param pagination Defines the pagination parameters. This parameter exists in alpha.
     *     (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listReverseEtlModelsAsync(
            PaginationInput pagination,
            final ApiCallback<ListReverseEtlModels200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = listReverseEtlModelsValidateBeforeCall(pagination, _callback);
        Type localVarReturnType = new TypeToken<ListReverseEtlModels200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for updateReverseEtlModel
     *
     * @param modelId (required)
     * @param updateReverseEtlModelInput (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateReverseEtlModelCall(
            String modelId,
            UpdateReverseEtlModelInput updateReverseEtlModelInput,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateReverseEtlModelInput;

        // create path and map variables
        String localVarPath =
                "/reverse-etl-models/{modelId}"
                        .replace(
                                "{" + "modelId" + "}",
                                localVarApiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/vnd.segment.v1alpha+json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "PATCH",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateReverseEtlModelValidateBeforeCall(
            String modelId,
            UpdateReverseEtlModelInput updateReverseEtlModelInput,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException(
                    "Missing the required parameter 'modelId' when calling"
                            + " updateReverseEtlModel(Async)");
        }

        // verify the required parameter 'updateReverseEtlModelInput' is set
        if (updateReverseEtlModelInput == null) {
            throw new ApiException(
                    "Missing the required parameter 'updateReverseEtlModelInput' when calling"
                            + " updateReverseEtlModel(Async)");
        }

        return updateReverseEtlModelCall(modelId, updateReverseEtlModelInput, _callback);
    }

    /**
     * Update Reverse Etl Model Updates an existing Reverse ETL Model. • When called, this endpoint
     * may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Model
     * Settings Saved * Model State Change Toggled
     *
     * @param modelId (required)
     * @param updateReverseEtlModelInput (required)
     * @return UpdateReverseEtlModel200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public UpdateReverseEtlModel200Response updateReverseEtlModel(
            String modelId, UpdateReverseEtlModelInput updateReverseEtlModelInput)
            throws ApiException {
        ApiResponse<UpdateReverseEtlModel200Response> localVarResp =
                updateReverseEtlModelWithHttpInfo(modelId, updateReverseEtlModelInput);
        return localVarResp.getData();
    }

    /**
     * Update Reverse Etl Model Updates an existing Reverse ETL Model. • When called, this endpoint
     * may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Model
     * Settings Saved * Model State Change Toggled
     *
     * @param modelId (required)
     * @param updateReverseEtlModelInput (required)
     * @return ApiResponse&lt;UpdateReverseEtlModel200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<UpdateReverseEtlModel200Response> updateReverseEtlModelWithHttpInfo(
            String modelId, UpdateReverseEtlModelInput updateReverseEtlModelInput)
            throws ApiException {
        okhttp3.Call localVarCall =
                updateReverseEtlModelValidateBeforeCall(modelId, updateReverseEtlModelInput, null);
        Type localVarReturnType = new TypeToken<UpdateReverseEtlModel200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Reverse Etl Model (asynchronously) Updates an existing Reverse ETL Model. • When
     * called, this endpoint may generate one or more of the following [audit
     * trail](/tag/Audit-Trail) events:* Model Settings Saved * Model State Change Toggled
     *
     * @param modelId (required)
     * @param updateReverseEtlModelInput (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateReverseEtlModelAsync(
            String modelId,
            UpdateReverseEtlModelInput updateReverseEtlModelInput,
            final ApiCallback<UpdateReverseEtlModel200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                updateReverseEtlModelValidateBeforeCall(
                        modelId, updateReverseEtlModelInput, _callback);
        Type localVarReturnType = new TypeToken<UpdateReverseEtlModel200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
