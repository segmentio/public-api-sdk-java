/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.api;


import com.google.gson.reflect.TypeToken;
import com.segment.publicapi.ApiCallback;
import com.segment.publicapi.ApiClient;
import com.segment.publicapi.ApiException;
import com.segment.publicapi.ApiResponse;
import com.segment.publicapi.Configuration;
import com.segment.publicapi.Pair;
import com.segment.publicapi.models.CreateFilterForDestination200Response;
import com.segment.publicapi.models.CreateFilterForDestinationV1Input;
import com.segment.publicapi.models.GetFilterInDestination200Response;
import com.segment.publicapi.models.ListFiltersFromDestination200Response;
import com.segment.publicapi.models.PaginationInput;
import com.segment.publicapi.models.PreviewDestinationFilter200Response;
import com.segment.publicapi.models.PreviewDestinationFilterV1Input;
import com.segment.publicapi.models.RemoveFilterFromDestination200Response;
import com.segment.publicapi.models.UpdateFilterForDestination200Response;
import com.segment.publicapi.models.UpdateFilterForDestinationV1Input;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DestinationFiltersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DestinationFiltersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DestinationFiltersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createFilterForDestination
     *
     * @param destinationId (required)
     * @param createFilterForDestinationV1Input (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createFilterForDestinationCall(
            String destinationId,
            CreateFilterForDestinationV1Input createFilterForDestinationV1Input,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createFilterForDestinationV1Input;

        // create path and map variables
        String localVarPath =
                "/destination/{destinationId}/filters"
                        .replaceAll(
                                "\\{" + "destinationId" + "\\}",
                                localVarApiClient.escapeString(destinationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1+json",
            "application/json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.segment.v1+json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFilterForDestinationValidateBeforeCall(
            String destinationId,
            CreateFilterForDestinationV1Input createFilterForDestinationV1Input,
            final ApiCallback _callback)
            throws ApiException {

        // verify the required parameter 'destinationId' is set
        if (destinationId == null) {
            throw new ApiException(
                    "Missing the required parameter 'destinationId' when calling"
                            + " createFilterForDestination(Async)");
        }

        // verify the required parameter 'createFilterForDestinationV1Input' is set
        if (createFilterForDestinationV1Input == null) {
            throw new ApiException(
                    "Missing the required parameter 'createFilterForDestinationV1Input' when"
                            + " calling createFilterForDestination(Async)");
        }

        okhttp3.Call localVarCall =
                createFilterForDestinationCall(
                        destinationId, createFilterForDestinationV1Input, _callback);
        return localVarCall;
    }

    /**
     * Create Filter for Destination Creates a filter in a Destination. • When called, this endpoint
     * may generate the &#x60;Destination Filter Created&#x60; event in the [audit
     * trail](/tag/Audit-Trail).
     *
     * @param destinationId (required)
     * @param createFilterForDestinationV1Input (required)
     * @return CreateFilterForDestination200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public CreateFilterForDestination200Response createFilterForDestination(
            String destinationId,
            CreateFilterForDestinationV1Input createFilterForDestinationV1Input)
            throws ApiException {
        ApiResponse<CreateFilterForDestination200Response> localVarResp =
                createFilterForDestinationWithHttpInfo(
                        destinationId, createFilterForDestinationV1Input);
        return localVarResp.getData();
    }

    /**
     * Create Filter for Destination Creates a filter in a Destination. • When called, this endpoint
     * may generate the &#x60;Destination Filter Created&#x60; event in the [audit
     * trail](/tag/Audit-Trail).
     *
     * @param destinationId (required)
     * @param createFilterForDestinationV1Input (required)
     * @return ApiResponse&lt;CreateFilterForDestination200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CreateFilterForDestination200Response>
            createFilterForDestinationWithHttpInfo(
                    String destinationId,
                    CreateFilterForDestinationV1Input createFilterForDestinationV1Input)
                    throws ApiException {
        okhttp3.Call localVarCall =
                createFilterForDestinationValidateBeforeCall(
                        destinationId, createFilterForDestinationV1Input, null);
        Type localVarReturnType =
                new TypeToken<CreateFilterForDestination200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Filter for Destination (asynchronously) Creates a filter in a Destination. • When
     * called, this endpoint may generate the &#x60;Destination Filter Created&#x60; event in the
     * [audit trail](/tag/Audit-Trail).
     *
     * @param destinationId (required)
     * @param createFilterForDestinationV1Input (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createFilterForDestinationAsync(
            String destinationId,
            CreateFilterForDestinationV1Input createFilterForDestinationV1Input,
            final ApiCallback<CreateFilterForDestination200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                createFilterForDestinationValidateBeforeCall(
                        destinationId, createFilterForDestinationV1Input, _callback);
        Type localVarReturnType =
                new TypeToken<CreateFilterForDestination200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFilterInDestination
     *
     * @param destinationId (required)
     * @param filterId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getFilterInDestinationCall(
            String destinationId, String filterId, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/destination/{destinationId}/filters/{filterId}"
                        .replaceAll(
                                "\\{" + "destinationId" + "\\}",
                                localVarApiClient.escapeString(destinationId.toString()))
                        .replaceAll(
                                "\\{" + "filterId" + "\\}",
                                localVarApiClient.escapeString(filterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1+json",
            "application/json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};

        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFilterInDestinationValidateBeforeCall(
            String destinationId, String filterId, final ApiCallback _callback)
            throws ApiException {

        // verify the required parameter 'destinationId' is set
        if (destinationId == null) {
            throw new ApiException(
                    "Missing the required parameter 'destinationId' when calling"
                            + " getFilterInDestination(Async)");
        }

        // verify the required parameter 'filterId' is set
        if (filterId == null) {
            throw new ApiException(
                    "Missing the required parameter 'filterId' when calling"
                            + " getFilterInDestination(Async)");
        }

        okhttp3.Call localVarCall = getFilterInDestinationCall(destinationId, filterId, _callback);
        return localVarCall;
    }

    /**
     * Get Filter in Destination Gets a Destination filter by id.
     *
     * @param destinationId (required)
     * @param filterId (required)
     * @return GetFilterInDestination200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public GetFilterInDestination200Response getFilterInDestination(
            String destinationId, String filterId) throws ApiException {
        ApiResponse<GetFilterInDestination200Response> localVarResp =
                getFilterInDestinationWithHttpInfo(destinationId, filterId);
        return localVarResp.getData();
    }

    /**
     * Get Filter in Destination Gets a Destination filter by id.
     *
     * @param destinationId (required)
     * @param filterId (required)
     * @return ApiResponse&lt;GetFilterInDestination200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<GetFilterInDestination200Response> getFilterInDestinationWithHttpInfo(
            String destinationId, String filterId) throws ApiException {
        okhttp3.Call localVarCall =
                getFilterInDestinationValidateBeforeCall(destinationId, filterId, null);
        Type localVarReturnType = new TypeToken<GetFilterInDestination200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Filter in Destination (asynchronously) Gets a Destination filter by id.
     *
     * @param destinationId (required)
     * @param filterId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getFilterInDestinationAsync(
            String destinationId,
            String filterId,
            final ApiCallback<GetFilterInDestination200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                getFilterInDestinationValidateBeforeCall(destinationId, filterId, _callback);
        Type localVarReturnType = new TypeToken<GetFilterInDestination200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listFiltersFromDestination
     *
     * @param destinationId (required)
     * @param pagination Pagination options. This parameter exists in v1. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listFiltersFromDestinationCall(
            String destinationId, PaginationInput pagination, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/destination/{destinationId}/filters"
                        .replaceAll(
                                "\\{" + "destinationId" + "\\}",
                                localVarApiClient.escapeString(destinationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pagination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination", pagination));
        }

        final String[] localVarAccepts = {
            "application/vnd.segment.v1+json",
            "application/json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};

        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFiltersFromDestinationValidateBeforeCall(
            String destinationId, PaginationInput pagination, final ApiCallback _callback)
            throws ApiException {

        // verify the required parameter 'destinationId' is set
        if (destinationId == null) {
            throw new ApiException(
                    "Missing the required parameter 'destinationId' when calling"
                            + " listFiltersFromDestination(Async)");
        }

        // verify the required parameter 'pagination' is set
        if (pagination == null) {
            throw new ApiException(
                    "Missing the required parameter 'pagination' when calling"
                            + " listFiltersFromDestination(Async)");
        }

        okhttp3.Call localVarCall =
                listFiltersFromDestinationCall(destinationId, pagination, _callback);
        return localVarCall;
    }

    /**
     * List Filters from Destination Lists filters for a Destination.
     *
     * @param destinationId (required)
     * @param pagination Pagination options. This parameter exists in v1. (required)
     * @return ListFiltersFromDestination200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ListFiltersFromDestination200Response listFiltersFromDestination(
            String destinationId, PaginationInput pagination) throws ApiException {
        ApiResponse<ListFiltersFromDestination200Response> localVarResp =
                listFiltersFromDestinationWithHttpInfo(destinationId, pagination);
        return localVarResp.getData();
    }

    /**
     * List Filters from Destination Lists filters for a Destination.
     *
     * @param destinationId (required)
     * @param pagination Pagination options. This parameter exists in v1. (required)
     * @return ApiResponse&lt;ListFiltersFromDestination200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ListFiltersFromDestination200Response>
            listFiltersFromDestinationWithHttpInfo(String destinationId, PaginationInput pagination)
                    throws ApiException {
        okhttp3.Call localVarCall =
                listFiltersFromDestinationValidateBeforeCall(destinationId, pagination, null);
        Type localVarReturnType =
                new TypeToken<ListFiltersFromDestination200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Filters from Destination (asynchronously) Lists filters for a Destination.
     *
     * @param destinationId (required)
     * @param pagination Pagination options. This parameter exists in v1. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listFiltersFromDestinationAsync(
            String destinationId,
            PaginationInput pagination,
            final ApiCallback<ListFiltersFromDestination200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                listFiltersFromDestinationValidateBeforeCall(destinationId, pagination, _callback);
        Type localVarReturnType =
                new TypeToken<ListFiltersFromDestination200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for previewDestinationFilter
     *
     * @param previewDestinationFilterV1Input (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call previewDestinationFilterCall(
            PreviewDestinationFilterV1Input previewDestinationFilterV1Input,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = previewDestinationFilterV1Input;

        // create path and map variables
        String localVarPath = "/destination/filters/preview";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1+json",
            "application/json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.segment.v1+json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call previewDestinationFilterValidateBeforeCall(
            PreviewDestinationFilterV1Input previewDestinationFilterV1Input,
            final ApiCallback _callback)
            throws ApiException {

        // verify the required parameter 'previewDestinationFilterV1Input' is set
        if (previewDestinationFilterV1Input == null) {
            throw new ApiException(
                    "Missing the required parameter 'previewDestinationFilterV1Input' when calling"
                            + " previewDestinationFilter(Async)");
        }

        okhttp3.Call localVarCall =
                previewDestinationFilterCall(previewDestinationFilterV1Input, _callback);
        return localVarCall;
    }

    /**
     * Preview Destination Filter Simulates the application of a Destination filter to a provided
     * JSON payload.
     *
     * @param previewDestinationFilterV1Input (required)
     * @return PreviewDestinationFilter200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public PreviewDestinationFilter200Response previewDestinationFilter(
            PreviewDestinationFilterV1Input previewDestinationFilterV1Input) throws ApiException {
        ApiResponse<PreviewDestinationFilter200Response> localVarResp =
                previewDestinationFilterWithHttpInfo(previewDestinationFilterV1Input);
        return localVarResp.getData();
    }

    /**
     * Preview Destination Filter Simulates the application of a Destination filter to a provided
     * JSON payload.
     *
     * @param previewDestinationFilterV1Input (required)
     * @return ApiResponse&lt;PreviewDestinationFilter200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<PreviewDestinationFilter200Response> previewDestinationFilterWithHttpInfo(
            PreviewDestinationFilterV1Input previewDestinationFilterV1Input) throws ApiException {
        okhttp3.Call localVarCall =
                previewDestinationFilterValidateBeforeCall(previewDestinationFilterV1Input, null);
        Type localVarReturnType = new TypeToken<PreviewDestinationFilter200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Preview Destination Filter (asynchronously) Simulates the application of a Destination filter
     * to a provided JSON payload.
     *
     * @param previewDestinationFilterV1Input (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call previewDestinationFilterAsync(
            PreviewDestinationFilterV1Input previewDestinationFilterV1Input,
            final ApiCallback<PreviewDestinationFilter200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                previewDestinationFilterValidateBeforeCall(
                        previewDestinationFilterV1Input, _callback);
        Type localVarReturnType = new TypeToken<PreviewDestinationFilter200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeFilterFromDestination
     *
     * @param destinationId (required)
     * @param filterId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call removeFilterFromDestinationCall(
            String destinationId, String filterId, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/destination/{destinationId}/filters/{filterId}"
                        .replaceAll(
                                "\\{" + "destinationId" + "\\}",
                                localVarApiClient.escapeString(destinationId.toString()))
                        .replaceAll(
                                "\\{" + "filterId" + "\\}",
                                localVarApiClient.escapeString(filterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1+json",
            "application/json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};

        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "DELETE",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFilterFromDestinationValidateBeforeCall(
            String destinationId, String filterId, final ApiCallback _callback)
            throws ApiException {

        // verify the required parameter 'destinationId' is set
        if (destinationId == null) {
            throw new ApiException(
                    "Missing the required parameter 'destinationId' when calling"
                            + " removeFilterFromDestination(Async)");
        }

        // verify the required parameter 'filterId' is set
        if (filterId == null) {
            throw new ApiException(
                    "Missing the required parameter 'filterId' when calling"
                            + " removeFilterFromDestination(Async)");
        }

        okhttp3.Call localVarCall =
                removeFilterFromDestinationCall(destinationId, filterId, _callback);
        return localVarCall;
    }

    /**
     * Remove Filter from Destination Deletes a Destination filter. • When called, this endpoint may
     * generate the &#x60;Destination Filter Deleted&#x60; event in the [audit
     * trail](/tag/Audit-Trail).
     *
     * @param destinationId (required)
     * @param filterId (required)
     * @return RemoveFilterFromDestination200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public RemoveFilterFromDestination200Response removeFilterFromDestination(
            String destinationId, String filterId) throws ApiException {
        ApiResponse<RemoveFilterFromDestination200Response> localVarResp =
                removeFilterFromDestinationWithHttpInfo(destinationId, filterId);
        return localVarResp.getData();
    }

    /**
     * Remove Filter from Destination Deletes a Destination filter. • When called, this endpoint may
     * generate the &#x60;Destination Filter Deleted&#x60; event in the [audit
     * trail](/tag/Audit-Trail).
     *
     * @param destinationId (required)
     * @param filterId (required)
     * @return ApiResponse&lt;RemoveFilterFromDestination200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RemoveFilterFromDestination200Response>
            removeFilterFromDestinationWithHttpInfo(String destinationId, String filterId)
                    throws ApiException {
        okhttp3.Call localVarCall =
                removeFilterFromDestinationValidateBeforeCall(destinationId, filterId, null);
        Type localVarReturnType =
                new TypeToken<RemoveFilterFromDestination200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove Filter from Destination (asynchronously) Deletes a Destination filter. • When called,
     * this endpoint may generate the &#x60;Destination Filter Deleted&#x60; event in the [audit
     * trail](/tag/Audit-Trail).
     *
     * @param destinationId (required)
     * @param filterId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call removeFilterFromDestinationAsync(
            String destinationId,
            String filterId,
            final ApiCallback<RemoveFilterFromDestination200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                removeFilterFromDestinationValidateBeforeCall(destinationId, filterId, _callback);
        Type localVarReturnType =
                new TypeToken<RemoveFilterFromDestination200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateFilterForDestination
     *
     * @param destinationId (required)
     * @param filterId (required)
     * @param updateFilterForDestinationV1Input (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateFilterForDestinationCall(
            String destinationId,
            String filterId,
            UpdateFilterForDestinationV1Input updateFilterForDestinationV1Input,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateFilterForDestinationV1Input;

        // create path and map variables
        String localVarPath =
                "/destination/{destinationId}/filters/{filterId}"
                        .replaceAll(
                                "\\{" + "destinationId" + "\\}",
                                localVarApiClient.escapeString(destinationId.toString()))
                        .replaceAll(
                                "\\{" + "filterId" + "\\}",
                                localVarApiClient.escapeString(filterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1+json",
            "application/json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.segment.v1+json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "PATCH",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFilterForDestinationValidateBeforeCall(
            String destinationId,
            String filterId,
            UpdateFilterForDestinationV1Input updateFilterForDestinationV1Input,
            final ApiCallback _callback)
            throws ApiException {

        // verify the required parameter 'destinationId' is set
        if (destinationId == null) {
            throw new ApiException(
                    "Missing the required parameter 'destinationId' when calling"
                            + " updateFilterForDestination(Async)");
        }

        // verify the required parameter 'filterId' is set
        if (filterId == null) {
            throw new ApiException(
                    "Missing the required parameter 'filterId' when calling"
                            + " updateFilterForDestination(Async)");
        }

        // verify the required parameter 'updateFilterForDestinationV1Input' is set
        if (updateFilterForDestinationV1Input == null) {
            throw new ApiException(
                    "Missing the required parameter 'updateFilterForDestinationV1Input' when"
                            + " calling updateFilterForDestination(Async)");
        }

        okhttp3.Call localVarCall =
                updateFilterForDestinationCall(
                        destinationId, filterId, updateFilterForDestinationV1Input, _callback);
        return localVarCall;
    }

    /**
     * Update Filter for Destination Updates a filter in a Destination. • When called, this endpoint
     * may generate one or more of the following [audit trail](/tag/Audit-Trail) events:*
     * Destination Filter Enabled * Destination Filter Disabled
     *
     * @param destinationId (required)
     * @param filterId (required)
     * @param updateFilterForDestinationV1Input (required)
     * @return UpdateFilterForDestination200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public UpdateFilterForDestination200Response updateFilterForDestination(
            String destinationId,
            String filterId,
            UpdateFilterForDestinationV1Input updateFilterForDestinationV1Input)
            throws ApiException {
        ApiResponse<UpdateFilterForDestination200Response> localVarResp =
                updateFilterForDestinationWithHttpInfo(
                        destinationId, filterId, updateFilterForDestinationV1Input);
        return localVarResp.getData();
    }

    /**
     * Update Filter for Destination Updates a filter in a Destination. • When called, this endpoint
     * may generate one or more of the following [audit trail](/tag/Audit-Trail) events:*
     * Destination Filter Enabled * Destination Filter Disabled
     *
     * @param destinationId (required)
     * @param filterId (required)
     * @param updateFilterForDestinationV1Input (required)
     * @return ApiResponse&lt;UpdateFilterForDestination200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<UpdateFilterForDestination200Response>
            updateFilterForDestinationWithHttpInfo(
                    String destinationId,
                    String filterId,
                    UpdateFilterForDestinationV1Input updateFilterForDestinationV1Input)
                    throws ApiException {
        okhttp3.Call localVarCall =
                updateFilterForDestinationValidateBeforeCall(
                        destinationId, filterId, updateFilterForDestinationV1Input, null);
        Type localVarReturnType =
                new TypeToken<UpdateFilterForDestination200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Filter for Destination (asynchronously) Updates a filter in a Destination. • When
     * called, this endpoint may generate one or more of the following [audit
     * trail](/tag/Audit-Trail) events:* Destination Filter Enabled * Destination Filter Disabled
     *
     * @param destinationId (required)
     * @param filterId (required)
     * @param updateFilterForDestinationV1Input (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateFilterForDestinationAsync(
            String destinationId,
            String filterId,
            UpdateFilterForDestinationV1Input updateFilterForDestinationV1Input,
            final ApiCallback<UpdateFilterForDestination200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                updateFilterForDestinationValidateBeforeCall(
                        destinationId, filterId, updateFilterForDestinationV1Input, _callback);
        Type localVarReturnType =
                new TypeToken<UpdateFilterForDestination200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
