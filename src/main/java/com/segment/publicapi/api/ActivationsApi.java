/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.api;

import com.google.gson.reflect.TypeToken;
import com.segment.publicapi.ApiCallback;
import com.segment.publicapi.ApiClient;
import com.segment.publicapi.ApiException;
import com.segment.publicapi.ApiResponse;
import com.segment.publicapi.Configuration;
import com.segment.publicapi.Pair;
import com.segment.publicapi.models.AddActivationToAudience200Response;
import com.segment.publicapi.models.AddActivationToAudienceAlphaInput;
import com.segment.publicapi.models.AddDestinationToAudience200Response;
import com.segment.publicapi.models.AddDestinationToAudienceAlphaInput;
import com.segment.publicapi.models.GetActivationFromAudience200Response;
import com.segment.publicapi.models.ListActivationsFromAudience200Response;
import com.segment.publicapi.models.ListDestinationsFromAudience200Response;
import com.segment.publicapi.models.PaginationInput;
import com.segment.publicapi.models.RemoveActivationFromAudience200Response;
import com.segment.publicapi.models.UpdateActivationForAudience200Response;
import com.segment.publicapi.models.UpdateActivationForAudienceAlphaInput;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ActivationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ActivationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ActivationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addActivationToAudience
     *
     * @param spaceId (required)
     * @param audienceId (required)
     * @param connectionId (required)
     * @param addActivationToAudienceAlphaInput (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call addActivationToAudienceCall(
            String spaceId,
            String audienceId,
            String connectionId,
            AddActivationToAudienceAlphaInput addActivationToAudienceAlphaInput,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addActivationToAudienceAlphaInput;

        // create path and map variables
        String localVarPath =
                "/spaces/{spaceId}/audiences/{audienceId}/destination-connections/{connectionId}/activations"
                        .replace(
                                "{" + "spaceId" + "}",
                                localVarApiClient.escapeString(spaceId.toString()))
                        .replace(
                                "{" + "audienceId" + "}",
                                localVarApiClient.escapeString(audienceId.toString()))
                        .replace(
                                "{" + "connectionId" + "}",
                                localVarApiClient.escapeString(connectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/vnd.segment.v1alpha+json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addActivationToAudienceValidateBeforeCall(
            String spaceId,
            String audienceId,
            String connectionId,
            AddActivationToAudienceAlphaInput addActivationToAudienceAlphaInput,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'spaceId' when calling"
                            + " addActivationToAudience(Async)");
        }

        // verify the required parameter 'audienceId' is set
        if (audienceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'audienceId' when calling"
                            + " addActivationToAudience(Async)");
        }

        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException(
                    "Missing the required parameter 'connectionId' when calling"
                            + " addActivationToAudience(Async)");
        }

        // verify the required parameter 'addActivationToAudienceAlphaInput' is set
        if (addActivationToAudienceAlphaInput == null) {
            throw new ApiException(
                    "Missing the required parameter 'addActivationToAudienceAlphaInput' when"
                            + " calling addActivationToAudience(Async)");
        }

        return addActivationToAudienceCall(
                spaceId, audienceId, connectionId, addActivationToAudienceAlphaInput, _callback);
    }

    /**
     * Add Activation to Audience Creates Activation. • This endpoint is in **Alpha** testing.
     * Please submit any feedback by sending an email to friends@segment.com. • In order to
     * successfully call this endpoint, the specified Workspace needs to have the Audience feature
     * enabled. Please reach out to your customer success manager for more information. • When
     * called, this endpoint may generate the &#x60;Activation Created&#x60; event in the [audit
     * trail](/tag/Audit-Trail). The rate limit for this endpoint is 50 requests per minute, which
     * is lower than the default due to access pattern restrictions. Once reached, this endpoint
     * will respond with the 429 HTTP status code with headers indicating the limit parameters. See
     * [Rate Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param spaceId (required)
     * @param audienceId (required)
     * @param connectionId (required)
     * @param addActivationToAudienceAlphaInput (required)
     * @return AddActivationToAudience200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public AddActivationToAudience200Response addActivationToAudience(
            String spaceId,
            String audienceId,
            String connectionId,
            AddActivationToAudienceAlphaInput addActivationToAudienceAlphaInput)
            throws ApiException {
        ApiResponse<AddActivationToAudience200Response> localVarResp =
                addActivationToAudienceWithHttpInfo(
                        spaceId, audienceId, connectionId, addActivationToAudienceAlphaInput);
        return localVarResp.getData();
    }

    /**
     * Add Activation to Audience Creates Activation. • This endpoint is in **Alpha** testing.
     * Please submit any feedback by sending an email to friends@segment.com. • In order to
     * successfully call this endpoint, the specified Workspace needs to have the Audience feature
     * enabled. Please reach out to your customer success manager for more information. • When
     * called, this endpoint may generate the &#x60;Activation Created&#x60; event in the [audit
     * trail](/tag/Audit-Trail). The rate limit for this endpoint is 50 requests per minute, which
     * is lower than the default due to access pattern restrictions. Once reached, this endpoint
     * will respond with the 429 HTTP status code with headers indicating the limit parameters. See
     * [Rate Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param spaceId (required)
     * @param audienceId (required)
     * @param connectionId (required)
     * @param addActivationToAudienceAlphaInput (required)
     * @return ApiResponse&lt;AddActivationToAudience200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<AddActivationToAudience200Response> addActivationToAudienceWithHttpInfo(
            String spaceId,
            String audienceId,
            String connectionId,
            AddActivationToAudienceAlphaInput addActivationToAudienceAlphaInput)
            throws ApiException {
        okhttp3.Call localVarCall =
                addActivationToAudienceValidateBeforeCall(
                        spaceId, audienceId, connectionId, addActivationToAudienceAlphaInput, null);
        Type localVarReturnType = new TypeToken<AddActivationToAudience200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Activation to Audience (asynchronously) Creates Activation. • This endpoint is in
     * **Alpha** testing. Please submit any feedback by sending an email to friends@segment.com. •
     * In order to successfully call this endpoint, the specified Workspace needs to have the
     * Audience feature enabled. Please reach out to your customer success manager for more
     * information. • When called, this endpoint may generate the &#x60;Activation Created&#x60;
     * event in the [audit trail](/tag/Audit-Trail). The rate limit for this endpoint is 50 requests
     * per minute, which is lower than the default due to access pattern restrictions. Once reached,
     * this endpoint will respond with the 429 HTTP status code with headers indicating the limit
     * parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param spaceId (required)
     * @param audienceId (required)
     * @param connectionId (required)
     * @param addActivationToAudienceAlphaInput (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call addActivationToAudienceAsync(
            String spaceId,
            String audienceId,
            String connectionId,
            AddActivationToAudienceAlphaInput addActivationToAudienceAlphaInput,
            final ApiCallback<AddActivationToAudience200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                addActivationToAudienceValidateBeforeCall(
                        spaceId,
                        audienceId,
                        connectionId,
                        addActivationToAudienceAlphaInput,
                        _callback);
        Type localVarReturnType = new TypeToken<AddActivationToAudience200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for addDestinationToAudience
     *
     * @param spaceId (required)
     * @param audienceId (required)
     * @param addDestinationToAudienceAlphaInput (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call addDestinationToAudienceCall(
            String spaceId,
            String audienceId,
            AddDestinationToAudienceAlphaInput addDestinationToAudienceAlphaInput,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addDestinationToAudienceAlphaInput;

        // create path and map variables
        String localVarPath =
                "/spaces/{spaceId}/audiences/{audienceId}/destination-connections"
                        .replace(
                                "{" + "spaceId" + "}",
                                localVarApiClient.escapeString(spaceId.toString()))
                        .replace(
                                "{" + "audienceId" + "}",
                                localVarApiClient.escapeString(audienceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/vnd.segment.v1alpha+json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addDestinationToAudienceValidateBeforeCall(
            String spaceId,
            String audienceId,
            AddDestinationToAudienceAlphaInput addDestinationToAudienceAlphaInput,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'spaceId' when calling"
                            + " addDestinationToAudience(Async)");
        }

        // verify the required parameter 'audienceId' is set
        if (audienceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'audienceId' when calling"
                            + " addDestinationToAudience(Async)");
        }

        // verify the required parameter 'addDestinationToAudienceAlphaInput' is set
        if (addDestinationToAudienceAlphaInput == null) {
            throw new ApiException(
                    "Missing the required parameter 'addDestinationToAudienceAlphaInput' when"
                            + " calling addDestinationToAudience(Async)");
        }

        return addDestinationToAudienceCall(
                spaceId, audienceId, addDestinationToAudienceAlphaInput, _callback);
    }

    /**
     * Add Destination to Audience Adds a Destination to an Audience. • This endpoint is in
     * **Alpha** testing. Please submit any feedback by sending an email to friends@segment.com. •
     * In order to successfully call this endpoint, the specified Workspace needs to have the
     * Audience feature enabled. Please reach out to your customer success manager for more
     * information. • When called, this endpoint may generate the &#x60;Destination Added into
     * Audience&#x60; event in the [audit trail](/tag/Audit-Trail). The rate limit for this endpoint
     * is 50 requests per minute, which is lower than the default due to access pattern
     * restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with
     * headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more
     * information.
     *
     * @param spaceId (required)
     * @param audienceId (required)
     * @param addDestinationToAudienceAlphaInput (required)
     * @return AddDestinationToAudience200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public AddDestinationToAudience200Response addDestinationToAudience(
            String spaceId,
            String audienceId,
            AddDestinationToAudienceAlphaInput addDestinationToAudienceAlphaInput)
            throws ApiException {
        ApiResponse<AddDestinationToAudience200Response> localVarResp =
                addDestinationToAudienceWithHttpInfo(
                        spaceId, audienceId, addDestinationToAudienceAlphaInput);
        return localVarResp.getData();
    }

    /**
     * Add Destination to Audience Adds a Destination to an Audience. • This endpoint is in
     * **Alpha** testing. Please submit any feedback by sending an email to friends@segment.com. •
     * In order to successfully call this endpoint, the specified Workspace needs to have the
     * Audience feature enabled. Please reach out to your customer success manager for more
     * information. • When called, this endpoint may generate the &#x60;Destination Added into
     * Audience&#x60; event in the [audit trail](/tag/Audit-Trail). The rate limit for this endpoint
     * is 50 requests per minute, which is lower than the default due to access pattern
     * restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with
     * headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more
     * information.
     *
     * @param spaceId (required)
     * @param audienceId (required)
     * @param addDestinationToAudienceAlphaInput (required)
     * @return ApiResponse&lt;AddDestinationToAudience200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<AddDestinationToAudience200Response> addDestinationToAudienceWithHttpInfo(
            String spaceId,
            String audienceId,
            AddDestinationToAudienceAlphaInput addDestinationToAudienceAlphaInput)
            throws ApiException {
        okhttp3.Call localVarCall =
                addDestinationToAudienceValidateBeforeCall(
                        spaceId, audienceId, addDestinationToAudienceAlphaInput, null);
        Type localVarReturnType = new TypeToken<AddDestinationToAudience200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Destination to Audience (asynchronously) Adds a Destination to an Audience. • This
     * endpoint is in **Alpha** testing. Please submit any feedback by sending an email to
     * friends@segment.com. • In order to successfully call this endpoint, the specified Workspace
     * needs to have the Audience feature enabled. Please reach out to your customer success manager
     * for more information. • When called, this endpoint may generate the &#x60;Destination Added
     * into Audience&#x60; event in the [audit trail](/tag/Audit-Trail). The rate limit for this
     * endpoint is 50 requests per minute, which is lower than the default due to access pattern
     * restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with
     * headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more
     * information.
     *
     * @param spaceId (required)
     * @param audienceId (required)
     * @param addDestinationToAudienceAlphaInput (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call addDestinationToAudienceAsync(
            String spaceId,
            String audienceId,
            AddDestinationToAudienceAlphaInput addDestinationToAudienceAlphaInput,
            final ApiCallback<AddDestinationToAudience200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                addDestinationToAudienceValidateBeforeCall(
                        spaceId, audienceId, addDestinationToAudienceAlphaInput, _callback);
        Type localVarReturnType = new TypeToken<AddDestinationToAudience200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getActivationFromAudience
     *
     * @param spaceId (required)
     * @param audienceId (required)
     * @param id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getActivationFromAudienceCall(
            String spaceId, String audienceId, String id, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/spaces/{spaceId}/audiences/{audienceId}/activations/{id}"
                        .replace(
                                "{" + "spaceId" + "}",
                                localVarApiClient.escapeString(spaceId.toString()))
                        .replace(
                                "{" + "audienceId" + "}",
                                localVarApiClient.escapeString(audienceId.toString()))
                        .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getActivationFromAudienceValidateBeforeCall(
            String spaceId, String audienceId, String id, final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'spaceId' when calling"
                            + " getActivationFromAudience(Async)");
        }

        // verify the required parameter 'audienceId' is set
        if (audienceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'audienceId' when calling"
                            + " getActivationFromAudience(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling"
                            + " getActivationFromAudience(Async)");
        }

        return getActivationFromAudienceCall(spaceId, audienceId, id, _callback);
    }

    /**
     * Get Activation from Audience Gets a single Activation by id. The rate limit for this endpoint
     * is 60 requests per minute, which is lower than the default due to access pattern
     * restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with
     * headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more
     * information.
     *
     * @param spaceId (required)
     * @param audienceId (required)
     * @param id (required)
     * @return GetActivationFromAudience200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public GetActivationFromAudience200Response getActivationFromAudience(
            String spaceId, String audienceId, String id) throws ApiException {
        ApiResponse<GetActivationFromAudience200Response> localVarResp =
                getActivationFromAudienceWithHttpInfo(spaceId, audienceId, id);
        return localVarResp.getData();
    }

    /**
     * Get Activation from Audience Gets a single Activation by id. The rate limit for this endpoint
     * is 60 requests per minute, which is lower than the default due to access pattern
     * restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with
     * headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more
     * information.
     *
     * @param spaceId (required)
     * @param audienceId (required)
     * @param id (required)
     * @return ApiResponse&lt;GetActivationFromAudience200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<GetActivationFromAudience200Response> getActivationFromAudienceWithHttpInfo(
            String spaceId, String audienceId, String id) throws ApiException {
        okhttp3.Call localVarCall =
                getActivationFromAudienceValidateBeforeCall(spaceId, audienceId, id, null);
        Type localVarReturnType =
                new TypeToken<GetActivationFromAudience200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Activation from Audience (asynchronously) Gets a single Activation by id. The rate limit
     * for this endpoint is 60 requests per minute, which is lower than the default due to access
     * pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code
     * with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more
     * information.
     *
     * @param spaceId (required)
     * @param audienceId (required)
     * @param id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getActivationFromAudienceAsync(
            String spaceId,
            String audienceId,
            String id,
            final ApiCallback<GetActivationFromAudience200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                getActivationFromAudienceValidateBeforeCall(spaceId, audienceId, id, _callback);
        Type localVarReturnType =
                new TypeToken<GetActivationFromAudience200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for listActivationsFromAudience
     *
     * @param spaceId (required)
     * @param audienceId (required)
     * @param pagination Optional pagination. This parameter exists in alpha. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listActivationsFromAudienceCall(
            String spaceId,
            String audienceId,
            PaginationInput pagination,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/spaces/{spaceId}/audiences/{audienceId}/activations"
                        .replace(
                                "{" + "spaceId" + "}",
                                localVarApiClient.escapeString(spaceId.toString()))
                        .replace(
                                "{" + "audienceId" + "}",
                                localVarApiClient.escapeString(audienceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pagination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination", pagination));
        }

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listActivationsFromAudienceValidateBeforeCall(
            String spaceId,
            String audienceId,
            PaginationInput pagination,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'spaceId' when calling"
                            + " listActivationsFromAudience(Async)");
        }

        // verify the required parameter 'audienceId' is set
        if (audienceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'audienceId' when calling"
                            + " listActivationsFromAudience(Async)");
        }

        return listActivationsFromAudienceCall(spaceId, audienceId, pagination, _callback);
    }

    /**
     * List Activations from Audience Lists all Activations. The rate limit for this endpoint is 60
     * requests per minute, which is lower than the default due to access pattern restrictions. Once
     * reached, this endpoint will respond with the 429 HTTP status code with headers indicating the
     * limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param spaceId (required)
     * @param audienceId (required)
     * @param pagination Optional pagination. This parameter exists in alpha. (optional)
     * @return ListActivationsFromAudience200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ListActivationsFromAudience200Response listActivationsFromAudience(
            String spaceId, String audienceId, PaginationInput pagination) throws ApiException {
        ApiResponse<ListActivationsFromAudience200Response> localVarResp =
                listActivationsFromAudienceWithHttpInfo(spaceId, audienceId, pagination);
        return localVarResp.getData();
    }

    /**
     * List Activations from Audience Lists all Activations. The rate limit for this endpoint is 60
     * requests per minute, which is lower than the default due to access pattern restrictions. Once
     * reached, this endpoint will respond with the 429 HTTP status code with headers indicating the
     * limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param spaceId (required)
     * @param audienceId (required)
     * @param pagination Optional pagination. This parameter exists in alpha. (optional)
     * @return ApiResponse&lt;ListActivationsFromAudience200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ListActivationsFromAudience200Response>
            listActivationsFromAudienceWithHttpInfo(
                    String spaceId, String audienceId, PaginationInput pagination)
                    throws ApiException {
        okhttp3.Call localVarCall =
                listActivationsFromAudienceValidateBeforeCall(
                        spaceId, audienceId, pagination, null);
        Type localVarReturnType =
                new TypeToken<ListActivationsFromAudience200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Activations from Audience (asynchronously) Lists all Activations. The rate limit for
     * this endpoint is 60 requests per minute, which is lower than the default due to access
     * pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code
     * with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more
     * information.
     *
     * @param spaceId (required)
     * @param audienceId (required)
     * @param pagination Optional pagination. This parameter exists in alpha. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listActivationsFromAudienceAsync(
            String spaceId,
            String audienceId,
            PaginationInput pagination,
            final ApiCallback<ListActivationsFromAudience200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                listActivationsFromAudienceValidateBeforeCall(
                        spaceId, audienceId, pagination, _callback);
        Type localVarReturnType =
                new TypeToken<ListActivationsFromAudience200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for listDestinationsFromAudience
     *
     * @param spaceId (required)
     * @param audienceId (required)
     * @param pagination Optional pagination. This parameter exists in alpha. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listDestinationsFromAudienceCall(
            String spaceId,
            String audienceId,
            PaginationInput pagination,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/spaces/{spaceId}/audiences/{audienceId}/destination-connections"
                        .replace(
                                "{" + "spaceId" + "}",
                                localVarApiClient.escapeString(spaceId.toString()))
                        .replace(
                                "{" + "audienceId" + "}",
                                localVarApiClient.escapeString(audienceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pagination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination", pagination));
        }

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDestinationsFromAudienceValidateBeforeCall(
            String spaceId,
            String audienceId,
            PaginationInput pagination,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'spaceId' when calling"
                            + " listDestinationsFromAudience(Async)");
        }

        // verify the required parameter 'audienceId' is set
        if (audienceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'audienceId' when calling"
                            + " listDestinationsFromAudience(Async)");
        }

        return listDestinationsFromAudienceCall(spaceId, audienceId, pagination, _callback);
    }

    /**
     * List Destinations from Audience Lists all Destinations from an Audience. • This endpoint is
     * in **Alpha** testing. Please submit any feedback by sending an email to friends@segment.com.
     * • In order to successfully call this endpoint, the specified Workspace needs to have the
     * Audience feature enabled. Please reach out to your customer success manager for more
     * information. • When called, this endpoint may generate the &#x60;Destinations Listed from
     * Audience&#x60; event in the [audit trail](/tag/Audit-Trail). The rate limit for this endpoint
     * is 50 requests per minute, which is lower than the default due to access pattern
     * restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with
     * headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more
     * information.
     *
     * @param spaceId (required)
     * @param audienceId (required)
     * @param pagination Optional pagination. This parameter exists in alpha. (optional)
     * @return ListDestinationsFromAudience200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ListDestinationsFromAudience200Response listDestinationsFromAudience(
            String spaceId, String audienceId, PaginationInput pagination) throws ApiException {
        ApiResponse<ListDestinationsFromAudience200Response> localVarResp =
                listDestinationsFromAudienceWithHttpInfo(spaceId, audienceId, pagination);
        return localVarResp.getData();
    }

    /**
     * List Destinations from Audience Lists all Destinations from an Audience. • This endpoint is
     * in **Alpha** testing. Please submit any feedback by sending an email to friends@segment.com.
     * • In order to successfully call this endpoint, the specified Workspace needs to have the
     * Audience feature enabled. Please reach out to your customer success manager for more
     * information. • When called, this endpoint may generate the &#x60;Destinations Listed from
     * Audience&#x60; event in the [audit trail](/tag/Audit-Trail). The rate limit for this endpoint
     * is 50 requests per minute, which is lower than the default due to access pattern
     * restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with
     * headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more
     * information.
     *
     * @param spaceId (required)
     * @param audienceId (required)
     * @param pagination Optional pagination. This parameter exists in alpha. (optional)
     * @return ApiResponse&lt;ListDestinationsFromAudience200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ListDestinationsFromAudience200Response>
            listDestinationsFromAudienceWithHttpInfo(
                    String spaceId, String audienceId, PaginationInput pagination)
                    throws ApiException {
        okhttp3.Call localVarCall =
                listDestinationsFromAudienceValidateBeforeCall(
                        spaceId, audienceId, pagination, null);
        Type localVarReturnType =
                new TypeToken<ListDestinationsFromAudience200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Destinations from Audience (asynchronously) Lists all Destinations from an Audience. •
     * This endpoint is in **Alpha** testing. Please submit any feedback by sending an email to
     * friends@segment.com. • In order to successfully call this endpoint, the specified Workspace
     * needs to have the Audience feature enabled. Please reach out to your customer success manager
     * for more information. • When called, this endpoint may generate the &#x60;Destinations Listed
     * from Audience&#x60; event in the [audit trail](/tag/Audit-Trail). The rate limit for this
     * endpoint is 50 requests per minute, which is lower than the default due to access pattern
     * restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with
     * headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more
     * information.
     *
     * @param spaceId (required)
     * @param audienceId (required)
     * @param pagination Optional pagination. This parameter exists in alpha. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listDestinationsFromAudienceAsync(
            String spaceId,
            String audienceId,
            PaginationInput pagination,
            final ApiCallback<ListDestinationsFromAudience200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                listDestinationsFromAudienceValidateBeforeCall(
                        spaceId, audienceId, pagination, _callback);
        Type localVarReturnType =
                new TypeToken<ListDestinationsFromAudience200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for removeActivationFromAudience
     *
     * @param spaceId (required)
     * @param audienceId (required)
     * @param id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call removeActivationFromAudienceCall(
            String spaceId, String audienceId, String id, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/spaces/{spaceId}/audiences/{audienceId}/activations/{id}"
                        .replace(
                                "{" + "spaceId" + "}",
                                localVarApiClient.escapeString(spaceId.toString()))
                        .replace(
                                "{" + "audienceId" + "}",
                                localVarApiClient.escapeString(audienceId.toString()))
                        .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "DELETE",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeActivationFromAudienceValidateBeforeCall(
            String spaceId, String audienceId, String id, final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'spaceId' when calling"
                            + " removeActivationFromAudience(Async)");
        }

        // verify the required parameter 'audienceId' is set
        if (audienceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'audienceId' when calling"
                            + " removeActivationFromAudience(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling"
                            + " removeActivationFromAudience(Async)");
        }

        return removeActivationFromAudienceCall(spaceId, audienceId, id, _callback);
    }

    /**
     * Remove Activation from Audience Deletes an Activation. The rate limit for this endpoint is 50
     * requests per minute, which is lower than the default due to access pattern restrictions. Once
     * reached, this endpoint will respond with the 429 HTTP status code with headers indicating the
     * limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param spaceId (required)
     * @param audienceId (required)
     * @param id (required)
     * @return RemoveActivationFromAudience200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public RemoveActivationFromAudience200Response removeActivationFromAudience(
            String spaceId, String audienceId, String id) throws ApiException {
        ApiResponse<RemoveActivationFromAudience200Response> localVarResp =
                removeActivationFromAudienceWithHttpInfo(spaceId, audienceId, id);
        return localVarResp.getData();
    }

    /**
     * Remove Activation from Audience Deletes an Activation. The rate limit for this endpoint is 50
     * requests per minute, which is lower than the default due to access pattern restrictions. Once
     * reached, this endpoint will respond with the 429 HTTP status code with headers indicating the
     * limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param spaceId (required)
     * @param audienceId (required)
     * @param id (required)
     * @return ApiResponse&lt;RemoveActivationFromAudience200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RemoveActivationFromAudience200Response>
            removeActivationFromAudienceWithHttpInfo(String spaceId, String audienceId, String id)
                    throws ApiException {
        okhttp3.Call localVarCall =
                removeActivationFromAudienceValidateBeforeCall(spaceId, audienceId, id, null);
        Type localVarReturnType =
                new TypeToken<RemoveActivationFromAudience200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove Activation from Audience (asynchronously) Deletes an Activation. The rate limit for
     * this endpoint is 50 requests per minute, which is lower than the default due to access
     * pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code
     * with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more
     * information.
     *
     * @param spaceId (required)
     * @param audienceId (required)
     * @param id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call removeActivationFromAudienceAsync(
            String spaceId,
            String audienceId,
            String id,
            final ApiCallback<RemoveActivationFromAudience200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                removeActivationFromAudienceValidateBeforeCall(spaceId, audienceId, id, _callback);
        Type localVarReturnType =
                new TypeToken<RemoveActivationFromAudience200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for updateActivationForAudience
     *
     * @param spaceId (required)
     * @param audienceId (required)
     * @param id (required)
     * @param updateActivationForAudienceAlphaInput (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateActivationForAudienceCall(
            String spaceId,
            String audienceId,
            String id,
            UpdateActivationForAudienceAlphaInput updateActivationForAudienceAlphaInput,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateActivationForAudienceAlphaInput;

        // create path and map variables
        String localVarPath =
                "/spaces/{spaceId}/audiences/{audienceId}/activations/{id}"
                        .replace(
                                "{" + "spaceId" + "}",
                                localVarApiClient.escapeString(spaceId.toString()))
                        .replace(
                                "{" + "audienceId" + "}",
                                localVarApiClient.escapeString(audienceId.toString()))
                        .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1alpha+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/vnd.segment.v1alpha+json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "PATCH",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateActivationForAudienceValidateBeforeCall(
            String spaceId,
            String audienceId,
            String id,
            UpdateActivationForAudienceAlphaInput updateActivationForAudienceAlphaInput,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'spaceId' when calling"
                            + " updateActivationForAudience(Async)");
        }

        // verify the required parameter 'audienceId' is set
        if (audienceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'audienceId' when calling"
                            + " updateActivationForAudience(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException(
                    "Missing the required parameter 'id' when calling"
                            + " updateActivationForAudience(Async)");
        }

        // verify the required parameter 'updateActivationForAudienceAlphaInput' is set
        if (updateActivationForAudienceAlphaInput == null) {
            throw new ApiException(
                    "Missing the required parameter 'updateActivationForAudienceAlphaInput' when"
                            + " calling updateActivationForAudience(Async)");
        }

        return updateActivationForAudienceCall(
                spaceId, audienceId, id, updateActivationForAudienceAlphaInput, _callback);
    }

    /**
     * Update Activation for Audience Updates an Activation. The rate limit for this endpoint is 50
     * requests per minute, which is lower than the default due to access pattern restrictions. Once
     * reached, this endpoint will respond with the 429 HTTP status code with headers indicating the
     * limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param spaceId (required)
     * @param audienceId (required)
     * @param id (required)
     * @param updateActivationForAudienceAlphaInput (required)
     * @return UpdateActivationForAudience200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public UpdateActivationForAudience200Response updateActivationForAudience(
            String spaceId,
            String audienceId,
            String id,
            UpdateActivationForAudienceAlphaInput updateActivationForAudienceAlphaInput)
            throws ApiException {
        ApiResponse<UpdateActivationForAudience200Response> localVarResp =
                updateActivationForAudienceWithHttpInfo(
                        spaceId, audienceId, id, updateActivationForAudienceAlphaInput);
        return localVarResp.getData();
    }

    /**
     * Update Activation for Audience Updates an Activation. The rate limit for this endpoint is 50
     * requests per minute, which is lower than the default due to access pattern restrictions. Once
     * reached, this endpoint will respond with the 429 HTTP status code with headers indicating the
     * limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param spaceId (required)
     * @param audienceId (required)
     * @param id (required)
     * @param updateActivationForAudienceAlphaInput (required)
     * @return ApiResponse&lt;UpdateActivationForAudience200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<UpdateActivationForAudience200Response>
            updateActivationForAudienceWithHttpInfo(
                    String spaceId,
                    String audienceId,
                    String id,
                    UpdateActivationForAudienceAlphaInput updateActivationForAudienceAlphaInput)
                    throws ApiException {
        okhttp3.Call localVarCall =
                updateActivationForAudienceValidateBeforeCall(
                        spaceId, audienceId, id, updateActivationForAudienceAlphaInput, null);
        Type localVarReturnType =
                new TypeToken<UpdateActivationForAudience200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Activation for Audience (asynchronously) Updates an Activation. The rate limit for
     * this endpoint is 50 requests per minute, which is lower than the default due to access
     * pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code
     * with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more
     * information.
     *
     * @param spaceId (required)
     * @param audienceId (required)
     * @param id (required)
     * @param updateActivationForAudienceAlphaInput (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateActivationForAudienceAsync(
            String spaceId,
            String audienceId,
            String id,
            UpdateActivationForAudienceAlphaInput updateActivationForAudienceAlphaInput,
            final ApiCallback<UpdateActivationForAudience200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                updateActivationForAudienceValidateBeforeCall(
                        spaceId, audienceId, id, updateActivationForAudienceAlphaInput, _callback);
        Type localVarReturnType =
                new TypeToken<UpdateActivationForAudience200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
