/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.api;


import com.google.gson.reflect.TypeToken;
import com.segment.publicapi.ApiCallback;
import com.segment.publicapi.ApiClient;
import com.segment.publicapi.ApiException;
import com.segment.publicapi.ApiResponse;
import com.segment.publicapi.Configuration;
import com.segment.publicapi.Pair;
import com.segment.publicapi.models.CreateTransformation200Response;
import com.segment.publicapi.models.CreateTransformationV1Input;
import com.segment.publicapi.models.DeleteTransformation200Response;
import com.segment.publicapi.models.GetTransformation200Response;
import com.segment.publicapi.models.ListTransformations200Response;
import com.segment.publicapi.models.PaginationInput;
import com.segment.publicapi.models.UpdateTransformation200Response;
import com.segment.publicapi.models.UpdateTransformationV1Input;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransformationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TransformationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransformationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createTransformation
     *
     * @param createTransformationV1Input (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createTransformationCall(
            CreateTransformationV1Input createTransformationV1Input, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTransformationV1Input;

        // create path and map variables
        String localVarPath = "/transformations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1+json",
            "application/json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.segment.v1+json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTransformationValidateBeforeCall(
            CreateTransformationV1Input createTransformationV1Input, final ApiCallback _callback)
            throws ApiException {

        // verify the required parameter 'createTransformationV1Input' is set
        if (createTransformationV1Input == null) {
            throw new ApiException(
                    "Missing the required parameter 'createTransformationV1Input' when calling"
                            + " createTransformation(Async)");
        }

        okhttp3.Call localVarCall =
                createTransformationCall(createTransformationV1Input, _callback);
        return localVarCall;
    }

    /**
     * Create Transformation Creates a new Transformation. When called, this endpoint may generate
     * the &#x60;Transformation Created&#x60; [Audit Trail](/tag/Audit-Trail) event. **Note**: In
     * order to successfully call this endpoint, the specified Workspace needs to have the Protocols
     * feature enabled. Please reach out to your customer success manager for more information.
     *
     * @param createTransformationV1Input (required)
     * @return CreateTransformation200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public CreateTransformation200Response createTransformation(
            CreateTransformationV1Input createTransformationV1Input) throws ApiException {
        ApiResponse<CreateTransformation200Response> localVarResp =
                createTransformationWithHttpInfo(createTransformationV1Input);
        return localVarResp.getData();
    }

    /**
     * Create Transformation Creates a new Transformation. When called, this endpoint may generate
     * the &#x60;Transformation Created&#x60; [Audit Trail](/tag/Audit-Trail) event. **Note**: In
     * order to successfully call this endpoint, the specified Workspace needs to have the Protocols
     * feature enabled. Please reach out to your customer success manager for more information.
     *
     * @param createTransformationV1Input (required)
     * @return ApiResponse&lt;CreateTransformation200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CreateTransformation200Response> createTransformationWithHttpInfo(
            CreateTransformationV1Input createTransformationV1Input) throws ApiException {
        okhttp3.Call localVarCall =
                createTransformationValidateBeforeCall(createTransformationV1Input, null);
        Type localVarReturnType = new TypeToken<CreateTransformation200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Transformation (asynchronously) Creates a new Transformation. When called, this
     * endpoint may generate the &#x60;Transformation Created&#x60; [Audit Trail](/tag/Audit-Trail)
     * event. **Note**: In order to successfully call this endpoint, the specified Workspace needs
     * to have the Protocols feature enabled. Please reach out to your customer success manager for
     * more information.
     *
     * @param createTransformationV1Input (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createTransformationAsync(
            CreateTransformationV1Input createTransformationV1Input,
            final ApiCallback<CreateTransformation200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                createTransformationValidateBeforeCall(createTransformationV1Input, _callback);
        Type localVarReturnType = new TypeToken<CreateTransformation200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTransformation
     *
     * @param transformationId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteTransformationCall(
            String transformationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/transformations/{transformationId}"
                        .replaceAll(
                                "\\{" + "transformationId" + "\\}",
                                localVarApiClient.escapeString(transformationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1+json",
            "application/json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};

        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "DELETE",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTransformationValidateBeforeCall(
            String transformationId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'transformationId' is set
        if (transformationId == null) {
            throw new ApiException(
                    "Missing the required parameter 'transformationId' when calling"
                            + " deleteTransformation(Async)");
        }

        okhttp3.Call localVarCall = deleteTransformationCall(transformationId, _callback);
        return localVarCall;
    }

    /**
     * Delete Transformation Deletes a Transformation. When called, this endpoint may generate the
     * &#x60;Transformation Deleted&#x60; [Audit Trail](/tag/Audit-Trail) event. **Note**: In order
     * to successfully call this endpoint, the specified Workspace needs to have the Protocols
     * feature enabled. Please reach out to your customer success manager for more information.
     *
     * @param transformationId (required)
     * @return DeleteTransformation200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public DeleteTransformation200Response deleteTransformation(String transformationId)
            throws ApiException {
        ApiResponse<DeleteTransformation200Response> localVarResp =
                deleteTransformationWithHttpInfo(transformationId);
        return localVarResp.getData();
    }

    /**
     * Delete Transformation Deletes a Transformation. When called, this endpoint may generate the
     * &#x60;Transformation Deleted&#x60; [Audit Trail](/tag/Audit-Trail) event. **Note**: In order
     * to successfully call this endpoint, the specified Workspace needs to have the Protocols
     * feature enabled. Please reach out to your customer success manager for more information.
     *
     * @param transformationId (required)
     * @return ApiResponse&lt;DeleteTransformation200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<DeleteTransformation200Response> deleteTransformationWithHttpInfo(
            String transformationId) throws ApiException {
        okhttp3.Call localVarCall = deleteTransformationValidateBeforeCall(transformationId, null);
        Type localVarReturnType = new TypeToken<DeleteTransformation200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Transformation (asynchronously) Deletes a Transformation. When called, this endpoint
     * may generate the &#x60;Transformation Deleted&#x60; [Audit Trail](/tag/Audit-Trail) event.
     * **Note**: In order to successfully call this endpoint, the specified Workspace needs to have
     * the Protocols feature enabled. Please reach out to your customer success manager for more
     * information.
     *
     * @param transformationId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteTransformationAsync(
            String transformationId, final ApiCallback<DeleteTransformation200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                deleteTransformationValidateBeforeCall(transformationId, _callback);
        Type localVarReturnType = new TypeToken<DeleteTransformation200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTransformation
     *
     * @param transformationId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getTransformationCall(String transformationId, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/transformations/{transformationId}"
                        .replaceAll(
                                "\\{" + "transformationId" + "\\}",
                                localVarApiClient.escapeString(transformationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1+json",
            "application/json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};

        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransformationValidateBeforeCall(
            String transformationId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'transformationId' is set
        if (transformationId == null) {
            throw new ApiException(
                    "Missing the required parameter 'transformationId' when calling"
                            + " getTransformation(Async)");
        }

        okhttp3.Call localVarCall = getTransformationCall(transformationId, _callback);
        return localVarCall;
    }

    /**
     * Get Transformation Gets a Transformation. **Note**: In order to successfully call this
     * endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach
     * out to your customer success manager for more information.
     *
     * @param transformationId (required)
     * @return GetTransformation200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public GetTransformation200Response getTransformation(String transformationId)
            throws ApiException {
        ApiResponse<GetTransformation200Response> localVarResp =
                getTransformationWithHttpInfo(transformationId);
        return localVarResp.getData();
    }

    /**
     * Get Transformation Gets a Transformation. **Note**: In order to successfully call this
     * endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach
     * out to your customer success manager for more information.
     *
     * @param transformationId (required)
     * @return ApiResponse&lt;GetTransformation200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<GetTransformation200Response> getTransformationWithHttpInfo(
            String transformationId) throws ApiException {
        okhttp3.Call localVarCall = getTransformationValidateBeforeCall(transformationId, null);
        Type localVarReturnType = new TypeToken<GetTransformation200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Transformation (asynchronously) Gets a Transformation. **Note**: In order to successfully
     * call this endpoint, the specified Workspace needs to have the Protocols feature enabled.
     * Please reach out to your customer success manager for more information.
     *
     * @param transformationId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getTransformationAsync(
            String transformationId, final ApiCallback<GetTransformation200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                getTransformationValidateBeforeCall(transformationId, _callback);
        Type localVarReturnType = new TypeToken<GetTransformation200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTransformations
     *
     * @param pagination Pagination options. This parameter exists in v1. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listTransformationsCall(
            PaginationInput pagination, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transformations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pagination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination", pagination));
        }

        final String[] localVarAccepts = {
            "application/vnd.segment.v1+json",
            "application/json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};

        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTransformationsValidateBeforeCall(
            PaginationInput pagination, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'pagination' is set
        if (pagination == null) {
            throw new ApiException(
                    "Missing the required parameter 'pagination' when calling"
                            + " listTransformations(Async)");
        }

        okhttp3.Call localVarCall = listTransformationsCall(pagination, _callback);
        return localVarCall;
    }

    /**
     * List Transformations Lists all Transformations in the Workspace. **Note**: In order to
     * successfully call this endpoint, the specified Workspace needs to have the Protocols feature
     * enabled. Please reach out to your customer success manager for more information.
     *
     * @param pagination Pagination options. This parameter exists in v1. (required)
     * @return ListTransformations200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ListTransformations200Response listTransformations(PaginationInput pagination)
            throws ApiException {
        ApiResponse<ListTransformations200Response> localVarResp =
                listTransformationsWithHttpInfo(pagination);
        return localVarResp.getData();
    }

    /**
     * List Transformations Lists all Transformations in the Workspace. **Note**: In order to
     * successfully call this endpoint, the specified Workspace needs to have the Protocols feature
     * enabled. Please reach out to your customer success manager for more information.
     *
     * @param pagination Pagination options. This parameter exists in v1. (required)
     * @return ApiResponse&lt;ListTransformations200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ListTransformations200Response> listTransformationsWithHttpInfo(
            PaginationInput pagination) throws ApiException {
        okhttp3.Call localVarCall = listTransformationsValidateBeforeCall(pagination, null);
        Type localVarReturnType = new TypeToken<ListTransformations200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Transformations (asynchronously) Lists all Transformations in the Workspace. **Note**:
     * In order to successfully call this endpoint, the specified Workspace needs to have the
     * Protocols feature enabled. Please reach out to your customer success manager for more
     * information.
     *
     * @param pagination Pagination options. This parameter exists in v1. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listTransformationsAsync(
            PaginationInput pagination, final ApiCallback<ListTransformations200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = listTransformationsValidateBeforeCall(pagination, _callback);
        Type localVarReturnType = new TypeToken<ListTransformations200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTransformation
     *
     * @param transformationId (required)
     * @param updateTransformationV1Input (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateTransformationCall(
            String transformationId,
            UpdateTransformationV1Input updateTransformationV1Input,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateTransformationV1Input;

        // create path and map variables
        String localVarPath =
                "/transformations/{transformationId}"
                        .replaceAll(
                                "\\{" + "transformationId" + "\\}",
                                localVarApiClient.escapeString(transformationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1+json",
            "application/json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.segment.v1+json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "PATCH",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTransformationValidateBeforeCall(
            String transformationId,
            UpdateTransformationV1Input updateTransformationV1Input,
            final ApiCallback _callback)
            throws ApiException {

        // verify the required parameter 'transformationId' is set
        if (transformationId == null) {
            throw new ApiException(
                    "Missing the required parameter 'transformationId' when calling"
                            + " updateTransformation(Async)");
        }

        // verify the required parameter 'updateTransformationV1Input' is set
        if (updateTransformationV1Input == null) {
            throw new ApiException(
                    "Missing the required parameter 'updateTransformationV1Input' when calling"
                            + " updateTransformation(Async)");
        }

        okhttp3.Call localVarCall =
                updateTransformationCall(transformationId, updateTransformationV1Input, _callback);
        return localVarCall;
    }

    /**
     * Update Transformation Updates an existing Transformation. When called, this endpoint may
     * generate the &#x60;Transformation Updated&#x60; [Audit Trail](/tag/Audit-Trail) event.
     * **Note**: In order to successfully call this endpoint, the specified Workspace needs to have
     * the Protocols feature enabled. Please reach out to your customer success manager for more
     * information.
     *
     * @param transformationId (required)
     * @param updateTransformationV1Input (required)
     * @return UpdateTransformation200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public UpdateTransformation200Response updateTransformation(
            String transformationId, UpdateTransformationV1Input updateTransformationV1Input)
            throws ApiException {
        ApiResponse<UpdateTransformation200Response> localVarResp =
                updateTransformationWithHttpInfo(transformationId, updateTransformationV1Input);
        return localVarResp.getData();
    }

    /**
     * Update Transformation Updates an existing Transformation. When called, this endpoint may
     * generate the &#x60;Transformation Updated&#x60; [Audit Trail](/tag/Audit-Trail) event.
     * **Note**: In order to successfully call this endpoint, the specified Workspace needs to have
     * the Protocols feature enabled. Please reach out to your customer success manager for more
     * information.
     *
     * @param transformationId (required)
     * @param updateTransformationV1Input (required)
     * @return ApiResponse&lt;UpdateTransformation200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<UpdateTransformation200Response> updateTransformationWithHttpInfo(
            String transformationId, UpdateTransformationV1Input updateTransformationV1Input)
            throws ApiException {
        okhttp3.Call localVarCall =
                updateTransformationValidateBeforeCall(
                        transformationId, updateTransformationV1Input, null);
        Type localVarReturnType = new TypeToken<UpdateTransformation200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Transformation (asynchronously) Updates an existing Transformation. When called, this
     * endpoint may generate the &#x60;Transformation Updated&#x60; [Audit Trail](/tag/Audit-Trail)
     * event. **Note**: In order to successfully call this endpoint, the specified Workspace needs
     * to have the Protocols feature enabled. Please reach out to your customer success manager for
     * more information.
     *
     * @param transformationId (required)
     * @param updateTransformationV1Input (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateTransformationAsync(
            String transformationId,
            UpdateTransformationV1Input updateTransformationV1Input,
            final ApiCallback<UpdateTransformation200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                updateTransformationValidateBeforeCall(
                        transformationId, updateTransformationV1Input, _callback);
        Type localVarReturnType = new TypeToken<UpdateTransformation200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
