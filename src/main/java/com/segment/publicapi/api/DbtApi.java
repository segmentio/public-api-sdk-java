/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.api;

import com.google.gson.reflect.TypeToken;
import com.segment.publicapi.ApiCallback;
import com.segment.publicapi.ApiClient;
import com.segment.publicapi.ApiException;
import com.segment.publicapi.ApiResponse;
import com.segment.publicapi.Configuration;
import com.segment.publicapi.Pair;
import com.segment.publicapi.models.CreateDbtModelSyncTrigger200Response;
import com.segment.publicapi.models.CreateDbtModelSyncTriggerInput;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DbtApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DbtApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DbtApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createDbtModelSyncTrigger
     *
     * @param createDbtModelSyncTriggerInput (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createDbtModelSyncTriggerCall(
            CreateDbtModelSyncTriggerInput createDbtModelSyncTriggerInput,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDbtModelSyncTriggerInput;

        // create path and map variables
        String localVarPath = "/dbt-model-syncs/trigger";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1beta+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/vnd.segment.v1beta+json"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDbtModelSyncTriggerValidateBeforeCall(
            CreateDbtModelSyncTriggerInput createDbtModelSyncTriggerInput,
            final ApiCallback _callback)
            throws ApiException {
        // verify the required parameter 'createDbtModelSyncTriggerInput' is set
        if (createDbtModelSyncTriggerInput == null) {
            throw new ApiException(
                    "Missing the required parameter 'createDbtModelSyncTriggerInput' when calling"
                            + " createDbtModelSyncTrigger(Async)");
        }

        return createDbtModelSyncTriggerCall(createDbtModelSyncTriggerInput, _callback);
    }

    /**
     * Create Dbt Model Sync Trigger Creates a trigger for a new dbt model sync for a Source. The
     * rate limit for this endpoint is 10 requests per minute, which is lower than the default due
     * to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP
     * status code with headers indicating the limit parameters. See [Rate
     * Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param createDbtModelSyncTriggerInput (required)
     * @return CreateDbtModelSyncTrigger200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public CreateDbtModelSyncTrigger200Response createDbtModelSyncTrigger(
            CreateDbtModelSyncTriggerInput createDbtModelSyncTriggerInput) throws ApiException {
        ApiResponse<CreateDbtModelSyncTrigger200Response> localVarResp =
                createDbtModelSyncTriggerWithHttpInfo(createDbtModelSyncTriggerInput);
        return localVarResp.getData();
    }

    /**
     * Create Dbt Model Sync Trigger Creates a trigger for a new dbt model sync for a Source. The
     * rate limit for this endpoint is 10 requests per minute, which is lower than the default due
     * to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP
     * status code with headers indicating the limit parameters. See [Rate
     * Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param createDbtModelSyncTriggerInput (required)
     * @return ApiResponse&lt;CreateDbtModelSyncTrigger200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CreateDbtModelSyncTrigger200Response> createDbtModelSyncTriggerWithHttpInfo(
            CreateDbtModelSyncTriggerInput createDbtModelSyncTriggerInput) throws ApiException {
        okhttp3.Call localVarCall =
                createDbtModelSyncTriggerValidateBeforeCall(createDbtModelSyncTriggerInput, null);
        Type localVarReturnType =
                new TypeToken<CreateDbtModelSyncTrigger200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Dbt Model Sync Trigger (asynchronously) Creates a trigger for a new dbt model sync for
     * a Source. The rate limit for this endpoint is 10 requests per minute, which is lower than the
     * default due to access pattern restrictions. Once reached, this endpoint will respond with the
     * 429 HTTP status code with headers indicating the limit parameters. See [Rate
     * Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param createDbtModelSyncTriggerInput (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createDbtModelSyncTriggerAsync(
            CreateDbtModelSyncTriggerInput createDbtModelSyncTriggerInput,
            final ApiCallback<CreateDbtModelSyncTrigger200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                createDbtModelSyncTriggerValidateBeforeCall(
                        createDbtModelSyncTriggerInput, _callback);
        Type localVarReturnType =
                new TypeToken<CreateDbtModelSyncTrigger200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
