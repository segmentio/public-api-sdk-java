/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.api;


import com.google.gson.reflect.TypeToken;
import com.segment.publicapi.ApiCallback;
import com.segment.publicapi.ApiClient;
import com.segment.publicapi.ApiException;
import com.segment.publicapi.ApiResponse;
import com.segment.publicapi.Configuration;
import com.segment.publicapi.Pair;
import com.segment.publicapi.models.AddPermissionsToUserGroup200Response;
import com.segment.publicapi.models.AddPermissionsToUserGroupV1Input;
import com.segment.publicapi.models.AddUsersToUserGroup200Response;
import com.segment.publicapi.models.AddUsersToUserGroupV1Input;
import com.segment.publicapi.models.CreateUserGroup200Response;
import com.segment.publicapi.models.CreateUserGroupV1Input;
import com.segment.publicapi.models.DeleteUserGroup200Response;
import com.segment.publicapi.models.GetUserGroup200Response;
import com.segment.publicapi.models.ListInvitesFromUserGroup200Response;
import com.segment.publicapi.models.ListUserGroups200Response;
import com.segment.publicapi.models.ListUsersFromUserGroup200Response;
import com.segment.publicapi.models.PaginationInput;
import com.segment.publicapi.models.RemoveUsersFromUserGroup200Response;
import com.segment.publicapi.models.ReplacePermissionsForUserGroup200Response;
import com.segment.publicapi.models.ReplacePermissionsForUserGroupV1Input;
import com.segment.publicapi.models.ReplaceUsersInUserGroup200Response;
import com.segment.publicapi.models.ReplaceUsersInUserGroupV1Input;
import com.segment.publicapi.models.UpdateUserGroup200Response;
import com.segment.publicapi.models.UpdateUserGroupV1Input;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IamGroupsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IamGroupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IamGroupsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addPermissionsToUserGroup
     *
     * @param userGroupId (required)
     * @param addPermissionsToUserGroupV1Input (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call addPermissionsToUserGroupCall(
            String userGroupId,
            AddPermissionsToUserGroupV1Input addPermissionsToUserGroupV1Input,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addPermissionsToUserGroupV1Input;

        // create path and map variables
        String localVarPath =
                "/groups/{userGroupId}/permissions"
                        .replaceAll(
                                "\\{" + "userGroupId" + "\\}",
                                localVarApiClient.escapeString(userGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1+json",
            "application/json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.segment.v1+json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addPermissionsToUserGroupValidateBeforeCall(
            String userGroupId,
            AddPermissionsToUserGroupV1Input addPermissionsToUserGroupV1Input,
            final ApiCallback _callback)
            throws ApiException {

        // verify the required parameter 'userGroupId' is set
        if (userGroupId == null) {
            throw new ApiException(
                    "Missing the required parameter 'userGroupId' when calling"
                            + " addPermissionsToUserGroup(Async)");
        }

        // verify the required parameter 'addPermissionsToUserGroupV1Input' is set
        if (addPermissionsToUserGroupV1Input == null) {
            throw new ApiException(
                    "Missing the required parameter 'addPermissionsToUserGroupV1Input' when calling"
                            + " addPermissionsToUserGroup(Async)");
        }

        okhttp3.Call localVarCall =
                addPermissionsToUserGroupCall(
                        userGroupId, addPermissionsToUserGroupV1Input, _callback);
        return localVarCall;
    }

    /**
     * Add Permissions to User Group Adds a list of access permissions to a user group. When called,
     * this endpoint may generate one or more of the following [Audit Trail](/tag/Audit-Trail)
     * events: * Policy Created * User Group Policy Updated The rate limit for this endpoint is 60
     * requests per minute, which is lower than the default due to access pattern restrictions. Once
     * reached, this endpoint will respond with the 429 HTTP status code with headers indicating the
     * limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param userGroupId (required)
     * @param addPermissionsToUserGroupV1Input (required)
     * @return AddPermissionsToUserGroup200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public AddPermissionsToUserGroup200Response addPermissionsToUserGroup(
            String userGroupId, AddPermissionsToUserGroupV1Input addPermissionsToUserGroupV1Input)
            throws ApiException {
        ApiResponse<AddPermissionsToUserGroup200Response> localVarResp =
                addPermissionsToUserGroupWithHttpInfo(
                        userGroupId, addPermissionsToUserGroupV1Input);
        return localVarResp.getData();
    }

    /**
     * Add Permissions to User Group Adds a list of access permissions to a user group. When called,
     * this endpoint may generate one or more of the following [Audit Trail](/tag/Audit-Trail)
     * events: * Policy Created * User Group Policy Updated The rate limit for this endpoint is 60
     * requests per minute, which is lower than the default due to access pattern restrictions. Once
     * reached, this endpoint will respond with the 429 HTTP status code with headers indicating the
     * limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param userGroupId (required)
     * @param addPermissionsToUserGroupV1Input (required)
     * @return ApiResponse&lt;AddPermissionsToUserGroup200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<AddPermissionsToUserGroup200Response> addPermissionsToUserGroupWithHttpInfo(
            String userGroupId, AddPermissionsToUserGroupV1Input addPermissionsToUserGroupV1Input)
            throws ApiException {
        okhttp3.Call localVarCall =
                addPermissionsToUserGroupValidateBeforeCall(
                        userGroupId, addPermissionsToUserGroupV1Input, null);
        Type localVarReturnType =
                new TypeToken<AddPermissionsToUserGroup200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Permissions to User Group (asynchronously) Adds a list of access permissions to a user
     * group. When called, this endpoint may generate one or more of the following [Audit
     * Trail](/tag/Audit-Trail) events: * Policy Created * User Group Policy Updated The rate limit
     * for this endpoint is 60 requests per minute, which is lower than the default due to access
     * pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code
     * with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more
     * information.
     *
     * @param userGroupId (required)
     * @param addPermissionsToUserGroupV1Input (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call addPermissionsToUserGroupAsync(
            String userGroupId,
            AddPermissionsToUserGroupV1Input addPermissionsToUserGroupV1Input,
            final ApiCallback<AddPermissionsToUserGroup200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                addPermissionsToUserGroupValidateBeforeCall(
                        userGroupId, addPermissionsToUserGroupV1Input, _callback);
        Type localVarReturnType =
                new TypeToken<AddPermissionsToUserGroup200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addUsersToUserGroup
     *
     * @param userGroupId (required)
     * @param addUsersToUserGroupV1Input (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call addUsersToUserGroupCall(
            String userGroupId,
            AddUsersToUserGroupV1Input addUsersToUserGroupV1Input,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addUsersToUserGroupV1Input;

        // create path and map variables
        String localVarPath =
                "/groups/{userGroupId}/users"
                        .replaceAll(
                                "\\{" + "userGroupId" + "\\}",
                                localVarApiClient.escapeString(userGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1+json",
            "application/json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.segment.v1+json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addUsersToUserGroupValidateBeforeCall(
            String userGroupId,
            AddUsersToUserGroupV1Input addUsersToUserGroupV1Input,
            final ApiCallback _callback)
            throws ApiException {

        // verify the required parameter 'userGroupId' is set
        if (userGroupId == null) {
            throw new ApiException(
                    "Missing the required parameter 'userGroupId' when calling"
                            + " addUsersToUserGroup(Async)");
        }

        // verify the required parameter 'addUsersToUserGroupV1Input' is set
        if (addUsersToUserGroupV1Input == null) {
            throw new ApiException(
                    "Missing the required parameter 'addUsersToUserGroupV1Input' when calling"
                            + " addUsersToUserGroup(Async)");
        }

        okhttp3.Call localVarCall =
                addUsersToUserGroupCall(userGroupId, addUsersToUserGroupV1Input, _callback);
        return localVarCall;
    }

    /**
     * Add Users to User Group Adds a list of users or invites to a user group. When called, this
     * endpoint may generate one or more of the following [Audit Trail](/tag/Audit-Trail) events: *
     * Subjects Added to Group * User Added To User Group The rate limit for this endpoint is 60
     * requests per minute, which is lower than the default due to access pattern restrictions. Once
     * reached, this endpoint will respond with the 429 HTTP status code with headers indicating the
     * limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param userGroupId (required)
     * @param addUsersToUserGroupV1Input (required)
     * @return AddUsersToUserGroup200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public AddUsersToUserGroup200Response addUsersToUserGroup(
            String userGroupId, AddUsersToUserGroupV1Input addUsersToUserGroupV1Input)
            throws ApiException {
        ApiResponse<AddUsersToUserGroup200Response> localVarResp =
                addUsersToUserGroupWithHttpInfo(userGroupId, addUsersToUserGroupV1Input);
        return localVarResp.getData();
    }

    /**
     * Add Users to User Group Adds a list of users or invites to a user group. When called, this
     * endpoint may generate one or more of the following [Audit Trail](/tag/Audit-Trail) events: *
     * Subjects Added to Group * User Added To User Group The rate limit for this endpoint is 60
     * requests per minute, which is lower than the default due to access pattern restrictions. Once
     * reached, this endpoint will respond with the 429 HTTP status code with headers indicating the
     * limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param userGroupId (required)
     * @param addUsersToUserGroupV1Input (required)
     * @return ApiResponse&lt;AddUsersToUserGroup200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<AddUsersToUserGroup200Response> addUsersToUserGroupWithHttpInfo(
            String userGroupId, AddUsersToUserGroupV1Input addUsersToUserGroupV1Input)
            throws ApiException {
        okhttp3.Call localVarCall =
                addUsersToUserGroupValidateBeforeCall(
                        userGroupId, addUsersToUserGroupV1Input, null);
        Type localVarReturnType = new TypeToken<AddUsersToUserGroup200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Users to User Group (asynchronously) Adds a list of users or invites to a user group.
     * When called, this endpoint may generate one or more of the following [Audit
     * Trail](/tag/Audit-Trail) events: * Subjects Added to Group * User Added To User Group The
     * rate limit for this endpoint is 60 requests per minute, which is lower than the default due
     * to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP
     * status code with headers indicating the limit parameters. See [Rate
     * Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param userGroupId (required)
     * @param addUsersToUserGroupV1Input (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call addUsersToUserGroupAsync(
            String userGroupId,
            AddUsersToUserGroupV1Input addUsersToUserGroupV1Input,
            final ApiCallback<AddUsersToUserGroup200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                addUsersToUserGroupValidateBeforeCall(
                        userGroupId, addUsersToUserGroupV1Input, _callback);
        Type localVarReturnType = new TypeToken<AddUsersToUserGroup200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createUserGroup
     *
     * @param createUserGroupV1Input (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createUserGroupCall(
            CreateUserGroupV1Input createUserGroupV1Input, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUserGroupV1Input;

        // create path and map variables
        String localVarPath = "/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1+json",
            "application/json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.segment.v1+json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUserGroupValidateBeforeCall(
            CreateUserGroupV1Input createUserGroupV1Input, final ApiCallback _callback)
            throws ApiException {

        // verify the required parameter 'createUserGroupV1Input' is set
        if (createUserGroupV1Input == null) {
            throw new ApiException(
                    "Missing the required parameter 'createUserGroupV1Input' when calling"
                            + " createUserGroup(Async)");
        }

        okhttp3.Call localVarCall = createUserGroupCall(createUserGroupV1Input, _callback);
        return localVarCall;
    }

    /**
     * Create User Group Creates a user group. When called, this endpoint may generate one or more
     * of the following [Audit Trail](/tag/Audit-Trail) events: * User Group Created * Policy
     * Created The rate limit for this endpoint is 60 requests per minute, which is lower than the
     * default due to access pattern restrictions. Once reached, this endpoint will respond with the
     * 429 HTTP status code with headers indicating the limit parameters. See [Rate
     * Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param createUserGroupV1Input (required)
     * @return CreateUserGroup200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public CreateUserGroup200Response createUserGroup(CreateUserGroupV1Input createUserGroupV1Input)
            throws ApiException {
        ApiResponse<CreateUserGroup200Response> localVarResp =
                createUserGroupWithHttpInfo(createUserGroupV1Input);
        return localVarResp.getData();
    }

    /**
     * Create User Group Creates a user group. When called, this endpoint may generate one or more
     * of the following [Audit Trail](/tag/Audit-Trail) events: * User Group Created * Policy
     * Created The rate limit for this endpoint is 60 requests per minute, which is lower than the
     * default due to access pattern restrictions. Once reached, this endpoint will respond with the
     * 429 HTTP status code with headers indicating the limit parameters. See [Rate
     * Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param createUserGroupV1Input (required)
     * @return ApiResponse&lt;CreateUserGroup200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CreateUserGroup200Response> createUserGroupWithHttpInfo(
            CreateUserGroupV1Input createUserGroupV1Input) throws ApiException {
        okhttp3.Call localVarCall = createUserGroupValidateBeforeCall(createUserGroupV1Input, null);
        Type localVarReturnType = new TypeToken<CreateUserGroup200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create User Group (asynchronously) Creates a user group. When called, this endpoint may
     * generate one or more of the following [Audit Trail](/tag/Audit-Trail) events: * User Group
     * Created * Policy Created The rate limit for this endpoint is 60 requests per minute, which is
     * lower than the default due to access pattern restrictions. Once reached, this endpoint will
     * respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate
     * Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param createUserGroupV1Input (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createUserGroupAsync(
            CreateUserGroupV1Input createUserGroupV1Input,
            final ApiCallback<CreateUserGroup200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                createUserGroupValidateBeforeCall(createUserGroupV1Input, _callback);
        Type localVarReturnType = new TypeToken<CreateUserGroup200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteUserGroup
     *
     * @param userGroupId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteUserGroupCall(String userGroupId, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/groups/{userGroupId}"
                        .replaceAll(
                                "\\{" + "userGroupId" + "\\}",
                                localVarApiClient.escapeString(userGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1+json",
            "application/json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};

        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "DELETE",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserGroupValidateBeforeCall(
            String userGroupId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'userGroupId' is set
        if (userGroupId == null) {
            throw new ApiException(
                    "Missing the required parameter 'userGroupId' when calling"
                            + " deleteUserGroup(Async)");
        }

        okhttp3.Call localVarCall = deleteUserGroupCall(userGroupId, _callback);
        return localVarCall;
    }

    /**
     * Delete User Group Removes a user group from a Workspace. When called, this endpoint may
     * generate the &#x60;User Group Deleted&#x60; [Audit Trail](/tag/Audit-Trail) event. The rate
     * limit for this endpoint is 60 requests per minute, which is lower than the default due to
     * access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP
     * status code with headers indicating the limit parameters. See [Rate
     * Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param userGroupId (required)
     * @return DeleteUserGroup200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public DeleteUserGroup200Response deleteUserGroup(String userGroupId) throws ApiException {
        ApiResponse<DeleteUserGroup200Response> localVarResp =
                deleteUserGroupWithHttpInfo(userGroupId);
        return localVarResp.getData();
    }

    /**
     * Delete User Group Removes a user group from a Workspace. When called, this endpoint may
     * generate the &#x60;User Group Deleted&#x60; [Audit Trail](/tag/Audit-Trail) event. The rate
     * limit for this endpoint is 60 requests per minute, which is lower than the default due to
     * access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP
     * status code with headers indicating the limit parameters. See [Rate
     * Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param userGroupId (required)
     * @return ApiResponse&lt;DeleteUserGroup200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<DeleteUserGroup200Response> deleteUserGroupWithHttpInfo(String userGroupId)
            throws ApiException {
        okhttp3.Call localVarCall = deleteUserGroupValidateBeforeCall(userGroupId, null);
        Type localVarReturnType = new TypeToken<DeleteUserGroup200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete User Group (asynchronously) Removes a user group from a Workspace. When called, this
     * endpoint may generate the &#x60;User Group Deleted&#x60; [Audit Trail](/tag/Audit-Trail)
     * event. The rate limit for this endpoint is 60 requests per minute, which is lower than the
     * default due to access pattern restrictions. Once reached, this endpoint will respond with the
     * 429 HTTP status code with headers indicating the limit parameters. See [Rate
     * Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param userGroupId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteUserGroupAsync(
            String userGroupId, final ApiCallback<DeleteUserGroup200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = deleteUserGroupValidateBeforeCall(userGroupId, _callback);
        Type localVarReturnType = new TypeToken<DeleteUserGroup200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserGroup
     *
     * @param userGroupId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getUserGroupCall(String userGroupId, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/groups/{userGroupId}"
                        .replaceAll(
                                "\\{" + "userGroupId" + "\\}",
                                localVarApiClient.escapeString(userGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1+json",
            "application/json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};

        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserGroupValidateBeforeCall(
            String userGroupId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'userGroupId' is set
        if (userGroupId == null) {
            throw new ApiException(
                    "Missing the required parameter 'userGroupId' when calling"
                            + " getUserGroup(Async)");
        }

        okhttp3.Call localVarCall = getUserGroupCall(userGroupId, _callback);
        return localVarCall;
    }

    /**
     * Get User Group Returns a user group.
     *
     * @param userGroupId (required)
     * @return GetUserGroup200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public GetUserGroup200Response getUserGroup(String userGroupId) throws ApiException {
        ApiResponse<GetUserGroup200Response> localVarResp = getUserGroupWithHttpInfo(userGroupId);
        return localVarResp.getData();
    }

    /**
     * Get User Group Returns a user group.
     *
     * @param userGroupId (required)
     * @return ApiResponse&lt;GetUserGroup200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<GetUserGroup200Response> getUserGroupWithHttpInfo(String userGroupId)
            throws ApiException {
        okhttp3.Call localVarCall = getUserGroupValidateBeforeCall(userGroupId, null);
        Type localVarReturnType = new TypeToken<GetUserGroup200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get User Group (asynchronously) Returns a user group.
     *
     * @param userGroupId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getUserGroupAsync(
            String userGroupId, final ApiCallback<GetUserGroup200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = getUserGroupValidateBeforeCall(userGroupId, _callback);
        Type localVarReturnType = new TypeToken<GetUserGroup200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listInvitesFromUserGroup
     *
     * @param userGroupId (required)
     * @param pagination Pagination for invites to the group. This parameter exists in v1.
     *     (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listInvitesFromUserGroupCall(
            String userGroupId, PaginationInput pagination, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/groups/{userGroupId}/invites"
                        .replaceAll(
                                "\\{" + "userGroupId" + "\\}",
                                localVarApiClient.escapeString(userGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pagination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination", pagination));
        }

        final String[] localVarAccepts = {
            "application/vnd.segment.v1+json",
            "application/json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};

        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listInvitesFromUserGroupValidateBeforeCall(
            String userGroupId, PaginationInput pagination, final ApiCallback _callback)
            throws ApiException {

        // verify the required parameter 'userGroupId' is set
        if (userGroupId == null) {
            throw new ApiException(
                    "Missing the required parameter 'userGroupId' when calling"
                            + " listInvitesFromUserGroup(Async)");
        }

        // verify the required parameter 'pagination' is set
        if (pagination == null) {
            throw new ApiException(
                    "Missing the required parameter 'pagination' when calling"
                            + " listInvitesFromUserGroup(Async)");
        }

        okhttp3.Call localVarCall =
                listInvitesFromUserGroupCall(userGroupId, pagination, _callback);
        return localVarCall;
    }

    /**
     * List Invites from User Group Returns the emails of invitees to a user group.
     *
     * @param userGroupId (required)
     * @param pagination Pagination for invites to the group. This parameter exists in v1.
     *     (required)
     * @return ListInvitesFromUserGroup200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ListInvitesFromUserGroup200Response listInvitesFromUserGroup(
            String userGroupId, PaginationInput pagination) throws ApiException {
        ApiResponse<ListInvitesFromUserGroup200Response> localVarResp =
                listInvitesFromUserGroupWithHttpInfo(userGroupId, pagination);
        return localVarResp.getData();
    }

    /**
     * List Invites from User Group Returns the emails of invitees to a user group.
     *
     * @param userGroupId (required)
     * @param pagination Pagination for invites to the group. This parameter exists in v1.
     *     (required)
     * @return ApiResponse&lt;ListInvitesFromUserGroup200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ListInvitesFromUserGroup200Response> listInvitesFromUserGroupWithHttpInfo(
            String userGroupId, PaginationInput pagination) throws ApiException {
        okhttp3.Call localVarCall =
                listInvitesFromUserGroupValidateBeforeCall(userGroupId, pagination, null);
        Type localVarReturnType = new TypeToken<ListInvitesFromUserGroup200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Invites from User Group (asynchronously) Returns the emails of invitees to a user group.
     *
     * @param userGroupId (required)
     * @param pagination Pagination for invites to the group. This parameter exists in v1.
     *     (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listInvitesFromUserGroupAsync(
            String userGroupId,
            PaginationInput pagination,
            final ApiCallback<ListInvitesFromUserGroup200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                listInvitesFromUserGroupValidateBeforeCall(userGroupId, pagination, _callback);
        Type localVarReturnType = new TypeToken<ListInvitesFromUserGroup200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listUserGroups
     *
     * @param pagination Pagination for user groups. This parameter exists in v1. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listUserGroupsCall(PaginationInput pagination, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pagination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination", pagination));
        }

        final String[] localVarAccepts = {
            "application/vnd.segment.v1+json",
            "application/json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};

        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUserGroupsValidateBeforeCall(
            PaginationInput pagination, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'pagination' is set
        if (pagination == null) {
            throw new ApiException(
                    "Missing the required parameter 'pagination' when calling"
                            + " listUserGroups(Async)");
        }

        okhttp3.Call localVarCall = listUserGroupsCall(pagination, _callback);
        return localVarCall;
    }

    /**
     * List User Groups Returns all user groups.
     *
     * @param pagination Pagination for user groups. This parameter exists in v1. (required)
     * @return ListUserGroups200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ListUserGroups200Response listUserGroups(PaginationInput pagination)
            throws ApiException {
        ApiResponse<ListUserGroups200Response> localVarResp =
                listUserGroupsWithHttpInfo(pagination);
        return localVarResp.getData();
    }

    /**
     * List User Groups Returns all user groups.
     *
     * @param pagination Pagination for user groups. This parameter exists in v1. (required)
     * @return ApiResponse&lt;ListUserGroups200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ListUserGroups200Response> listUserGroupsWithHttpInfo(
            PaginationInput pagination) throws ApiException {
        okhttp3.Call localVarCall = listUserGroupsValidateBeforeCall(pagination, null);
        Type localVarReturnType = new TypeToken<ListUserGroups200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List User Groups (asynchronously) Returns all user groups.
     *
     * @param pagination Pagination for user groups. This parameter exists in v1. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listUserGroupsAsync(
            PaginationInput pagination, final ApiCallback<ListUserGroups200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall = listUserGroupsValidateBeforeCall(pagination, _callback);
        Type localVarReturnType = new TypeToken<ListUserGroups200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listUsersFromUserGroup
     *
     * @param userGroupId (required)
     * @param pagination Pagination for members of a group. This parameter exists in v1. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listUsersFromUserGroupCall(
            String userGroupId, PaginationInput pagination, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/groups/{userGroupId}/users"
                        .replaceAll(
                                "\\{" + "userGroupId" + "\\}",
                                localVarApiClient.escapeString(userGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pagination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination", pagination));
        }

        final String[] localVarAccepts = {
            "application/vnd.segment.v1+json",
            "application/json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};

        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUsersFromUserGroupValidateBeforeCall(
            String userGroupId, PaginationInput pagination, final ApiCallback _callback)
            throws ApiException {

        // verify the required parameter 'userGroupId' is set
        if (userGroupId == null) {
            throw new ApiException(
                    "Missing the required parameter 'userGroupId' when calling"
                            + " listUsersFromUserGroup(Async)");
        }

        // verify the required parameter 'pagination' is set
        if (pagination == null) {
            throw new ApiException(
                    "Missing the required parameter 'pagination' when calling"
                            + " listUsersFromUserGroup(Async)");
        }

        okhttp3.Call localVarCall = listUsersFromUserGroupCall(userGroupId, pagination, _callback);
        return localVarCall;
    }

    /**
     * List Users from User Group Returns users belonging to a user group.
     *
     * @param userGroupId (required)
     * @param pagination Pagination for members of a group. This parameter exists in v1. (required)
     * @return ListUsersFromUserGroup200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ListUsersFromUserGroup200Response listUsersFromUserGroup(
            String userGroupId, PaginationInput pagination) throws ApiException {
        ApiResponse<ListUsersFromUserGroup200Response> localVarResp =
                listUsersFromUserGroupWithHttpInfo(userGroupId, pagination);
        return localVarResp.getData();
    }

    /**
     * List Users from User Group Returns users belonging to a user group.
     *
     * @param userGroupId (required)
     * @param pagination Pagination for members of a group. This parameter exists in v1. (required)
     * @return ApiResponse&lt;ListUsersFromUserGroup200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ListUsersFromUserGroup200Response> listUsersFromUserGroupWithHttpInfo(
            String userGroupId, PaginationInput pagination) throws ApiException {
        okhttp3.Call localVarCall =
                listUsersFromUserGroupValidateBeforeCall(userGroupId, pagination, null);
        Type localVarReturnType = new TypeToken<ListUsersFromUserGroup200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Users from User Group (asynchronously) Returns users belonging to a user group.
     *
     * @param userGroupId (required)
     * @param pagination Pagination for members of a group. This parameter exists in v1. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listUsersFromUserGroupAsync(
            String userGroupId,
            PaginationInput pagination,
            final ApiCallback<ListUsersFromUserGroup200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                listUsersFromUserGroupValidateBeforeCall(userGroupId, pagination, _callback);
        Type localVarReturnType = new TypeToken<ListUsersFromUserGroup200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeUsersFromUserGroup
     *
     * @param userGroupId (required)
     * @param emails The list of emails to remove from the user group. This parameter exists in v1.
     *     (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call removeUsersFromUserGroupCall(
            String userGroupId, List<String> emails, final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath =
                "/group/{userGroupId}/users"
                        .replaceAll(
                                "\\{" + "userGroupId" + "\\}",
                                localVarApiClient.escapeString(userGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (emails != null) {
            localVarCollectionQueryParams.addAll(
                    localVarApiClient.parameterToPairs("csv", "emails", emails));
        }

        final String[] localVarAccepts = {
            "application/vnd.segment.v1+json",
            "application/json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};

        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "DELETE",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeUsersFromUserGroupValidateBeforeCall(
            String userGroupId, List<String> emails, final ApiCallback _callback)
            throws ApiException {

        // verify the required parameter 'userGroupId' is set
        if (userGroupId == null) {
            throw new ApiException(
                    "Missing the required parameter 'userGroupId' when calling"
                            + " removeUsersFromUserGroup(Async)");
        }

        // verify the required parameter 'emails' is set
        if (emails == null) {
            throw new ApiException(
                    "Missing the required parameter 'emails' when calling"
                            + " removeUsersFromUserGroup(Async)");
        }

        okhttp3.Call localVarCall = removeUsersFromUserGroupCall(userGroupId, emails, _callback);
        return localVarCall;
    }

    /**
     * Remove Users from User Group Removes one or multiple users or invites from a user group by
     * email. When called, this endpoint may generate one or more of the following [Audit
     * Trail](/tag/Audit-Trail) events: * Group Memberships Deleted * User Removed From User Group
     * The rate limit for this endpoint is 60 requests per minute, which is lower than the default
     * due to access pattern restrictions. Once reached, this endpoint will respond with the 429
     * HTTP status code with headers indicating the limit parameters. See [Rate
     * Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param userGroupId (required)
     * @param emails The list of emails to remove from the user group. This parameter exists in v1.
     *     (required)
     * @return RemoveUsersFromUserGroup200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public RemoveUsersFromUserGroup200Response removeUsersFromUserGroup(
            String userGroupId, List<String> emails) throws ApiException {
        ApiResponse<RemoveUsersFromUserGroup200Response> localVarResp =
                removeUsersFromUserGroupWithHttpInfo(userGroupId, emails);
        return localVarResp.getData();
    }

    /**
     * Remove Users from User Group Removes one or multiple users or invites from a user group by
     * email. When called, this endpoint may generate one or more of the following [Audit
     * Trail](/tag/Audit-Trail) events: * Group Memberships Deleted * User Removed From User Group
     * The rate limit for this endpoint is 60 requests per minute, which is lower than the default
     * due to access pattern restrictions. Once reached, this endpoint will respond with the 429
     * HTTP status code with headers indicating the limit parameters. See [Rate
     * Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param userGroupId (required)
     * @param emails The list of emails to remove from the user group. This parameter exists in v1.
     *     (required)
     * @return ApiResponse&lt;RemoveUsersFromUserGroup200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RemoveUsersFromUserGroup200Response> removeUsersFromUserGroupWithHttpInfo(
            String userGroupId, List<String> emails) throws ApiException {
        okhttp3.Call localVarCall =
                removeUsersFromUserGroupValidateBeforeCall(userGroupId, emails, null);
        Type localVarReturnType = new TypeToken<RemoveUsersFromUserGroup200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove Users from User Group (asynchronously) Removes one or multiple users or invites from a
     * user group by email. When called, this endpoint may generate one or more of the following
     * [Audit Trail](/tag/Audit-Trail) events: * Group Memberships Deleted * User Removed From User
     * Group The rate limit for this endpoint is 60 requests per minute, which is lower than the
     * default due to access pattern restrictions. Once reached, this endpoint will respond with the
     * 429 HTTP status code with headers indicating the limit parameters. See [Rate
     * Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param userGroupId (required)
     * @param emails The list of emails to remove from the user group. This parameter exists in v1.
     *     (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call removeUsersFromUserGroupAsync(
            String userGroupId,
            List<String> emails,
            final ApiCallback<RemoveUsersFromUserGroup200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                removeUsersFromUserGroupValidateBeforeCall(userGroupId, emails, _callback);
        Type localVarReturnType = new TypeToken<RemoveUsersFromUserGroup200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replacePermissionsForUserGroup
     *
     * @param userGroupId (required)
     * @param replacePermissionsForUserGroupV1Input (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call replacePermissionsForUserGroupCall(
            String userGroupId,
            ReplacePermissionsForUserGroupV1Input replacePermissionsForUserGroupV1Input,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = replacePermissionsForUserGroupV1Input;

        // create path and map variables
        String localVarPath =
                "/groups/{userGroupId}/permissions"
                        .replaceAll(
                                "\\{" + "userGroupId" + "\\}",
                                localVarApiClient.escapeString(userGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1+json",
            "application/json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.segment.v1+json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "PUT",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replacePermissionsForUserGroupValidateBeforeCall(
            String userGroupId,
            ReplacePermissionsForUserGroupV1Input replacePermissionsForUserGroupV1Input,
            final ApiCallback _callback)
            throws ApiException {

        // verify the required parameter 'userGroupId' is set
        if (userGroupId == null) {
            throw new ApiException(
                    "Missing the required parameter 'userGroupId' when calling"
                            + " replacePermissionsForUserGroup(Async)");
        }

        // verify the required parameter 'replacePermissionsForUserGroupV1Input' is set
        if (replacePermissionsForUserGroupV1Input == null) {
            throw new ApiException(
                    "Missing the required parameter 'replacePermissionsForUserGroupV1Input' when"
                            + " calling replacePermissionsForUserGroup(Async)");
        }

        okhttp3.Call localVarCall =
                replacePermissionsForUserGroupCall(
                        userGroupId, replacePermissionsForUserGroupV1Input, _callback);
        return localVarCall;
    }

    /**
     * Replace Permissions for User Group Updates the list of access permissions for a user group.
     * When called, this endpoint may generate the &#x60;Policy Deleted&#x60; [Audit
     * Trail](/tag/Audit-Trail) event. The rate limit for this endpoint is 60 requests per minute,
     * which is lower than the default due to access pattern restrictions. Once reached, this
     * endpoint will respond with the 429 HTTP status code with headers indicating the limit
     * parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param userGroupId (required)
     * @param replacePermissionsForUserGroupV1Input (required)
     * @return ReplacePermissionsForUserGroup200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ReplacePermissionsForUserGroup200Response replacePermissionsForUserGroup(
            String userGroupId,
            ReplacePermissionsForUserGroupV1Input replacePermissionsForUserGroupV1Input)
            throws ApiException {
        ApiResponse<ReplacePermissionsForUserGroup200Response> localVarResp =
                replacePermissionsForUserGroupWithHttpInfo(
                        userGroupId, replacePermissionsForUserGroupV1Input);
        return localVarResp.getData();
    }

    /**
     * Replace Permissions for User Group Updates the list of access permissions for a user group.
     * When called, this endpoint may generate the &#x60;Policy Deleted&#x60; [Audit
     * Trail](/tag/Audit-Trail) event. The rate limit for this endpoint is 60 requests per minute,
     * which is lower than the default due to access pattern restrictions. Once reached, this
     * endpoint will respond with the 429 HTTP status code with headers indicating the limit
     * parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param userGroupId (required)
     * @param replacePermissionsForUserGroupV1Input (required)
     * @return ApiResponse&lt;ReplacePermissionsForUserGroup200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ReplacePermissionsForUserGroup200Response>
            replacePermissionsForUserGroupWithHttpInfo(
                    String userGroupId,
                    ReplacePermissionsForUserGroupV1Input replacePermissionsForUserGroupV1Input)
                    throws ApiException {
        okhttp3.Call localVarCall =
                replacePermissionsForUserGroupValidateBeforeCall(
                        userGroupId, replacePermissionsForUserGroupV1Input, null);
        Type localVarReturnType =
                new TypeToken<ReplacePermissionsForUserGroup200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace Permissions for User Group (asynchronously) Updates the list of access permissions
     * for a user group. When called, this endpoint may generate the &#x60;Policy Deleted&#x60;
     * [Audit Trail](/tag/Audit-Trail) event. The rate limit for this endpoint is 60 requests per
     * minute, which is lower than the default due to access pattern restrictions. Once reached,
     * this endpoint will respond with the 429 HTTP status code with headers indicating the limit
     * parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param userGroupId (required)
     * @param replacePermissionsForUserGroupV1Input (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call replacePermissionsForUserGroupAsync(
            String userGroupId,
            ReplacePermissionsForUserGroupV1Input replacePermissionsForUserGroupV1Input,
            final ApiCallback<ReplacePermissionsForUserGroup200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                replacePermissionsForUserGroupValidateBeforeCall(
                        userGroupId, replacePermissionsForUserGroupV1Input, _callback);
        Type localVarReturnType =
                new TypeToken<ReplacePermissionsForUserGroup200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replaceUsersInUserGroup
     *
     * @param userGroupId (required)
     * @param replaceUsersInUserGroupV1Input (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call replaceUsersInUserGroupCall(
            String userGroupId,
            ReplaceUsersInUserGroupV1Input replaceUsersInUserGroupV1Input,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = replaceUsersInUserGroupV1Input;

        // create path and map variables
        String localVarPath =
                "/group/{userGroupId}/users"
                        .replaceAll(
                                "\\{" + "userGroupId" + "\\}",
                                localVarApiClient.escapeString(userGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1+json",
            "application/json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.segment.v1+json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "PUT",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceUsersInUserGroupValidateBeforeCall(
            String userGroupId,
            ReplaceUsersInUserGroupV1Input replaceUsersInUserGroupV1Input,
            final ApiCallback _callback)
            throws ApiException {

        // verify the required parameter 'userGroupId' is set
        if (userGroupId == null) {
            throw new ApiException(
                    "Missing the required parameter 'userGroupId' when calling"
                            + " replaceUsersInUserGroup(Async)");
        }

        // verify the required parameter 'replaceUsersInUserGroupV1Input' is set
        if (replaceUsersInUserGroupV1Input == null) {
            throw new ApiException(
                    "Missing the required parameter 'replaceUsersInUserGroupV1Input' when calling"
                            + " replaceUsersInUserGroup(Async)");
        }

        okhttp3.Call localVarCall =
                replaceUsersInUserGroupCall(userGroupId, replaceUsersInUserGroupV1Input, _callback);
        return localVarCall;
    }

    /**
     * Replace Users in User Group Replaces the members of a user group by email. When called, this
     * endpoint may generate one or more of the following [Audit Trail](/tag/Audit-Trail) events: *
     * Subjects Added to Group * User Added To User Group * Group Memberships Deleted The rate limit
     * for this endpoint is 60 requests per minute, which is lower than the default due to access
     * pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code
     * with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more
     * information.
     *
     * @param userGroupId (required)
     * @param replaceUsersInUserGroupV1Input (required)
     * @return ReplaceUsersInUserGroup200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ReplaceUsersInUserGroup200Response replaceUsersInUserGroup(
            String userGroupId, ReplaceUsersInUserGroupV1Input replaceUsersInUserGroupV1Input)
            throws ApiException {
        ApiResponse<ReplaceUsersInUserGroup200Response> localVarResp =
                replaceUsersInUserGroupWithHttpInfo(userGroupId, replaceUsersInUserGroupV1Input);
        return localVarResp.getData();
    }

    /**
     * Replace Users in User Group Replaces the members of a user group by email. When called, this
     * endpoint may generate one or more of the following [Audit Trail](/tag/Audit-Trail) events: *
     * Subjects Added to Group * User Added To User Group * Group Memberships Deleted The rate limit
     * for this endpoint is 60 requests per minute, which is lower than the default due to access
     * pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code
     * with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more
     * information.
     *
     * @param userGroupId (required)
     * @param replaceUsersInUserGroupV1Input (required)
     * @return ApiResponse&lt;ReplaceUsersInUserGroup200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ReplaceUsersInUserGroup200Response> replaceUsersInUserGroupWithHttpInfo(
            String userGroupId, ReplaceUsersInUserGroupV1Input replaceUsersInUserGroupV1Input)
            throws ApiException {
        okhttp3.Call localVarCall =
                replaceUsersInUserGroupValidateBeforeCall(
                        userGroupId, replaceUsersInUserGroupV1Input, null);
        Type localVarReturnType = new TypeToken<ReplaceUsersInUserGroup200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace Users in User Group (asynchronously) Replaces the members of a user group by email.
     * When called, this endpoint may generate one or more of the following [Audit
     * Trail](/tag/Audit-Trail) events: * Subjects Added to Group * User Added To User Group * Group
     * Memberships Deleted The rate limit for this endpoint is 60 requests per minute, which is
     * lower than the default due to access pattern restrictions. Once reached, this endpoint will
     * respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate
     * Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param userGroupId (required)
     * @param replaceUsersInUserGroupV1Input (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call replaceUsersInUserGroupAsync(
            String userGroupId,
            ReplaceUsersInUserGroupV1Input replaceUsersInUserGroupV1Input,
            final ApiCallback<ReplaceUsersInUserGroup200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                replaceUsersInUserGroupValidateBeforeCall(
                        userGroupId, replaceUsersInUserGroupV1Input, _callback);
        Type localVarReturnType = new TypeToken<ReplaceUsersInUserGroup200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUserGroup
     *
     * @param userGroupId (required)
     * @param updateUserGroupV1Input (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateUserGroupCall(
            String userGroupId,
            UpdateUserGroupV1Input updateUserGroupV1Input,
            final ApiCallback _callback)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateUserGroupV1Input;

        // create path and map variables
        String localVarPath =
                "/groups/{userGroupId}"
                        .replaceAll(
                                "\\{" + "userGroupId" + "\\}",
                                localVarApiClient.escapeString(userGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.segment.v1+json",
            "application/json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.segment.v1+json",
            "application/vnd.segment.v1beta+json",
            "application/vnd.segment.v1alpha+json"
        };
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {"token"};
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "PATCH",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames,
                _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserGroupValidateBeforeCall(
            String userGroupId,
            UpdateUserGroupV1Input updateUserGroupV1Input,
            final ApiCallback _callback)
            throws ApiException {

        // verify the required parameter 'userGroupId' is set
        if (userGroupId == null) {
            throw new ApiException(
                    "Missing the required parameter 'userGroupId' when calling"
                            + " updateUserGroup(Async)");
        }

        // verify the required parameter 'updateUserGroupV1Input' is set
        if (updateUserGroupV1Input == null) {
            throw new ApiException(
                    "Missing the required parameter 'updateUserGroupV1Input' when calling"
                            + " updateUserGroup(Async)");
        }

        okhttp3.Call localVarCall =
                updateUserGroupCall(userGroupId, updateUserGroupV1Input, _callback);
        return localVarCall;
    }

    /**
     * Update User Group Updates a user group for a Workspace. When called, this endpoint may
     * generate the &#x60;User Group Updated&#x60; [Audit Trail](/tag/Audit-Trail) event. The rate
     * limit for this endpoint is 60 requests per minute, which is lower than the default due to
     * access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP
     * status code with headers indicating the limit parameters. See [Rate
     * Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param userGroupId (required)
     * @param updateUserGroupV1Input (required)
     * @return UpdateUserGroup200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public UpdateUserGroup200Response updateUserGroup(
            String userGroupId, UpdateUserGroupV1Input updateUserGroupV1Input) throws ApiException {
        ApiResponse<UpdateUserGroup200Response> localVarResp =
                updateUserGroupWithHttpInfo(userGroupId, updateUserGroupV1Input);
        return localVarResp.getData();
    }

    /**
     * Update User Group Updates a user group for a Workspace. When called, this endpoint may
     * generate the &#x60;User Group Updated&#x60; [Audit Trail](/tag/Audit-Trail) event. The rate
     * limit for this endpoint is 60 requests per minute, which is lower than the default due to
     * access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP
     * status code with headers indicating the limit parameters. See [Rate
     * Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param userGroupId (required)
     * @param updateUserGroupV1Input (required)
     * @return ApiResponse&lt;UpdateUserGroup200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<UpdateUserGroup200Response> updateUserGroupWithHttpInfo(
            String userGroupId, UpdateUserGroupV1Input updateUserGroupV1Input) throws ApiException {
        okhttp3.Call localVarCall =
                updateUserGroupValidateBeforeCall(userGroupId, updateUserGroupV1Input, null);
        Type localVarReturnType = new TypeToken<UpdateUserGroup200Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update User Group (asynchronously) Updates a user group for a Workspace. When called, this
     * endpoint may generate the &#x60;User Group Updated&#x60; [Audit Trail](/tag/Audit-Trail)
     * event. The rate limit for this endpoint is 60 requests per minute, which is lower than the
     * default due to access pattern restrictions. Once reached, this endpoint will respond with the
     * 429 HTTP status code with headers indicating the limit parameters. See [Rate
     * Limiting](/#tag/Rate-Limits) for more information.
     *
     * @param userGroupId (required)
     * @param updateUserGroupV1Input (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body
     *     object
     * @http.response.details
     *     <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     * <tr><td> 422 </td><td> Validation failure </td><td>  -  </td></tr>
     * <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateUserGroupAsync(
            String userGroupId,
            UpdateUserGroupV1Input updateUserGroupV1Input,
            final ApiCallback<UpdateUserGroup200Response> _callback)
            throws ApiException {

        okhttp3.Call localVarCall =
                updateUserGroupValidateBeforeCall(userGroupId, updateUserGroupV1Input, _callback);
        Type localVarReturnType = new TypeToken<UpdateUserGroup200Response>() {}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
