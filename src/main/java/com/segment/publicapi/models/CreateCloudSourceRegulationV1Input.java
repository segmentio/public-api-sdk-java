/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 32.0.2
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.segment.publicapi.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.segment.publicapi.JSON;

/**
 * The input to create a Cloud Source-scoped regulation.
 */
@ApiModel(description = "The input to create a Cloud Source-scoped regulation.")

public class CreateCloudSourceRegulationV1Input {
  /**
   * The regulation type to create.
   */
  @JsonAdapter(RegulationTypeEnum.Adapter.class)
  public enum RegulationTypeEnum {
    BULK_DELETE_ONLY("BULK_DELETE_ONLY"),
    
    DELETE_INTERNAL("DELETE_INTERNAL"),
    
    DELETE_ONLY("DELETE_ONLY"),
    
    SUPPRESS_ONLY("SUPPRESS_ONLY"),
    
    SUPPRESS_WITH_DELETE("SUPPRESS_WITH_DELETE"),
    
    UNSUPPRESS("UNSUPPRESS");

    private String value;

    RegulationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RegulationTypeEnum fromValue(String value) {
      for (RegulationTypeEnum b : RegulationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RegulationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RegulationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RegulationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RegulationTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REGULATION_TYPE = "regulationType";
  @SerializedName(SERIALIZED_NAME_REGULATION_TYPE)
  private RegulationTypeEnum regulationType;

  /**
   * The subject type. Must be &#x60;objectId&#x60; for Cloud Sources.
   */
  @JsonAdapter(SubjectTypeEnum.Adapter.class)
  public enum SubjectTypeEnum {
    OBJECT_ID("OBJECT_ID");

    private String value;

    SubjectTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SubjectTypeEnum fromValue(String value) {
      for (SubjectTypeEnum b : SubjectTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SubjectTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SubjectTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SubjectTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SubjectTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SUBJECT_TYPE = "subjectType";
  @SerializedName(SERIALIZED_NAME_SUBJECT_TYPE)
  private SubjectTypeEnum subjectType;

  public static final String SERIALIZED_NAME_SUBJECT_IDS = "subjectIds";
  @SerializedName(SERIALIZED_NAME_SUBJECT_IDS)
  private List<String> subjectIds = null;

  public static final String SERIALIZED_NAME_COLLECTION = "collection";
  @SerializedName(SERIALIZED_NAME_COLLECTION)
  private String collection;

  public CreateCloudSourceRegulationV1Input() {
  }

  public CreateCloudSourceRegulationV1Input regulationType(RegulationTypeEnum regulationType) {
    
    this.regulationType = regulationType;
    return this;
  }

   /**
   * The regulation type to create.
   * @return regulationType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The regulation type to create.")

  public RegulationTypeEnum getRegulationType() {
    return regulationType;
  }


  public void setRegulationType(RegulationTypeEnum regulationType) {
    this.regulationType = regulationType;
  }


  public CreateCloudSourceRegulationV1Input subjectType(SubjectTypeEnum subjectType) {
    
    this.subjectType = subjectType;
    return this;
  }

   /**
   * The subject type. Must be &#x60;objectId&#x60; for Cloud Sources.
   * @return subjectType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The subject type. Must be `objectId` for Cloud Sources.")

  public SubjectTypeEnum getSubjectType() {
    return subjectType;
  }


  public void setSubjectType(SubjectTypeEnum subjectType) {
    this.subjectType = subjectType;
  }


  public CreateCloudSourceRegulationV1Input subjectIds(List<String> subjectIds) {
    
    this.subjectIds = subjectIds;
    return this;
  }

  public CreateCloudSourceRegulationV1Input addSubjectIdsItem(String subjectIdsItem) {
    if (this.subjectIds == null) {
      this.subjectIds = new ArrayList<>();
    }
    this.subjectIds.add(subjectIdsItem);
    return this;
  }

   /**
   * The user or object ids of the subjects to regulate.  Config API note: equal to &#x60;parent&#x60; but allows an array.
   * @return subjectIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The user or object ids of the subjects to regulate.  Config API note: equal to `parent` but allows an array.")

  public List<String> getSubjectIds() {
    return subjectIds;
  }


  public void setSubjectIds(List<String> subjectIds) {
    this.subjectIds = subjectIds;
  }


  public CreateCloudSourceRegulationV1Input collection(String collection) {
    
    this.collection = collection;
    return this;
  }

   /**
   * The Cloud Source collection to regulate.
   * @return collection
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The Cloud Source collection to regulate.")

  public String getCollection() {
    return collection;
  }


  public void setCollection(String collection) {
    this.collection = collection;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateCloudSourceRegulationV1Input createCloudSourceRegulationV1Input = (CreateCloudSourceRegulationV1Input) o;
    return Objects.equals(this.regulationType, createCloudSourceRegulationV1Input.regulationType) &&
        Objects.equals(this.subjectType, createCloudSourceRegulationV1Input.subjectType) &&
        Objects.equals(this.subjectIds, createCloudSourceRegulationV1Input.subjectIds) &&
        Objects.equals(this.collection, createCloudSourceRegulationV1Input.collection);
  }

  @Override
  public int hashCode() {
    return Objects.hash(regulationType, subjectType, subjectIds, collection);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateCloudSourceRegulationV1Input {\n");
    sb.append("    regulationType: ").append(toIndentedString(regulationType)).append("\n");
    sb.append("    subjectType: ").append(toIndentedString(subjectType)).append("\n");
    sb.append("    subjectIds: ").append(toIndentedString(subjectIds)).append("\n");
    sb.append("    collection: ").append(toIndentedString(collection)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("regulationType");
    openapiFields.add("subjectType");
    openapiFields.add("subjectIds");
    openapiFields.add("collection");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("regulationType");
    openapiRequiredFields.add("collection");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CreateCloudSourceRegulationV1Input
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CreateCloudSourceRegulationV1Input.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateCloudSourceRegulationV1Input is not found in the empty JSON string", CreateCloudSourceRegulationV1Input.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CreateCloudSourceRegulationV1Input.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateCloudSourceRegulationV1Input` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateCloudSourceRegulationV1Input.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("regulationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `regulationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("regulationType").toString()));
      }
      if ((jsonObj.get("subjectType") != null && !jsonObj.get("subjectType").isJsonNull()) && !jsonObj.get("subjectType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subjectType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subjectType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("subjectIds") != null && !jsonObj.get("subjectIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subjectIds` to be an array in the JSON string but got `%s`", jsonObj.get("subjectIds").toString()));
      }
      if (!jsonObj.get("collection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collection").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateCloudSourceRegulationV1Input.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateCloudSourceRegulationV1Input' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateCloudSourceRegulationV1Input> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateCloudSourceRegulationV1Input.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateCloudSourceRegulationV1Input>() {
           @Override
           public void write(JsonWriter out, CreateCloudSourceRegulationV1Input value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateCloudSourceRegulationV1Input read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateCloudSourceRegulationV1Input given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateCloudSourceRegulationV1Input
  * @throws IOException if the JSON string is invalid with respect to CreateCloudSourceRegulationV1Input
  */
  public static CreateCloudSourceRegulationV1Input fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateCloudSourceRegulationV1Input.class);
  }

 /**
  * Convert an instance of CreateCloudSourceRegulationV1Input to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

