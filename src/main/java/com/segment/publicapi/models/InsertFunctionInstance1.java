/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;


import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** The updated instance. */
@ApiModel(description = "The updated instance.")
public class InsertFunctionInstance1 {
    public static final String SERIALIZED_NAME_ID = "id";

    @SerializedName(SERIALIZED_NAME_ID)
    private String id;

    public static final String SERIALIZED_NAME_NAME = "name";

    @SerializedName(SERIALIZED_NAME_NAME)
    private String name;

    public static final String SERIALIZED_NAME_INTEGRATION_ID = "integrationId";

    @SerializedName(SERIALIZED_NAME_INTEGRATION_ID)
    private String integrationId;

    public static final String SERIALIZED_NAME_CLASS_ID = "classId";

    @SerializedName(SERIALIZED_NAME_CLASS_ID)
    private String classId;

    public static final String SERIALIZED_NAME_ENABLED = "enabled";

    @SerializedName(SERIALIZED_NAME_ENABLED)
    private Boolean enabled;

    public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";

    @SerializedName(SERIALIZED_NAME_CREATED_AT)
    private String createdAt;

    public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";

    @SerializedName(SERIALIZED_NAME_UPDATED_AT)
    private String updatedAt;

    public static final String SERIALIZED_NAME_SETTINGS = "settings";

    @SerializedName(SERIALIZED_NAME_SETTINGS)
    private Map<String, Object> settings = new HashMap<>();

    public static final String SERIALIZED_NAME_ENCRYPTED_SETTINGS = "encryptedSettings";

    @SerializedName(SERIALIZED_NAME_ENCRYPTED_SETTINGS)
    private Map<String, Object> encryptedSettings = new HashMap<>();

    public InsertFunctionInstance1() {}

    public InsertFunctionInstance1 id(String id) {

        this.id = id;
        return this;
    }

    /**
     * Get id
     *
     * @return id
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public InsertFunctionInstance1 name(String name) {

        this.name = name;
        return this;
    }

    /**
     * Get name
     *
     * @return name
     */
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public InsertFunctionInstance1 integrationId(String integrationId) {

        this.integrationId = integrationId;
        return this;
    }

    /**
     * Get integrationId
     *
     * @return integrationId
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    public String getIntegrationId() {
        return integrationId;
    }

    public void setIntegrationId(String integrationId) {
        this.integrationId = integrationId;
    }

    public InsertFunctionInstance1 classId(String classId) {

        this.classId = classId;
        return this;
    }

    /**
     * Get classId
     *
     * @return classId
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    public String getClassId() {
        return classId;
    }

    public void setClassId(String classId) {
        this.classId = classId;
    }

    public InsertFunctionInstance1 enabled(Boolean enabled) {

        this.enabled = enabled;
        return this;
    }

    /**
     * Get enabled
     *
     * @return enabled
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    public Boolean getEnabled() {
        return enabled;
    }

    public void setEnabled(Boolean enabled) {
        this.enabled = enabled;
    }

    public InsertFunctionInstance1 createdAt(String createdAt) {

        this.createdAt = createdAt;
        return this;
    }

    /**
     * Get createdAt
     *
     * @return createdAt
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    public String getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(String createdAt) {
        this.createdAt = createdAt;
    }

    public InsertFunctionInstance1 updatedAt(String updatedAt) {

        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Get updatedAt
     *
     * @return updatedAt
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    public String getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
    }

    public InsertFunctionInstance1 settings(Map<String, Object> settings) {

        this.settings = settings;
        return this;
    }

    public InsertFunctionInstance1 putSettingsItem(String key, Object settingsItem) {
        this.settings.put(key, settingsItem);
        return this;
    }

    /**
     * Get settings
     *
     * @return settings
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    public Map<String, Object> getSettings() {
        return settings;
    }

    public void setSettings(Map<String, Object> settings) {
        this.settings = settings;
    }

    public InsertFunctionInstance1 encryptedSettings(Map<String, Object> encryptedSettings) {

        this.encryptedSettings = encryptedSettings;
        return this;
    }

    public InsertFunctionInstance1 putEncryptedSettingsItem(
            String key, Object encryptedSettingsItem) {
        this.encryptedSettings.put(key, encryptedSettingsItem);
        return this;
    }

    /**
     * Get encryptedSettings
     *
     * @return encryptedSettings
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    public Map<String, Object> getEncryptedSettings() {
        return encryptedSettings;
    }

    public void setEncryptedSettings(Map<String, Object> encryptedSettings) {
        this.encryptedSettings = encryptedSettings;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InsertFunctionInstance1 insertFunctionInstance1 = (InsertFunctionInstance1) o;
        return Objects.equals(this.id, insertFunctionInstance1.id)
                && Objects.equals(this.name, insertFunctionInstance1.name)
                && Objects.equals(this.integrationId, insertFunctionInstance1.integrationId)
                && Objects.equals(this.classId, insertFunctionInstance1.classId)
                && Objects.equals(this.enabled, insertFunctionInstance1.enabled)
                && Objects.equals(this.createdAt, insertFunctionInstance1.createdAt)
                && Objects.equals(this.updatedAt, insertFunctionInstance1.updatedAt)
                && Objects.equals(this.settings, insertFunctionInstance1.settings)
                && Objects.equals(
                        this.encryptedSettings, insertFunctionInstance1.encryptedSettings);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                id,
                name,
                integrationId,
                classId,
                enabled,
                createdAt,
                updatedAt,
                settings,
                encryptedSettings);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class InsertFunctionInstance1 {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    integrationId: ").append(toIndentedString(integrationId)).append("\n");
        sb.append("    classId: ").append(toIndentedString(classId)).append("\n");
        sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
        sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
        sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
        sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
        sb.append("    encryptedSettings: ")
                .append(toIndentedString(encryptedSettings))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("id");
        openapiFields.add("name");
        openapiFields.add("integrationId");
        openapiFields.add("classId");
        openapiFields.add("enabled");
        openapiFields.add("createdAt");
        openapiFields.add("updatedAt");
        openapiFields.add("settings");
        openapiFields.add("encryptedSettings");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("id");
        openapiRequiredFields.add("integrationId");
        openapiRequiredFields.add("classId");
        openapiRequiredFields.add("enabled");
        openapiRequiredFields.add("createdAt");
        openapiRequiredFields.add("updatedAt");
        openapiRequiredFields.add("settings");
        openapiRequiredFields.add("encryptedSettings");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to InsertFunctionInstance1
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!InsertFunctionInstance1.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in InsertFunctionInstance1 is not found"
                                        + " in the empty JSON string",
                                InsertFunctionInstance1.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!InsertFunctionInstance1.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `InsertFunctionInstance1` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : InsertFunctionInstance1.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonObj.toString()));
            }
        }
        if (!jsonObj.get("id").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `id` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("id").toString()));
        }
        if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull())
                && !jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `name` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("name").toString()));
        }
        if (!jsonObj.get("integrationId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `integrationId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("integrationId").toString()));
        }
        if (!jsonObj.get("classId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `classId` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("classId").toString()));
        }
        if (!jsonObj.get("createdAt").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `createdAt` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("createdAt").toString()));
        }
        if (!jsonObj.get("updatedAt").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `updatedAt` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("updatedAt").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!InsertFunctionInstance1.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'InsertFunctionInstance1' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<InsertFunctionInstance1> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(InsertFunctionInstance1.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<InsertFunctionInstance1>() {
                        @Override
                        public void write(JsonWriter out, InsertFunctionInstance1 value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public InsertFunctionInstance1 read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of InsertFunctionInstance1 given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of InsertFunctionInstance1
     * @throws IOException if the JSON string is invalid with respect to InsertFunctionInstance1
     */
    public static InsertFunctionInstance1 fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, InsertFunctionInstance1.class);
    }

    /**
     * Convert an instance of InsertFunctionInstance1 to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
