/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.openapitools.jackson.nullable.JsonNullable;

/** Defines an Audience Schedule. */
public class AudienceSchedule {
    public static final String SERIALIZED_NAME_ID = "id";

    @SerializedName(SERIALIZED_NAME_ID)
    private String id;

    /** Strategy of the audience schedule (manual, periodic, or specific days). */
    @JsonAdapter(StrategyEnum.Adapter.class)
    public enum StrategyEnum {
        MANUAL("MANUAL"),

        PERIODIC("PERIODIC"),

        SPECIFIC_DAYS("SPECIFIC_DAYS");

        private String value;

        StrategyEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static StrategyEnum fromValue(String value) {
            for (StrategyEnum b : StrategyEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<StrategyEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final StrategyEnum enumeration)
                    throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public StrategyEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return StrategyEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_STRATEGY = "strategy";

    @SerializedName(SERIALIZED_NAME_STRATEGY)
    private StrategyEnum strategy;

    public static final String SERIALIZED_NAME_CONFIG = "config";

    @SerializedName(SERIALIZED_NAME_CONFIG)
    private Config config;

    public static final String SERIALIZED_NAME_NEXT_EXECUTION = "nextExecution";

    @SerializedName(SERIALIZED_NAME_NEXT_EXECUTION)
    private String nextExecution;

    public AudienceSchedule() {}

    public AudienceSchedule id(String id) {

        this.id = id;
        return this;
    }

    /**
     * Distinct identifier for the schedule.
     *
     * @return id
     */
    @javax.annotation.Nonnull
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public AudienceSchedule strategy(StrategyEnum strategy) {

        this.strategy = strategy;
        return this;
    }

    /**
     * Strategy of the audience schedule (manual, periodic, or specific days).
     *
     * @return strategy
     */
    @javax.annotation.Nonnull
    public StrategyEnum getStrategy() {
        return strategy;
    }

    public void setStrategy(StrategyEnum strategy) {
        this.strategy = strategy;
    }

    public AudienceSchedule config(Config config) {

        this.config = config;
        return this;
    }

    /**
     * Get config
     *
     * @return config
     */
    @javax.annotation.Nullable
    public Config getConfig() {
        return config;
    }

    public void setConfig(Config config) {
        this.config = config;
    }

    public AudienceSchedule nextExecution(String nextExecution) {

        this.nextExecution = nextExecution;
        return this;
    }

    /**
     * The next scheduled execution time (RFC3339).
     *
     * @return nextExecution
     */
    @javax.annotation.Nullable
    public String getNextExecution() {
        return nextExecution;
    }

    public void setNextExecution(String nextExecution) {
        this.nextExecution = nextExecution;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AudienceSchedule audienceSchedule = (AudienceSchedule) o;
        return Objects.equals(this.id, audienceSchedule.id)
                && Objects.equals(this.strategy, audienceSchedule.strategy)
                && Objects.equals(this.config, audienceSchedule.config)
                && Objects.equals(this.nextExecution, audienceSchedule.nextExecution);
    }

    private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
        return a == b
                || (a != null
                        && b != null
                        && a.isPresent()
                        && b.isPresent()
                        && Objects.deepEquals(a.get(), b.get()));
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, strategy, config, nextExecution);
    }

    private static <T> int hashCodeNullable(JsonNullable<T> a) {
        if (a == null) {
            return 1;
        }
        return a.isPresent() ? Arrays.deepHashCode(new Object[] {a.get()}) : 31;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AudienceSchedule {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    strategy: ").append(toIndentedString(strategy)).append("\n");
        sb.append("    config: ").append(toIndentedString(config)).append("\n");
        sb.append("    nextExecution: ").append(toIndentedString(nextExecution)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("id");
        openapiFields.add("strategy");
        openapiFields.add("config");
        openapiFields.add("nextExecution");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("id");
        openapiRequiredFields.add("strategy");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to AudienceSchedule
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!AudienceSchedule.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in AudienceSchedule is not found in the"
                                        + " empty JSON string",
                                AudienceSchedule.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!AudienceSchedule.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `AudienceSchedule` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : AudienceSchedule.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("id").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `id` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("id").toString()));
        }
        if (!jsonObj.get("strategy").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `strategy` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("strategy").toString()));
        }
        // validate the optional field `config`
        if (jsonObj.get("config") != null && !jsonObj.get("config").isJsonNull()) {
            Config.validateJsonElement(jsonObj.get("config"));
        }
        if ((jsonObj.get("nextExecution") != null && !jsonObj.get("nextExecution").isJsonNull())
                && !jsonObj.get("nextExecution").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `nextExecution` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("nextExecution").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!AudienceSchedule.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'AudienceSchedule' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AudienceSchedule> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(AudienceSchedule.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<AudienceSchedule>() {
                        @Override
                        public void write(JsonWriter out, AudienceSchedule value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public AudienceSchedule read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of AudienceSchedule given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of AudienceSchedule
     * @throws IOException if the JSON string is invalid with respect to AudienceSchedule
     */
    public static AudienceSchedule fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, AudienceSchedule.class);
    }

    /**
     * Convert an instance of AudienceSchedule to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
