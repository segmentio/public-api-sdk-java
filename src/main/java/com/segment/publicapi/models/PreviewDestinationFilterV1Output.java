/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * The version of the OpenAPI document: 32.0.8
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;


import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/**
 * Preview output from applying the Destination filter. Segment modifies or nullifies payloads
 * depending on the provided filter actions.
 */
@ApiModel(
        description =
                "Preview output from applying the Destination filter. Segment modifies or nullifies"
                        + " payloads depending on the provided filter actions.")
public class PreviewDestinationFilterV1Output {
    public static final String SERIALIZED_NAME_INPUT_PAYLOAD = "inputPayload";

    @SerializedName(SERIALIZED_NAME_INPUT_PAYLOAD)
    private Map<String, Object> inputPayload = new HashMap<>();

    public static final String SERIALIZED_NAME_RESULT = "result";

    @SerializedName(SERIALIZED_NAME_RESULT)
    private Map result;

    public PreviewDestinationFilterV1Output() {}

    public PreviewDestinationFilterV1Output inputPayload(Map<String, Object> inputPayload) {

        this.inputPayload = inputPayload;
        return this;
    }

    public PreviewDestinationFilterV1Output putInputPayloadItem(
            String key, Object inputPayloadItem) {
        this.inputPayload.put(key, inputPayloadItem);
        return this;
    }

    /**
     * The pre-filter JSON input.
     *
     * @return inputPayload
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "The pre-filter JSON input.")
    public Map<String, Object> getInputPayload() {
        return inputPayload;
    }

    public void setInputPayload(Map<String, Object> inputPayload) {
        this.inputPayload = inputPayload;
    }

    public PreviewDestinationFilterV1Output result(Map result) {

        this.result = result;
        return this;
    }

    /**
     * The filtered JSON output.
     *
     * @return result
     */
    @javax.annotation.Nullable
    @ApiModelProperty(required = true, value = "The filtered JSON output.")
    public Map getResult() {
        return result;
    }

    public void setResult(Map result) {
        this.result = result;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PreviewDestinationFilterV1Output previewDestinationFilterV1Output =
                (PreviewDestinationFilterV1Output) o;
        return Objects.equals(this.inputPayload, previewDestinationFilterV1Output.inputPayload)
                && Objects.equals(this.result, previewDestinationFilterV1Output.result);
    }

    @Override
    public int hashCode() {
        return Objects.hash(inputPayload, result);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PreviewDestinationFilterV1Output {\n");
        sb.append("    inputPayload: ").append(toIndentedString(inputPayload)).append("\n");
        sb.append("    result: ").append(toIndentedString(result)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("inputPayload");
        openapiFields.add("result");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("inputPayload");
        openapiRequiredFields.add("result");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to
     *     PreviewDestinationFilterV1Output
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!PreviewDestinationFilterV1Output.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in PreviewDestinationFilterV1Output is"
                                        + " not found in the empty JSON string",
                                PreviewDestinationFilterV1Output.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!PreviewDestinationFilterV1Output.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `PreviewDestinationFilterV1Output` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : PreviewDestinationFilterV1Output.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonObj.toString()));
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!PreviewDestinationFilterV1Output.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'PreviewDestinationFilterV1Output' and
                // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<PreviewDestinationFilterV1Output> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(PreviewDestinationFilterV1Output.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<PreviewDestinationFilterV1Output>() {
                        @Override
                        public void write(JsonWriter out, PreviewDestinationFilterV1Output value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public PreviewDestinationFilterV1Output read(JsonReader in)
                                throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of PreviewDestinationFilterV1Output given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of PreviewDestinationFilterV1Output
     * @throws IOException if the JSON string is invalid with respect to
     *     PreviewDestinationFilterV1Output
     */
    public static PreviewDestinationFilterV1Output fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, PreviewDestinationFilterV1Output.class);
    }

    /**
     * Convert an instance of PreviewDestinationFilterV1Output to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
