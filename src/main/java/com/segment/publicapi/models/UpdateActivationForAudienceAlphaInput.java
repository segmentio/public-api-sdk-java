/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** Input to update an activation. */
public class UpdateActivationForAudienceAlphaInput {
    public static final String SERIALIZED_NAME_ENABLED = "enabled";

    @SerializedName(SERIALIZED_NAME_ENABLED)
    private Boolean enabled;

    public static final String SERIALIZED_NAME_ACTIVATION_NAME = "activationName";

    @SerializedName(SERIALIZED_NAME_ACTIVATION_NAME)
    private String activationName;

    public static final String SERIALIZED_NAME_PERSONALIZATION = "personalization";

    @SerializedName(SERIALIZED_NAME_PERSONALIZATION)
    private PersonalizationInput personalization;

    public static final String SERIALIZED_NAME_DESTINATION_MAPPING = "destinationMapping";

    @SerializedName(SERIALIZED_NAME_DESTINATION_MAPPING)
    private DestinationSubscriptionConfiguration destinationMapping;

    public static final String SERIALIZED_NAME_PERFORM_FIRST_SYNC = "performFirstSync";

    @SerializedName(SERIALIZED_NAME_PERFORM_FIRST_SYNC)
    private Boolean performFirstSync;

    public UpdateActivationForAudienceAlphaInput() {}

    public UpdateActivationForAudienceAlphaInput enabled(Boolean enabled) {

        this.enabled = enabled;
        return this;
    }

    /**
     * Determines whether an activation is enabled.
     *
     * @return enabled
     */
    @javax.annotation.Nullable
    public Boolean getEnabled() {
        return enabled;
    }

    public void setEnabled(Boolean enabled) {
        this.enabled = enabled;
    }

    public UpdateActivationForAudienceAlphaInput activationName(String activationName) {

        this.activationName = activationName;
        return this;
    }

    /**
     * Activation name.
     *
     * @return activationName
     */
    @javax.annotation.Nullable
    public String getActivationName() {
        return activationName;
    }

    public void setActivationName(String activationName) {
        this.activationName = activationName;
    }

    public UpdateActivationForAudienceAlphaInput personalization(
            PersonalizationInput personalization) {

        this.personalization = personalization;
        return this;
    }

    /**
     * Get personalization
     *
     * @return personalization
     */
    @javax.annotation.Nullable
    public PersonalizationInput getPersonalization() {
        return personalization;
    }

    public void setPersonalization(PersonalizationInput personalization) {
        this.personalization = personalization;
    }

    public UpdateActivationForAudienceAlphaInput destinationMapping(
            DestinationSubscriptionConfiguration destinationMapping) {

        this.destinationMapping = destinationMapping;
        return this;
    }

    /**
     * Get destinationMapping
     *
     * @return destinationMapping
     */
    @javax.annotation.Nullable
    public DestinationSubscriptionConfiguration getDestinationMapping() {
        return destinationMapping;
    }

    public void setDestinationMapping(DestinationSubscriptionConfiguration destinationMapping) {
        this.destinationMapping = destinationMapping;
    }

    public UpdateActivationForAudienceAlphaInput performFirstSync(Boolean performFirstSync) {

        this.performFirstSync = performFirstSync;
        return this;
    }

    /**
     * Whether to skip the first sync so the activation events are not generated on the first
     * audience sync. Will only work if the Audience has not already synced.
     *
     * @return performFirstSync
     */
    @javax.annotation.Nullable
    public Boolean getPerformFirstSync() {
        return performFirstSync;
    }

    public void setPerformFirstSync(Boolean performFirstSync) {
        this.performFirstSync = performFirstSync;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateActivationForAudienceAlphaInput updateActivationForAudienceAlphaInput =
                (UpdateActivationForAudienceAlphaInput) o;
        return Objects.equals(this.enabled, updateActivationForAudienceAlphaInput.enabled)
                && Objects.equals(
                        this.activationName, updateActivationForAudienceAlphaInput.activationName)
                && Objects.equals(
                        this.personalization, updateActivationForAudienceAlphaInput.personalization)
                && Objects.equals(
                        this.destinationMapping,
                        updateActivationForAudienceAlphaInput.destinationMapping)
                && Objects.equals(
                        this.performFirstSync,
                        updateActivationForAudienceAlphaInput.performFirstSync);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                enabled, activationName, personalization, destinationMapping, performFirstSync);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class UpdateActivationForAudienceAlphaInput {\n");
        sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
        sb.append("    activationName: ").append(toIndentedString(activationName)).append("\n");
        sb.append("    personalization: ").append(toIndentedString(personalization)).append("\n");
        sb.append("    destinationMapping: ")
                .append(toIndentedString(destinationMapping))
                .append("\n");
        sb.append("    performFirstSync: ").append(toIndentedString(performFirstSync)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("enabled");
        openapiFields.add("activationName");
        openapiFields.add("personalization");
        openapiFields.add("destinationMapping");
        openapiFields.add("performFirstSync");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     UpdateActivationForAudienceAlphaInput
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!UpdateActivationForAudienceAlphaInput.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in UpdateActivationForAudienceAlphaInput"
                                        + " is not found in the empty JSON string",
                                UpdateActivationForAudienceAlphaInput.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!UpdateActivationForAudienceAlphaInput.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `UpdateActivationForAudienceAlphaInput` properties. JSON:"
                                    + " %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("activationName") != null && !jsonObj.get("activationName").isJsonNull())
                && !jsonObj.get("activationName").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `activationName` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("activationName").toString()));
        }
        // validate the optional field `personalization`
        if (jsonObj.get("personalization") != null
                && !jsonObj.get("personalization").isJsonNull()) {
            PersonalizationInput.validateJsonElement(jsonObj.get("personalization"));
        }
        // validate the optional field `destinationMapping`
        if (jsonObj.get("destinationMapping") != null
                && !jsonObj.get("destinationMapping").isJsonNull()) {
            DestinationSubscriptionConfiguration.validateJsonElement(
                    jsonObj.get("destinationMapping"));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!UpdateActivationForAudienceAlphaInput.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'UpdateActivationForAudienceAlphaInput'
                // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<UpdateActivationForAudienceAlphaInput> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(UpdateActivationForAudienceAlphaInput.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<UpdateActivationForAudienceAlphaInput>() {
                        @Override
                        public void write(
                                JsonWriter out, UpdateActivationForAudienceAlphaInput value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public UpdateActivationForAudienceAlphaInput read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of UpdateActivationForAudienceAlphaInput given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of UpdateActivationForAudienceAlphaInput
     * @throws IOException if the JSON string is invalid with respect to
     *     UpdateActivationForAudienceAlphaInput
     */
    public static UpdateActivationForAudienceAlphaInput fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, UpdateActivationForAudienceAlphaInput.class);
    }

    /**
     * Convert an instance of UpdateActivationForAudienceAlphaInput to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
