/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** Input to update an activation. */
public class UpdateActivationForAudienceAlphaInput {
    public static final String SERIALIZED_NAME_WORKSPACE_ID = "workspaceId";

    @SerializedName(SERIALIZED_NAME_WORKSPACE_ID)
    private String workspaceId;

    public static final String SERIALIZED_NAME_ENABLED = "enabled";

    @SerializedName(SERIALIZED_NAME_ENABLED)
    private Boolean enabled;

    public static final String SERIALIZED_NAME_EVENT_EMITTER = "eventEmitter";

    @SerializedName(SERIALIZED_NAME_EVENT_EMITTER)
    private Object eventEmitter = null;

    public static final String SERIALIZED_NAME_SUBSCRIPTION = "subscription";

    @SerializedName(SERIALIZED_NAME_SUBSCRIPTION)
    private Object subscription = null;

    public UpdateActivationForAudienceAlphaInput() {}

    public UpdateActivationForAudienceAlphaInput workspaceId(String workspaceId) {

        this.workspaceId = workspaceId;
        return this;
    }

    /**
     * The Workspace id.
     *
     * @return workspaceId
     */
    @javax.annotation.Nonnull
    public String getWorkspaceId() {
        return workspaceId;
    }

    public void setWorkspaceId(String workspaceId) {
        this.workspaceId = workspaceId;
    }

    public UpdateActivationForAudienceAlphaInput enabled(Boolean enabled) {

        this.enabled = enabled;
        return this;
    }

    /**
     * Determines whether an activation is enabled.
     *
     * @return enabled
     */
    @javax.annotation.Nullable
    public Boolean getEnabled() {
        return enabled;
    }

    public void setEnabled(Boolean enabled) {
        this.enabled = enabled;
    }

    public UpdateActivationForAudienceAlphaInput eventEmitter(Object eventEmitter) {

        this.eventEmitter = eventEmitter;
        return this;
    }

    /**
     * Configuration settings for the event emitter to be created.
     *
     * @return eventEmitter
     */
    @javax.annotation.Nullable
    public Object getEventEmitter() {
        return eventEmitter;
    }

    public void setEventEmitter(Object eventEmitter) {
        this.eventEmitter = eventEmitter;
    }

    public UpdateActivationForAudienceAlphaInput subscription(Object subscription) {

        this.subscription = subscription;
        return this;
    }

    /**
     * Subscription info to connect the event emitter to a Destination attached to the audience.
     *
     * @return subscription
     */
    @javax.annotation.Nullable
    public Object getSubscription() {
        return subscription;
    }

    public void setSubscription(Object subscription) {
        this.subscription = subscription;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateActivationForAudienceAlphaInput updateActivationForAudienceAlphaInput =
                (UpdateActivationForAudienceAlphaInput) o;
        return Objects.equals(this.workspaceId, updateActivationForAudienceAlphaInput.workspaceId)
                && Objects.equals(this.enabled, updateActivationForAudienceAlphaInput.enabled)
                && Objects.equals(
                        this.eventEmitter, updateActivationForAudienceAlphaInput.eventEmitter)
                && Objects.equals(
                        this.subscription, updateActivationForAudienceAlphaInput.subscription);
    }

    @Override
    public int hashCode() {
        return Objects.hash(workspaceId, enabled, eventEmitter, subscription);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class UpdateActivationForAudienceAlphaInput {\n");
        sb.append("    workspaceId: ").append(toIndentedString(workspaceId)).append("\n");
        sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
        sb.append("    eventEmitter: ").append(toIndentedString(eventEmitter)).append("\n");
        sb.append("    subscription: ").append(toIndentedString(subscription)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("workspaceId");
        openapiFields.add("enabled");
        openapiFields.add("eventEmitter");
        openapiFields.add("subscription");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("workspaceId");
        openapiRequiredFields.add("eventEmitter");
        openapiRequiredFields.add("subscription");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     UpdateActivationForAudienceAlphaInput
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!UpdateActivationForAudienceAlphaInput.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in UpdateActivationForAudienceAlphaInput"
                                        + " is not found in the empty JSON string",
                                UpdateActivationForAudienceAlphaInput.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!UpdateActivationForAudienceAlphaInput.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `UpdateActivationForAudienceAlphaInput` properties. JSON:"
                                    + " %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : UpdateActivationForAudienceAlphaInput.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("workspaceId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `workspaceId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("workspaceId").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!UpdateActivationForAudienceAlphaInput.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'UpdateActivationForAudienceAlphaInput'
                // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<UpdateActivationForAudienceAlphaInput> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(UpdateActivationForAudienceAlphaInput.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<UpdateActivationForAudienceAlphaInput>() {
                        @Override
                        public void write(
                                JsonWriter out, UpdateActivationForAudienceAlphaInput value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public UpdateActivationForAudienceAlphaInput read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of UpdateActivationForAudienceAlphaInput given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of UpdateActivationForAudienceAlphaInput
     * @throws IOException if the JSON string is invalid with respect to
     *     UpdateActivationForAudienceAlphaInput
     */
    public static UpdateActivationForAudienceAlphaInput fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, UpdateActivationForAudienceAlphaInput.class);
    }

    /**
     * Convert an instance of UpdateActivationForAudienceAlphaInput to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
