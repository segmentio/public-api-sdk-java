/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * The version of the OpenAPI document: 32.0.8
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;


import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Describes an Integration option field required to set up a Segment Integration such as Sources,
 * Destinations, or warehouses.
 */
@ApiModel(
        description =
                "Describes an Integration option field required to set up a Segment Integration"
                        + " such as Sources, Destinations, or warehouses.")
public class IntegrationOptionBeta {
    public static final String SERIALIZED_NAME_NAME = "name";

    @SerializedName(SERIALIZED_NAME_NAME)
    private String name;

    public static final String SERIALIZED_NAME_TYPE = "type";

    @SerializedName(SERIALIZED_NAME_TYPE)
    private String type;

    public static final String SERIALIZED_NAME_REQUIRED = "required";

    @SerializedName(SERIALIZED_NAME_REQUIRED)
    private Boolean required;

    public static final String SERIALIZED_NAME_DESCRIPTION = "description";

    @SerializedName(SERIALIZED_NAME_DESCRIPTION)
    private String description;

    public static final String SERIALIZED_NAME_DEFAULT_VALUE = "defaultValue";

    @SerializedName(SERIALIZED_NAME_DEFAULT_VALUE)
    private Object defaultValue = null;

    public static final String SERIALIZED_NAME_LABEL = "label";

    @SerializedName(SERIALIZED_NAME_LABEL)
    private String label;

    public IntegrationOptionBeta() {}

    public IntegrationOptionBeta name(String name) {

        this.name = name;
        return this;
    }

    /**
     * The name identifying this option in the context of a Segment Integration.
     *
     * @return name
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(
            required = true,
            value = "The name identifying this option in the context of a Segment Integration.")
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public IntegrationOptionBeta type(String type) {

        this.type = type;
        return this;
    }

    /**
     * Defines the type for this option in the schema. Types are most commonly strings, but may also
     * represent other primitive types, such as booleans, and numbers, as well as complex types,
     * such as objects and arrays.
     *
     * @return type
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(
            required = true,
            value =
                    "Defines the type for this option in the schema. Types are most commonly"
                        + " strings, but may also represent other primitive types, such as"
                        + " booleans, and numbers, as well as complex types, such as objects and"
                        + " arrays.")
    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public IntegrationOptionBeta required(Boolean required) {

        this.required = required;
        return this;
    }

    /**
     * Whether this is a required option when setting up the Integration.
     *
     * @return required
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(
            required = true,
            value = "Whether this is a required option when setting up the Integration.")
    public Boolean getRequired() {
        return required;
    }

    public void setRequired(Boolean required) {
        this.required = required;
    }

    public IntegrationOptionBeta description(String description) {

        this.description = description;
        return this;
    }

    /**
     * An optional short text description of the field.
     *
     * @return description
     */
    @javax.annotation.Nullable
    @ApiModelProperty(value = "An optional short text description of the field.")
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public IntegrationOptionBeta defaultValue(Object defaultValue) {

        this.defaultValue = defaultValue;
        return this;
    }

    /**
     * An optional default value for the field.
     *
     * @return defaultValue
     */
    @javax.annotation.Nullable
    @ApiModelProperty(value = "An optional default value for the field.")
    public Object getDefaultValue() {
        return defaultValue;
    }

    public void setDefaultValue(Object defaultValue) {
        this.defaultValue = defaultValue;
    }

    public IntegrationOptionBeta label(String label) {

        this.label = label;
        return this;
    }

    /**
     * An optional label for this field.
     *
     * @return label
     */
    @javax.annotation.Nullable
    @ApiModelProperty(value = "An optional label for this field.")
    public String getLabel() {
        return label;
    }

    public void setLabel(String label) {
        this.label = label;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        IntegrationOptionBeta integrationOptionBeta = (IntegrationOptionBeta) o;
        return Objects.equals(this.name, integrationOptionBeta.name)
                && Objects.equals(this.type, integrationOptionBeta.type)
                && Objects.equals(this.required, integrationOptionBeta.required)
                && Objects.equals(this.description, integrationOptionBeta.description)
                && Objects.equals(this.defaultValue, integrationOptionBeta.defaultValue)
                && Objects.equals(this.label, integrationOptionBeta.label);
    }

    private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
        return a == b
                || (a != null
                        && b != null
                        && a.isPresent()
                        && b.isPresent()
                        && Objects.deepEquals(a.get(), b.get()));
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, type, required, description, defaultValue, label);
    }

    private static <T> int hashCodeNullable(JsonNullable<T> a) {
        if (a == null) {
            return 1;
        }
        return a.isPresent() ? Arrays.deepHashCode(new Object[] {a.get()}) : 31;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class IntegrationOptionBeta {\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    required: ").append(toIndentedString(required)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
        sb.append("    label: ").append(toIndentedString(label)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("name");
        openapiFields.add("type");
        openapiFields.add("required");
        openapiFields.add("description");
        openapiFields.add("defaultValue");
        openapiFields.add("label");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("name");
        openapiRequiredFields.add("type");
        openapiRequiredFields.add("required");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to IntegrationOptionBeta
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!IntegrationOptionBeta.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in IntegrationOptionBeta is not found in"
                                        + " the empty JSON string",
                                IntegrationOptionBeta.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!IntegrationOptionBeta.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `IntegrationOptionBeta` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : IntegrationOptionBeta.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonObj.toString()));
            }
        }
        if (!jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `name` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("name").toString()));
        }
        if (!jsonObj.get("type").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `type` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("type").toString()));
        }
        if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull())
                && !jsonObj.get("description").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `description` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("description").toString()));
        }
        if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull())
                && !jsonObj.get("label").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `label` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("label").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!IntegrationOptionBeta.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'IntegrationOptionBeta' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<IntegrationOptionBeta> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(IntegrationOptionBeta.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<IntegrationOptionBeta>() {
                        @Override
                        public void write(JsonWriter out, IntegrationOptionBeta value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public IntegrationOptionBeta read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of IntegrationOptionBeta given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of IntegrationOptionBeta
     * @throws IOException if the JSON string is invalid with respect to IntegrationOptionBeta
     */
    public static IntegrationOptionBeta fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, IntegrationOptionBeta.class);
    }

    /**
     * Convert an instance of IntegrationOptionBeta to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
