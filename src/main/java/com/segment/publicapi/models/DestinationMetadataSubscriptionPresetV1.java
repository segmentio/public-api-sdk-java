/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 32.0.2
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.segment.publicapi.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.segment.publicapi.JSON;

/**
 * Represents a set of defaults for a Destination subscription.
 */
@ApiModel(description = "Represents a set of defaults for a Destination subscription.")

public class DestinationMetadataSubscriptionPresetV1 {
  public static final String SERIALIZED_NAME_ACTION_ID = "actionId";
  @SerializedName(SERIALIZED_NAME_ACTION_ID)
  private String actionId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private Map<String, Object> fields = new HashMap<>();

  public static final String SERIALIZED_NAME_TRIGGER = "trigger";
  @SerializedName(SERIALIZED_NAME_TRIGGER)
  private String trigger;

  public DestinationMetadataSubscriptionPresetV1() {
  }

  public DestinationMetadataSubscriptionPresetV1 actionId(String actionId) {
    
    this.actionId = actionId;
    return this;
  }

   /**
   * The unique identifier for the Destination Action to trigger.
   * @return actionId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The unique identifier for the Destination Action to trigger.")

  public String getActionId() {
    return actionId;
  }


  public void setActionId(String actionId) {
    this.actionId = actionId;
  }


  public DestinationMetadataSubscriptionPresetV1 name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the subscription.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The name of the subscription.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public DestinationMetadataSubscriptionPresetV1 fields(Map<String, Object> fields) {
    
    this.fields = fields;
    return this;
  }

  public DestinationMetadataSubscriptionPresetV1 putFieldsItem(String key, Object fieldsItem) {
    this.fields.put(key, fieldsItem);
    return this;
  }

   /**
   * The default settings for action fields.
   * @return fields
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The default settings for action fields.")

  public Map<String, Object> getFields() {
    return fields;
  }


  public void setFields(Map<String, Object> fields) {
    this.fields = fields;
  }


  public DestinationMetadataSubscriptionPresetV1 trigger(String trigger) {
    
    this.trigger = trigger;
    return this;
  }

   /**
   * FQL string that describes what events should trigger an action. See https://segment.com/docs/config-api/fql/ for more information regarding Segment&#39;s Filter Query Language (FQL).
   * @return trigger
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "FQL string that describes what events should trigger an action. See https://segment.com/docs/config-api/fql/ for more information regarding Segment's Filter Query Language (FQL).")

  public String getTrigger() {
    return trigger;
  }


  public void setTrigger(String trigger) {
    this.trigger = trigger;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinationMetadataSubscriptionPresetV1 destinationMetadataSubscriptionPresetV1 = (DestinationMetadataSubscriptionPresetV1) o;
    return Objects.equals(this.actionId, destinationMetadataSubscriptionPresetV1.actionId) &&
        Objects.equals(this.name, destinationMetadataSubscriptionPresetV1.name) &&
        Objects.equals(this.fields, destinationMetadataSubscriptionPresetV1.fields) &&
        Objects.equals(this.trigger, destinationMetadataSubscriptionPresetV1.trigger);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionId, name, fields, trigger);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinationMetadataSubscriptionPresetV1 {\n");
    sb.append("    actionId: ").append(toIndentedString(actionId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    trigger: ").append(toIndentedString(trigger)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actionId");
    openapiFields.add("name");
    openapiFields.add("fields");
    openapiFields.add("trigger");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("actionId");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("fields");
    openapiRequiredFields.add("trigger");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DestinationMetadataSubscriptionPresetV1
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DestinationMetadataSubscriptionPresetV1.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinationMetadataSubscriptionPresetV1 is not found in the empty JSON string", DestinationMetadataSubscriptionPresetV1.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DestinationMetadataSubscriptionPresetV1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinationMetadataSubscriptionPresetV1` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DestinationMetadataSubscriptionPresetV1.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("actionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actionId").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("trigger").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trigger` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trigger").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinationMetadataSubscriptionPresetV1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinationMetadataSubscriptionPresetV1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinationMetadataSubscriptionPresetV1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinationMetadataSubscriptionPresetV1.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinationMetadataSubscriptionPresetV1>() {
           @Override
           public void write(JsonWriter out, DestinationMetadataSubscriptionPresetV1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinationMetadataSubscriptionPresetV1 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DestinationMetadataSubscriptionPresetV1 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DestinationMetadataSubscriptionPresetV1
  * @throws IOException if the JSON string is invalid with respect to DestinationMetadataSubscriptionPresetV1
  */
  public static DestinationMetadataSubscriptionPresetV1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinationMetadataSubscriptionPresetV1.class);
  }

 /**
  * Convert an instance of DestinationMetadataSubscriptionPresetV1 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

