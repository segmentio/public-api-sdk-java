/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * The version of the OpenAPI document: 33.0.0
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;


import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;
import org.openapitools.jackson.nullable.JsonNullable;

/** The Destination&#39;s logos. */
@ApiModel(description = "The Destination's logos.")
public class Logos {
    public static final String SERIALIZED_NAME_DEFAULT = "default";

    @SerializedName(SERIALIZED_NAME_DEFAULT)
    private String _default;

    public static final String SERIALIZED_NAME_MARK = "mark";

    @SerializedName(SERIALIZED_NAME_MARK)
    private String mark;

    public static final String SERIALIZED_NAME_ALT = "alt";

    @SerializedName(SERIALIZED_NAME_ALT)
    private String alt;

    public Logos() {}

    public Logos _default(String _default) {

        this._default = _default;
        return this;
    }

    /**
     * The default URL for this logo.
     *
     * @return _default
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "The default URL for this logo.")
    public String getDefault() {
        return _default;
    }

    public void setDefault(String _default) {
        this._default = _default;
    }

    public Logos mark(String mark) {

        this.mark = mark;
        return this;
    }

    /**
     * The logo mark.
     *
     * @return mark
     */
    @javax.annotation.Nullable
    @ApiModelProperty(value = "The logo mark.")
    public String getMark() {
        return mark;
    }

    public void setMark(String mark) {
        this.mark = mark;
    }

    public Logos alt(String alt) {

        this.alt = alt;
        return this;
    }

    /**
     * The alternative text for this logo.
     *
     * @return alt
     */
    @javax.annotation.Nullable
    @ApiModelProperty(value = "The alternative text for this logo.")
    public String getAlt() {
        return alt;
    }

    public void setAlt(String alt) {
        this.alt = alt;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Logos logos = (Logos) o;
        return Objects.equals(this._default, logos._default)
                && Objects.equals(this.mark, logos.mark)
                && Objects.equals(this.alt, logos.alt);
    }

    private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
        return a == b
                || (a != null
                        && b != null
                        && a.isPresent()
                        && b.isPresent()
                        && Objects.deepEquals(a.get(), b.get()));
    }

    @Override
    public int hashCode() {
        return Objects.hash(_default, mark, alt);
    }

    private static <T> int hashCodeNullable(JsonNullable<T> a) {
        if (a == null) {
            return 1;
        }
        return a.isPresent() ? Arrays.deepHashCode(new Object[] {a.get()}) : 31;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Logos {\n");
        sb.append("    _default: ").append(toIndentedString(_default)).append("\n");
        sb.append("    mark: ").append(toIndentedString(mark)).append("\n");
        sb.append("    alt: ").append(toIndentedString(alt)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("default");
        openapiFields.add("mark");
        openapiFields.add("alt");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("default");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to Logos
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!Logos.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in Logos is not found in the empty JSON"
                                        + " string",
                                Logos.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!Logos.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `Logos`"
                                        + " properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : Logos.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonObj.toString()));
            }
        }
        if (!jsonObj.get("default").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `default` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("default").toString()));
        }
        if ((jsonObj.get("mark") != null && !jsonObj.get("mark").isJsonNull())
                && !jsonObj.get("mark").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `mark` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("mark").toString()));
        }
        if ((jsonObj.get("alt") != null && !jsonObj.get("alt").isJsonNull())
                && !jsonObj.get("alt").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `alt` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("alt").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!Logos.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'Logos' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<Logos> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(Logos.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<Logos>() {
                        @Override
                        public void write(JsonWriter out, Logos value) throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public Logos read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of Logos given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of Logos
     * @throws IOException if the JSON string is invalid with respect to Logos
     */
    public static Logos fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, Logos.class);
    }

    /**
     * Convert an instance of Logos to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
