/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * The version of the OpenAPI document: 32.0.4
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;


import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** Represents a Destination filter. */
@ApiModel(description = "Represents a Destination filter.")
public class DestinationFilterV1 {
    public static final String SERIALIZED_NAME_ID = "id";

    @SerializedName(SERIALIZED_NAME_ID)
    private String id;

    public static final String SERIALIZED_NAME_SOURCE_ID = "sourceId";

    @SerializedName(SERIALIZED_NAME_SOURCE_ID)
    private String sourceId;

    public static final String SERIALIZED_NAME_DESTINATION_ID = "destinationId";

    @SerializedName(SERIALIZED_NAME_DESTINATION_ID)
    private String destinationId;

    public static final String SERIALIZED_NAME_IF = "if";

    @SerializedName(SERIALIZED_NAME_IF)
    private String _if;

    public static final String SERIALIZED_NAME_ACTIONS = "actions";

    @SerializedName(SERIALIZED_NAME_ACTIONS)
    private List<DestinationFilterActionV1> actions = new ArrayList<>();

    public static final String SERIALIZED_NAME_TITLE = "title";

    @SerializedName(SERIALIZED_NAME_TITLE)
    private String title;

    public static final String SERIALIZED_NAME_DESCRIPTION = "description";

    @SerializedName(SERIALIZED_NAME_DESCRIPTION)
    private String description;

    public static final String SERIALIZED_NAME_ENABLED = "enabled";

    @SerializedName(SERIALIZED_NAME_ENABLED)
    private Boolean enabled;

    public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";

    @SerializedName(SERIALIZED_NAME_CREATED_AT)
    private String createdAt;

    public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";

    @SerializedName(SERIALIZED_NAME_UPDATED_AT)
    private String updatedAt;

    public DestinationFilterV1() {}

    public DestinationFilterV1 id(String id) {

        this.id = id;
        return this;
    }

    /**
     * The unique id of this filter.
     *
     * @return id
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "The unique id of this filter.")
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public DestinationFilterV1 sourceId(String sourceId) {

        this.sourceId = sourceId;
        return this;
    }

    /**
     * The id of the Source associated with this filter.
     *
     * @return sourceId
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "The id of the Source associated with this filter.")
    public String getSourceId() {
        return sourceId;
    }

    public void setSourceId(String sourceId) {
        this.sourceId = sourceId;
    }

    public DestinationFilterV1 destinationId(String destinationId) {

        this.destinationId = destinationId;
        return this;
    }

    /**
     * The id of the Destination associated with this filter.
     *
     * @return destinationId
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(
            required = true,
            value = "The id of the Destination associated with this filter.")
    public String getDestinationId() {
        return destinationId;
    }

    public void setDestinationId(String destinationId) {
        this.destinationId = destinationId;
    }

    public DestinationFilterV1 _if(String _if) {

        this._if = _if;
        return this;
    }

    /**
     * A condition that defines whether to apply this filter to a payload.
     *
     * @return _if
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(
            required = true,
            value = "A condition that defines whether to apply this filter to a payload.")
    public String getIf() {
        return _if;
    }

    public void setIf(String _if) {
        this._if = _if;
    }

    public DestinationFilterV1 actions(List<DestinationFilterActionV1> actions) {

        this.actions = actions;
        return this;
    }

    public DestinationFilterV1 addActionsItem(DestinationFilterActionV1 actionsItem) {
        this.actions.add(actionsItem);
        return this;
    }

    /**
     * A list of actions this filter performs.
     *
     * @return actions
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "A list of actions this filter performs.")
    public List<DestinationFilterActionV1> getActions() {
        return actions;
    }

    public void setActions(List<DestinationFilterActionV1> actions) {
        this.actions = actions;
    }

    public DestinationFilterV1 title(String title) {

        this.title = title;
        return this;
    }

    /**
     * A title for this filter.
     *
     * @return title
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "A title for this filter.")
    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public DestinationFilterV1 description(String description) {

        this.description = description;
        return this;
    }

    /**
     * A description for this filter.
     *
     * @return description
     */
    @javax.annotation.Nullable
    @ApiModelProperty(value = "A description for this filter.")
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public DestinationFilterV1 enabled(Boolean enabled) {

        this.enabled = enabled;
        return this;
    }

    /**
     * When set to true, this filter is active.
     *
     * @return enabled
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "When set to true, this filter is active.")
    public Boolean getEnabled() {
        return enabled;
    }

    public void setEnabled(Boolean enabled) {
        this.enabled = enabled;
    }

    public DestinationFilterV1 createdAt(String createdAt) {

        this.createdAt = createdAt;
        return this;
    }

    /**
     * The timestamp of this filter&#39;s creation.
     *
     * @return createdAt
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "The timestamp of this filter's creation.")
    public String getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(String createdAt) {
        this.createdAt = createdAt;
    }

    public DestinationFilterV1 updatedAt(String updatedAt) {

        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * The timestamp of this filter&#39;s last change.
     *
     * @return updatedAt
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "The timestamp of this filter's last change.")
    public String getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DestinationFilterV1 destinationFilterV1 = (DestinationFilterV1) o;
        return Objects.equals(this.id, destinationFilterV1.id)
                && Objects.equals(this.sourceId, destinationFilterV1.sourceId)
                && Objects.equals(this.destinationId, destinationFilterV1.destinationId)
                && Objects.equals(this._if, destinationFilterV1._if)
                && Objects.equals(this.actions, destinationFilterV1.actions)
                && Objects.equals(this.title, destinationFilterV1.title)
                && Objects.equals(this.description, destinationFilterV1.description)
                && Objects.equals(this.enabled, destinationFilterV1.enabled)
                && Objects.equals(this.createdAt, destinationFilterV1.createdAt)
                && Objects.equals(this.updatedAt, destinationFilterV1.updatedAt);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                id,
                sourceId,
                destinationId,
                _if,
                actions,
                title,
                description,
                enabled,
                createdAt,
                updatedAt);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class DestinationFilterV1 {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
        sb.append("    destinationId: ").append(toIndentedString(destinationId)).append("\n");
        sb.append("    _if: ").append(toIndentedString(_if)).append("\n");
        sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
        sb.append("    title: ").append(toIndentedString(title)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
        sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
        sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("id");
        openapiFields.add("sourceId");
        openapiFields.add("destinationId");
        openapiFields.add("if");
        openapiFields.add("actions");
        openapiFields.add("title");
        openapiFields.add("description");
        openapiFields.add("enabled");
        openapiFields.add("createdAt");
        openapiFields.add("updatedAt");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("id");
        openapiRequiredFields.add("sourceId");
        openapiRequiredFields.add("destinationId");
        openapiRequiredFields.add("if");
        openapiRequiredFields.add("actions");
        openapiRequiredFields.add("title");
        openapiRequiredFields.add("enabled");
        openapiRequiredFields.add("createdAt");
        openapiRequiredFields.add("updatedAt");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to DestinationFilterV1
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!DestinationFilterV1.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in DestinationFilterV1 is not found in"
                                        + " the empty JSON string",
                                DestinationFilterV1.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!DestinationFilterV1.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `DestinationFilterV1` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : DestinationFilterV1.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonObj.toString()));
            }
        }
        if (!jsonObj.get("id").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `id` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("id").toString()));
        }
        if (!jsonObj.get("sourceId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `sourceId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("sourceId").toString()));
        }
        if (!jsonObj.get("destinationId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `destinationId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("destinationId").toString()));
        }
        if (!jsonObj.get("if").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `if` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("if").toString()));
        }
        // ensure the json data is an array
        if (!jsonObj.get("actions").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `actions` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("actions").toString()));
        }

        JsonArray jsonArrayactions = jsonObj.getAsJsonArray("actions");
        if (!jsonObj.get("title").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `title` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("title").toString()));
        }
        if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull())
                && !jsonObj.get("description").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `description` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("description").toString()));
        }
        if (!jsonObj.get("createdAt").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `createdAt` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("createdAt").toString()));
        }
        if (!jsonObj.get("updatedAt").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `updatedAt` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("updatedAt").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!DestinationFilterV1.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'DestinationFilterV1' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<DestinationFilterV1> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(DestinationFilterV1.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<DestinationFilterV1>() {
                        @Override
                        public void write(JsonWriter out, DestinationFilterV1 value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public DestinationFilterV1 read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of DestinationFilterV1 given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of DestinationFilterV1
     * @throws IOException if the JSON string is invalid with respect to DestinationFilterV1
     */
    public static DestinationFilterV1 fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, DestinationFilterV1.class);
    }

    /**
     * Convert an instance of DestinationFilterV1 to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
