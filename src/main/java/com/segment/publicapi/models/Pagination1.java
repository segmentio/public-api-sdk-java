/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * The version of the OpenAPI document: 32.0.8
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;


import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** Pagination options. */
@ApiModel(description = "Pagination options.")
public class Pagination1 {
    public static final String SERIALIZED_NAME_CURSOR = "cursor";

    @SerializedName(SERIALIZED_NAME_CURSOR)
    private String cursor;

    public static final String SERIALIZED_NAME_COUNT = "count";

    @SerializedName(SERIALIZED_NAME_COUNT)
    private BigDecimal count;

    public Pagination1() {}

    public Pagination1 cursor(String cursor) {

        this.cursor = cursor;
        return this;
    }

    /**
     * The page to request. Acceptable values to use here are in PaginationOutput objects, in the
     * &#x60;current&#x60;, &#x60;next&#x60;, and &#x60;previous&#x60; keys. Consumers of the API
     * must treat this value as opaque.
     *
     * @return cursor
     */
    @javax.annotation.Nullable
    @ApiModelProperty(
            value =
                    "The page to request.  Acceptable values to use here are in PaginationOutput"
                        + " objects, in the `current`, `next`, and `previous` keys.  Consumers of"
                        + " the API must treat this value as opaque.")
    public String getCursor() {
        return cursor;
    }

    public void setCursor(String cursor) {
        this.cursor = cursor;
    }

    public Pagination1 count(BigDecimal count) {

        this.count = count;
        return this;
    }

    /**
     * The number of items to retrieve in a page, between 1 and 200.
     *
     * @return count
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(
            required = true,
            value = "The number of items to retrieve in a page, between 1 and 200.")
    public BigDecimal getCount() {
        return count;
    }

    public void setCount(BigDecimal count) {
        this.count = count;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Pagination1 pagination1 = (Pagination1) o;
        return Objects.equals(this.cursor, pagination1.cursor)
                && Objects.equals(this.count, pagination1.count);
    }

    @Override
    public int hashCode() {
        return Objects.hash(cursor, count);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Pagination1 {\n");
        sb.append("    cursor: ").append(toIndentedString(cursor)).append("\n");
        sb.append("    count: ").append(toIndentedString(count)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("cursor");
        openapiFields.add("count");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("count");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to Pagination1
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!Pagination1.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in Pagination1 is not found in the empty"
                                        + " JSON string",
                                Pagination1.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!Pagination1.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `Pagination1` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : Pagination1.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonObj.toString()));
            }
        }
        if ((jsonObj.get("cursor") != null && !jsonObj.get("cursor").isJsonNull())
                && !jsonObj.get("cursor").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `cursor` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("cursor").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!Pagination1.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'Pagination1' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<Pagination1> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(Pagination1.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<Pagination1>() {
                        @Override
                        public void write(JsonWriter out, Pagination1 value) throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public Pagination1 read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of Pagination1 given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of Pagination1
     * @throws IOException if the JSON string is invalid with respect to Pagination1
     */
    public static Pagination1 fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, Pagination1.class);
    }

    /**
     * Convert an instance of Pagination1 to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
