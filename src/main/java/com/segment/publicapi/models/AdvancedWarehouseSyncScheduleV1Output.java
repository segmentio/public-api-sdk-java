/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * The version of the OpenAPI document: 32.0.5
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;


import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** Defines the advanced sync schedule for a Warehouse. */
@ApiModel(description = "Defines the advanced sync schedule for a Warehouse.")
public class AdvancedWarehouseSyncScheduleV1Output {
    public static final String SERIALIZED_NAME_TIMES = "times";

    @SerializedName(SERIALIZED_NAME_TIMES)
    private List<WarehouseAdvancedSyncV1> times = null;

    public static final String SERIALIZED_NAME_TIMEZONE = "timezone";

    @SerializedName(SERIALIZED_NAME_TIMEZONE)
    private String timezone;

    public AdvancedWarehouseSyncScheduleV1Output() {}

    public AdvancedWarehouseSyncScheduleV1Output times(List<WarehouseAdvancedSyncV1> times) {

        this.times = times;
        return this;
    }

    public AdvancedWarehouseSyncScheduleV1Output addTimesItem(WarehouseAdvancedSyncV1 timesItem) {
        if (this.times == null) {
            this.times = new ArrayList<>();
        }
        this.times.add(timesItem);
        return this;
    }

    /**
     * A list that contains the times when syncs should occur.
     *
     * @return times
     */
    @javax.annotation.Nullable
    @ApiModelProperty(value = "A list that contains the times when syncs should occur.")
    public List<WarehouseAdvancedSyncV1> getTimes() {
        return times;
    }

    public void setTimes(List<WarehouseAdvancedSyncV1> times) {
        this.times = times;
    }

    public AdvancedWarehouseSyncScheduleV1Output timezone(String timezone) {

        this.timezone = timezone;
        return this;
    }

    /**
     * A TZ-database timezone for this sync schedule.
     *
     * @return timezone
     */
    @javax.annotation.Nullable
    @ApiModelProperty(value = "A TZ-database timezone for this sync schedule.")
    public String getTimezone() {
        return timezone;
    }

    public void setTimezone(String timezone) {
        this.timezone = timezone;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AdvancedWarehouseSyncScheduleV1Output advancedWarehouseSyncScheduleV1Output =
                (AdvancedWarehouseSyncScheduleV1Output) o;
        return Objects.equals(this.times, advancedWarehouseSyncScheduleV1Output.times)
                && Objects.equals(this.timezone, advancedWarehouseSyncScheduleV1Output.timezone);
    }

    @Override
    public int hashCode() {
        return Objects.hash(times, timezone);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AdvancedWarehouseSyncScheduleV1Output {\n");
        sb.append("    times: ").append(toIndentedString(times)).append("\n");
        sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("times");
        openapiFields.add("timezone");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to
     *     AdvancedWarehouseSyncScheduleV1Output
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!AdvancedWarehouseSyncScheduleV1Output.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in AdvancedWarehouseSyncScheduleV1Output"
                                        + " is not found in the empty JSON string",
                                AdvancedWarehouseSyncScheduleV1Output.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!AdvancedWarehouseSyncScheduleV1Output.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `AdvancedWarehouseSyncScheduleV1Output` properties. JSON:"
                                    + " %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }
        if (jsonObj.get("times") != null && !jsonObj.get("times").isJsonNull()) {
            JsonArray jsonArraytimes = jsonObj.getAsJsonArray("times");
            if (jsonArraytimes != null) {
                // ensure the json data is an array
                if (!jsonObj.get("times").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `times` to be an array in the JSON string"
                                            + " but got `%s`",
                                    jsonObj.get("times").toString()));
                }
            }
        }
        if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull())
                && !jsonObj.get("timezone").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `timezone` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("timezone").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!AdvancedWarehouseSyncScheduleV1Output.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'AdvancedWarehouseSyncScheduleV1Output'
                // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AdvancedWarehouseSyncScheduleV1Output> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(AdvancedWarehouseSyncScheduleV1Output.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<AdvancedWarehouseSyncScheduleV1Output>() {
                        @Override
                        public void write(
                                JsonWriter out, AdvancedWarehouseSyncScheduleV1Output value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public AdvancedWarehouseSyncScheduleV1Output read(JsonReader in)
                                throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of AdvancedWarehouseSyncScheduleV1Output given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of AdvancedWarehouseSyncScheduleV1Output
     * @throws IOException if the JSON string is invalid with respect to
     *     AdvancedWarehouseSyncScheduleV1Output
     */
    public static AdvancedWarehouseSyncScheduleV1Output fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, AdvancedWarehouseSyncScheduleV1Output.class);
    }

    /**
     * Convert an instance of AdvancedWarehouseSyncScheduleV1Output to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
