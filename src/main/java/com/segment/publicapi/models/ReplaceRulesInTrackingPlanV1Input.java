/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;


import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** Replaces Tracking Plan rules. */
@ApiModel(description = "Replaces Tracking Plan rules.")
public class ReplaceRulesInTrackingPlanV1Input {
    public static final String SERIALIZED_NAME_RULES = "rules";

    @SerializedName(SERIALIZED_NAME_RULES)
    private List<RuleV1> rules = null;

    public ReplaceRulesInTrackingPlanV1Input() {}

    public ReplaceRulesInTrackingPlanV1Input rules(List<RuleV1> rules) {

        this.rules = rules;
        return this;
    }

    public ReplaceRulesInTrackingPlanV1Input addRulesItem(RuleV1 rulesItem) {
        if (this.rules == null) {
            this.rules = new ArrayList<>();
        }
        this.rules.add(rulesItem);
        return this;
    }

    /**
     * Rules to replace.
     *
     * @return rules
     */
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Rules to replace.")
    public List<RuleV1> getRules() {
        return rules;
    }

    public void setRules(List<RuleV1> rules) {
        this.rules = rules;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ReplaceRulesInTrackingPlanV1Input replaceRulesInTrackingPlanV1Input =
                (ReplaceRulesInTrackingPlanV1Input) o;
        return Objects.equals(this.rules, replaceRulesInTrackingPlanV1Input.rules);
    }

    @Override
    public int hashCode() {
        return Objects.hash(rules);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ReplaceRulesInTrackingPlanV1Input {\n");
        sb.append("    rules: ").append(toIndentedString(rules)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("rules");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to
     *     ReplaceRulesInTrackingPlanV1Input
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!ReplaceRulesInTrackingPlanV1Input.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in ReplaceRulesInTrackingPlanV1Input is"
                                        + " not found in the empty JSON string",
                                ReplaceRulesInTrackingPlanV1Input.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!ReplaceRulesInTrackingPlanV1Input.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `ReplaceRulesInTrackingPlanV1Input` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }
        if (jsonObj.get("rules") != null && !jsonObj.get("rules").isJsonNull()) {
            JsonArray jsonArrayrules = jsonObj.getAsJsonArray("rules");
            if (jsonArrayrules != null) {
                // ensure the json data is an array
                if (!jsonObj.get("rules").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `rules` to be an array in the JSON string"
                                            + " but got `%s`",
                                    jsonObj.get("rules").toString()));
                }
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ReplaceRulesInTrackingPlanV1Input.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ReplaceRulesInTrackingPlanV1Input' and
                // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ReplaceRulesInTrackingPlanV1Input> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(ReplaceRulesInTrackingPlanV1Input.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<ReplaceRulesInTrackingPlanV1Input>() {
                        @Override
                        public void write(JsonWriter out, ReplaceRulesInTrackingPlanV1Input value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public ReplaceRulesInTrackingPlanV1Input read(JsonReader in)
                                throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of ReplaceRulesInTrackingPlanV1Input given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ReplaceRulesInTrackingPlanV1Input
     * @throws IOException if the JSON string is invalid with respect to
     *     ReplaceRulesInTrackingPlanV1Input
     */
    public static ReplaceRulesInTrackingPlanV1Input fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, ReplaceRulesInTrackingPlanV1Input.class);
    }

    /**
     * Convert an instance of ReplaceRulesInTrackingPlanV1Input to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
