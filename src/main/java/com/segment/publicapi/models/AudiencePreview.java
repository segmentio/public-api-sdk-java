/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** An audience preview. */
public class AudiencePreview {
    public static final String SERIALIZED_NAME_ID = "id";

    @SerializedName(SERIALIZED_NAME_ID)
    private String id;

    /** The audience type of the preview. */
    @JsonAdapter(AudienceTypeEnum.Adapter.class)
    public enum AudienceTypeEnum {
        ACCOUNTS("ACCOUNTS"),

        USERS("USERS");

        private String value;

        AudienceTypeEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static AudienceTypeEnum fromValue(String value) {
            for (AudienceTypeEnum b : AudienceTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<AudienceTypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final AudienceTypeEnum enumeration)
                    throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public AudienceTypeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return AudienceTypeEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_AUDIENCE_TYPE = "audienceType";

    @SerializedName(SERIALIZED_NAME_AUDIENCE_TYPE)
    private AudienceTypeEnum audienceType;

    public static final String SERIALIZED_NAME_DEFINITION = "definition";

    @SerializedName(SERIALIZED_NAME_DEFINITION)
    private AudienceDefinitionWithoutType definition;

    public static final String SERIALIZED_NAME_OPTIONS = "options";

    @SerializedName(SERIALIZED_NAME_OPTIONS)
    private AudiencePreviewOptions options;

    /** Status for the audience preview. */
    @JsonAdapter(StatusEnum.Adapter.class)
    public enum StatusEnum {
        COMPLETED("COMPLETED"),

        FAILED("FAILED"),

        RUNNING("RUNNING");

        private String value;

        StatusEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static StatusEnum fromValue(String value) {
            for (StatusEnum b : StatusEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<StatusEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final StatusEnum enumeration)
                    throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public StatusEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return StatusEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_STATUS = "status";

    @SerializedName(SERIALIZED_NAME_STATUS)
    private StatusEnum status;

    public static final String SERIALIZED_NAME_RESULTS = "results";

    @SerializedName(SERIALIZED_NAME_RESULTS)
    private List<AudiencePreviewResult> results;

    public static final String SERIALIZED_NAME_SIZE = "size";

    @SerializedName(SERIALIZED_NAME_SIZE)
    private AudienceSize size;

    public static final String SERIALIZED_NAME_FAILURE_REASON = "failureReason";

    @SerializedName(SERIALIZED_NAME_FAILURE_REASON)
    private String failureReason;

    public AudiencePreview() {}

    public AudiencePreview id(String id) {

        this.id = id;
        return this;
    }

    /**
     * Unique identifier for tracking and retrieving results of an audience preview.
     *
     * @return id
     */
    @javax.annotation.Nonnull
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public AudiencePreview audienceType(AudienceTypeEnum audienceType) {

        this.audienceType = audienceType;
        return this;
    }

    /**
     * The audience type of the preview.
     *
     * @return audienceType
     */
    @javax.annotation.Nonnull
    public AudienceTypeEnum getAudienceType() {
        return audienceType;
    }

    public void setAudienceType(AudienceTypeEnum audienceType) {
        this.audienceType = audienceType;
    }

    public AudiencePreview definition(AudienceDefinitionWithoutType definition) {

        this.definition = definition;
        return this;
    }

    /**
     * Get definition
     *
     * @return definition
     */
    @javax.annotation.Nonnull
    public AudienceDefinitionWithoutType getDefinition() {
        return definition;
    }

    public void setDefinition(AudienceDefinitionWithoutType definition) {
        this.definition = definition;
    }

    public AudiencePreview options(AudiencePreviewOptions options) {

        this.options = options;
        return this;
    }

    /**
     * Get options
     *
     * @return options
     */
    @javax.annotation.Nonnull
    public AudiencePreviewOptions getOptions() {
        return options;
    }

    public void setOptions(AudiencePreviewOptions options) {
        this.options = options;
    }

    public AudiencePreview status(StatusEnum status) {

        this.status = status;
        return this;
    }

    /**
     * Status for the audience preview.
     *
     * @return status
     */
    @javax.annotation.Nonnull
    public StatusEnum getStatus() {
        return status;
    }

    public void setStatus(StatusEnum status) {
        this.status = status;
    }

    public AudiencePreview results(List<AudiencePreviewResult> results) {

        this.results = results;
        return this;
    }

    public AudiencePreview addResultsItem(AudiencePreviewResult resultsItem) {
        if (this.results == null) {
            this.results = new ArrayList<>();
        }
        this.results.add(resultsItem);
        return this;
    }

    /**
     * Sampled result membership for the audience preview. Only has a value if the status is
     * &#39;COMPLETED&#39;.
     *
     * @return results
     */
    @javax.annotation.Nullable
    public List<AudiencePreviewResult> getResults() {
        return results;
    }

    public void setResults(List<AudiencePreviewResult> results) {
        this.results = results;
    }

    public AudiencePreview size(AudienceSize size) {

        this.size = size;
        return this;
    }

    /**
     * Get size
     *
     * @return size
     */
    @javax.annotation.Nullable
    public AudienceSize getSize() {
        return size;
    }

    public void setSize(AudienceSize size) {
        this.size = size;
    }

    public AudiencePreview failureReason(String failureReason) {

        this.failureReason = failureReason;
        return this;
    }

    /**
     * Explanation of why the audience preview failed. Only has a value if status is
     * &#39;FAILED&#39;.
     *
     * @return failureReason
     */
    @javax.annotation.Nullable
    public String getFailureReason() {
        return failureReason;
    }

    public void setFailureReason(String failureReason) {
        this.failureReason = failureReason;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AudiencePreview audiencePreview = (AudiencePreview) o;
        return Objects.equals(this.id, audiencePreview.id)
                && Objects.equals(this.audienceType, audiencePreview.audienceType)
                && Objects.equals(this.definition, audiencePreview.definition)
                && Objects.equals(this.options, audiencePreview.options)
                && Objects.equals(this.status, audiencePreview.status)
                && Objects.equals(this.results, audiencePreview.results)
                && Objects.equals(this.size, audiencePreview.size)
                && Objects.equals(this.failureReason, audiencePreview.failureReason);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                id, audienceType, definition, options, status, results, size, failureReason);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AudiencePreview {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    audienceType: ").append(toIndentedString(audienceType)).append("\n");
        sb.append("    definition: ").append(toIndentedString(definition)).append("\n");
        sb.append("    options: ").append(toIndentedString(options)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    results: ").append(toIndentedString(results)).append("\n");
        sb.append("    size: ").append(toIndentedString(size)).append("\n");
        sb.append("    failureReason: ").append(toIndentedString(failureReason)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("id");
        openapiFields.add("audienceType");
        openapiFields.add("definition");
        openapiFields.add("options");
        openapiFields.add("status");
        openapiFields.add("results");
        openapiFields.add("size");
        openapiFields.add("failureReason");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("id");
        openapiRequiredFields.add("audienceType");
        openapiRequiredFields.add("definition");
        openapiRequiredFields.add("options");
        openapiRequiredFields.add("status");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to AudiencePreview
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!AudiencePreview.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in AudiencePreview is not found in the"
                                        + " empty JSON string",
                                AudiencePreview.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!AudiencePreview.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `AudiencePreview` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : AudiencePreview.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("id").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `id` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("id").toString()));
        }
        if (!jsonObj.get("audienceType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `audienceType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("audienceType").toString()));
        }
        // validate the required field `definition`
        AudienceDefinitionWithoutType.validateJsonElement(jsonObj.get("definition"));
        // validate the required field `options`
        AudiencePreviewOptions.validateJsonElement(jsonObj.get("options"));
        if (!jsonObj.get("status").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `status` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("status").toString()));
        }
        if (jsonObj.get("results") != null && !jsonObj.get("results").isJsonNull()) {
            JsonArray jsonArrayresults = jsonObj.getAsJsonArray("results");
            if (jsonArrayresults != null) {
                // ensure the json data is an array
                if (!jsonObj.get("results").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `results` to be an array in the JSON string"
                                            + " but got `%s`",
                                    jsonObj.get("results").toString()));
                }

                // validate the optional field `results` (array)
                for (int i = 0; i < jsonArrayresults.size(); i++) {
                    AudiencePreviewResult.validateJsonElement(jsonArrayresults.get(i));
                }
                ;
            }
        }
        // validate the optional field `size`
        if (jsonObj.get("size") != null && !jsonObj.get("size").isJsonNull()) {
            AudienceSize.validateJsonElement(jsonObj.get("size"));
        }
        if ((jsonObj.get("failureReason") != null && !jsonObj.get("failureReason").isJsonNull())
                && !jsonObj.get("failureReason").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `failureReason` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("failureReason").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!AudiencePreview.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'AudiencePreview' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AudiencePreview> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(AudiencePreview.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<AudiencePreview>() {
                        @Override
                        public void write(JsonWriter out, AudiencePreview value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public AudiencePreview read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of AudiencePreview given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of AudiencePreview
     * @throws IOException if the JSON string is invalid with respect to AudiencePreview
     */
    public static AudiencePreview fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, AudiencePreview.class);
    }

    /**
     * Convert an instance of AudiencePreview to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
