/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

public class AudiencePreview extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(AudiencePreview.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!AudiencePreview.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'AudiencePreview' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AudiencePreviewAnyOf> adapterAudiencePreviewAnyOf =
                    gson.getDelegateAdapter(this, TypeToken.get(AudiencePreviewAnyOf.class));
            final TypeAdapter<AudiencePreviewAnyOf1> adapterAudiencePreviewAnyOf1 =
                    gson.getDelegateAdapter(this, TypeToken.get(AudiencePreviewAnyOf1.class));
            final TypeAdapter<AudiencePreviewAnyOf2> adapterAudiencePreviewAnyOf2 =
                    gson.getDelegateAdapter(this, TypeToken.get(AudiencePreviewAnyOf2.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<AudiencePreview>() {
                        @Override
                        public void write(JsonWriter out, AudiencePreview value)
                                throws IOException {
                            if (value == null || value.getActualInstance() == null) {
                                elementAdapter.write(out, null);
                                return;
                            }

                            // check if the actual instance is of the type `AudiencePreviewAnyOf`
                            if (value.getActualInstance() instanceof AudiencePreviewAnyOf) {
                                JsonElement element =
                                        adapterAudiencePreviewAnyOf.toJsonTree(
                                                (AudiencePreviewAnyOf) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            // check if the actual instance is of the type `AudiencePreviewAnyOf1`
                            if (value.getActualInstance() instanceof AudiencePreviewAnyOf1) {
                                JsonElement element =
                                        adapterAudiencePreviewAnyOf1.toJsonTree(
                                                (AudiencePreviewAnyOf1) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            // check if the actual instance is of the type `AudiencePreviewAnyOf2`
                            if (value.getActualInstance() instanceof AudiencePreviewAnyOf2) {
                                JsonElement element =
                                        adapterAudiencePreviewAnyOf2.toJsonTree(
                                                (AudiencePreviewAnyOf2) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            throw new IOException(
                                    "Failed to serialize as the type doesn't match anyOf schemae:"
                                            + " AudiencePreviewAnyOf, AudiencePreviewAnyOf1,"
                                            + " AudiencePreviewAnyOf2");
                        }

                        @Override
                        public AudiencePreview read(JsonReader in) throws IOException {
                            Object deserialized = null;
                            JsonElement jsonElement = elementAdapter.read(in);

                            ArrayList<String> errorMessages = new ArrayList<>();
                            TypeAdapter actualAdapter = elementAdapter;

                            // deserialize AudiencePreviewAnyOf
                            try {
                                // validate the JSON object to see if any exception is thrown
                                AudiencePreviewAnyOf.validateJsonElement(jsonElement);
                                actualAdapter = adapterAudiencePreviewAnyOf;
                                AudiencePreview ret = new AudiencePreview();
                                ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                                return ret;
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for AudiencePreviewAnyOf failed"
                                                        + " with `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'AudiencePreviewAnyOf'",
                                        e);
                            }
                            // deserialize AudiencePreviewAnyOf1
                            try {
                                // validate the JSON object to see if any exception is thrown
                                AudiencePreviewAnyOf1.validateJsonElement(jsonElement);
                                actualAdapter = adapterAudiencePreviewAnyOf1;
                                AudiencePreview ret = new AudiencePreview();
                                ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                                return ret;
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for AudiencePreviewAnyOf1 failed"
                                                        + " with `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'AudiencePreviewAnyOf1'",
                                        e);
                            }
                            // deserialize AudiencePreviewAnyOf2
                            try {
                                // validate the JSON object to see if any exception is thrown
                                AudiencePreviewAnyOf2.validateJsonElement(jsonElement);
                                actualAdapter = adapterAudiencePreviewAnyOf2;
                                AudiencePreview ret = new AudiencePreview();
                                ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                                return ret;
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for AudiencePreviewAnyOf2 failed"
                                                        + " with `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'AudiencePreviewAnyOf2'",
                                        e);
                            }

                            throw new IOException(
                                    String.format(
                                            "Failed deserialization for AudiencePreview: no class"
                                                + " matches result, expected at least 1. Detailed"
                                                + " failure message for anyOf schemas: %s. JSON:"
                                                + " %s",
                                            errorMessages, jsonElement.toString()));
                        }
                    }.nullSafe();
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public AudiencePreview() {
        super("anyOf", Boolean.FALSE);
    }

    public AudiencePreview(AudiencePreviewAnyOf o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AudiencePreview(AudiencePreviewAnyOf1 o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AudiencePreview(AudiencePreviewAnyOf2 o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("AudiencePreviewAnyOf", AudiencePreviewAnyOf.class);
        schemas.put("AudiencePreviewAnyOf1", AudiencePreviewAnyOf1.class);
        schemas.put("AudiencePreviewAnyOf2", AudiencePreviewAnyOf2.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return AudiencePreview.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check the instance parameter is valid
     * against the anyOf child schemas: AudiencePreviewAnyOf, AudiencePreviewAnyOf1,
     * AudiencePreviewAnyOf2
     *
     * <p>It could be an instance of the 'anyOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof AudiencePreviewAnyOf) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AudiencePreviewAnyOf1) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AudiencePreviewAnyOf2) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException(
                "Invalid instance type. Must be AudiencePreviewAnyOf, AudiencePreviewAnyOf1,"
                        + " AudiencePreviewAnyOf2");
    }

    /**
     * Get the actual instance, which can be the following: AudiencePreviewAnyOf,
     * AudiencePreviewAnyOf1, AudiencePreviewAnyOf2
     *
     * @return The actual instance (AudiencePreviewAnyOf, AudiencePreviewAnyOf1,
     *     AudiencePreviewAnyOf2)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `AudiencePreviewAnyOf`. If the actual instance is not
     * `AudiencePreviewAnyOf`, the ClassCastException will be thrown.
     *
     * @return The actual instance of `AudiencePreviewAnyOf`
     * @throws ClassCastException if the instance is not `AudiencePreviewAnyOf`
     */
    public AudiencePreviewAnyOf getAudiencePreviewAnyOf() throws ClassCastException {
        return (AudiencePreviewAnyOf) super.getActualInstance();
    }

    /**
     * Get the actual instance of `AudiencePreviewAnyOf1`. If the actual instance is not
     * `AudiencePreviewAnyOf1`, the ClassCastException will be thrown.
     *
     * @return The actual instance of `AudiencePreviewAnyOf1`
     * @throws ClassCastException if the instance is not `AudiencePreviewAnyOf1`
     */
    public AudiencePreviewAnyOf1 getAudiencePreviewAnyOf1() throws ClassCastException {
        return (AudiencePreviewAnyOf1) super.getActualInstance();
    }

    /**
     * Get the actual instance of `AudiencePreviewAnyOf2`. If the actual instance is not
     * `AudiencePreviewAnyOf2`, the ClassCastException will be thrown.
     *
     * @return The actual instance of `AudiencePreviewAnyOf2`
     * @throws ClassCastException if the instance is not `AudiencePreviewAnyOf2`
     */
    public AudiencePreviewAnyOf2 getAudiencePreviewAnyOf2() throws ClassCastException {
        return (AudiencePreviewAnyOf2) super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to AudiencePreview
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate anyOf schemas one by one
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with AudiencePreviewAnyOf
        try {
            AudiencePreviewAnyOf.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for AudiencePreviewAnyOf failed with `%s`.",
                            e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AudiencePreviewAnyOf1
        try {
            AudiencePreviewAnyOf1.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for AudiencePreviewAnyOf1 failed with `%s`.",
                            e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AudiencePreviewAnyOf2
        try {
            AudiencePreviewAnyOf2.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for AudiencePreviewAnyOf2 failed with `%s`.",
                            e.getMessage()));
            // continue to the next one
        }
        throw new IOException(
                String.format(
                        "The JSON string is invalid for AudiencePreview with anyOf schemas:"
                            + " AudiencePreviewAnyOf, AudiencePreviewAnyOf1, AudiencePreviewAnyOf2."
                            + " no class match the result, expected at least 1. Detailed failure"
                            + " message for anyOf schemas: %s. JSON: %s",
                        errorMessages, jsonElement.toString()));
    }

    /**
     * Create an instance of AudiencePreview given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of AudiencePreview
     * @throws IOException if the JSON string is invalid with respect to AudiencePreview
     */
    public static AudiencePreview fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, AudiencePreview.class);
    }

    /**
     * Convert an instance of AudiencePreview to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
