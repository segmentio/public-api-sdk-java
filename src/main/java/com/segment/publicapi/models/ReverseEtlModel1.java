/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;


import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** The requested Model. */
@ApiModel(description = "The requested Model.")
public class ReverseEtlModel1 {
    public static final String SERIALIZED_NAME_ID = "id";

    @SerializedName(SERIALIZED_NAME_ID)
    private String id;

    public static final String SERIALIZED_NAME_SOURCE_ID = "sourceId";

    @SerializedName(SERIALIZED_NAME_SOURCE_ID)
    private String sourceId;

    public static final String SERIALIZED_NAME_NAME = "name";

    @SerializedName(SERIALIZED_NAME_NAME)
    private String name;

    public static final String SERIALIZED_NAME_DESCRIPTION = "description";

    @SerializedName(SERIALIZED_NAME_DESCRIPTION)
    private String description;

    public static final String SERIALIZED_NAME_ENABLED = "enabled";

    @SerializedName(SERIALIZED_NAME_ENABLED)
    private Boolean enabled;

    public static final String SERIALIZED_NAME_SCHEDULE_STRATEGY = "scheduleStrategy";

    @SerializedName(SERIALIZED_NAME_SCHEDULE_STRATEGY)
    private String scheduleStrategy;

    public static final String SERIALIZED_NAME_SCHEDULE_CONFIG = "scheduleConfig";

    @SerializedName(SERIALIZED_NAME_SCHEDULE_CONFIG)
    private Map scheduleConfig;

    public static final String SERIALIZED_NAME_QUERY = "query";

    @SerializedName(SERIALIZED_NAME_QUERY)
    private String query;

    public static final String SERIALIZED_NAME_QUERY_IDENTIFIER_COLUMN = "queryIdentifierColumn";

    @SerializedName(SERIALIZED_NAME_QUERY_IDENTIFIER_COLUMN)
    private String queryIdentifierColumn;

    public ReverseEtlModel1() {}

    public ReverseEtlModel1 id(String id) {

        this.id = id;
        return this;
    }

    /**
     * The id of the Model.
     *
     * @return id
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "The id of the Model.")
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public ReverseEtlModel1 sourceId(String sourceId) {

        this.sourceId = sourceId;
        return this;
    }

    /**
     * The id for the attached Source.
     *
     * @return sourceId
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "The id for the attached Source.")
    public String getSourceId() {
        return sourceId;
    }

    public void setSourceId(String sourceId) {
        this.sourceId = sourceId;
    }

    public ReverseEtlModel1 name(String name) {

        this.name = name;
        return this;
    }

    /**
     * A short, human-readable description of the Model.
     *
     * @return name
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "A short, human-readable description of the Model.")
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public ReverseEtlModel1 description(String description) {

        this.description = description;
        return this;
    }

    /**
     * A longer, more descriptive explanation of the Model.
     *
     * @return description
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(
            required = true,
            value = "A longer, more descriptive explanation of the Model.")
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public ReverseEtlModel1 enabled(Boolean enabled) {

        this.enabled = enabled;
        return this;
    }

    /**
     * Indicates whether the Model should have syncs enabled. When disabled, no syncs will be
     * triggered, regardless of the enabled status of the attached destinations/subscriptions.
     *
     * @return enabled
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(
            required = true,
            value =
                    "Indicates whether the Model should have syncs enabled. When disabled, no syncs"
                            + " will be triggered, regardless of the enabled status of the attached"
                            + " destinations/subscriptions.")
    public Boolean getEnabled() {
        return enabled;
    }

    public void setEnabled(Boolean enabled) {
        this.enabled = enabled;
    }

    public ReverseEtlModel1 scheduleStrategy(String scheduleStrategy) {

        this.scheduleStrategy = scheduleStrategy;
        return this;
    }

    /**
     * Determines the strategy used for triggering syncs, which will be used in conjunction with
     * scheduleConfig. Possible values: \&quot;manual\&quot;, \&quot;periodic\&quot;,
     * \&quot;specific_days\&quot;.
     *
     * @return scheduleStrategy
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(
            required = true,
            value =
                    "Determines the strategy used for triggering syncs, which will be used in"
                            + " conjunction with scheduleConfig.  Possible values: \"manual\","
                            + " \"periodic\", \"specific_days\".")
    public String getScheduleStrategy() {
        return scheduleStrategy;
    }

    public void setScheduleStrategy(String scheduleStrategy) {
        this.scheduleStrategy = scheduleStrategy;
    }

    public ReverseEtlModel1 scheduleConfig(Map scheduleConfig) {

        this.scheduleConfig = scheduleConfig;
        return this;
    }

    /**
     * Depending on the chosen strategy, configures the schedule for this model.
     *
     * @return scheduleConfig
     */
    @javax.annotation.Nullable
    @ApiModelProperty(
            required = true,
            value = "Depending on the chosen strategy, configures the schedule for this model.")
    public Map getScheduleConfig() {
        return scheduleConfig;
    }

    public void setScheduleConfig(Map scheduleConfig) {
        this.scheduleConfig = scheduleConfig;
    }

    public ReverseEtlModel1 query(String query) {

        this.query = query;
        return this;
    }

    /**
     * The SQL query that will be executed to extract data from the connected Source.
     *
     * @return query
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(
            required = true,
            value =
                    "The SQL query that will be executed to extract data from the connected"
                            + " Source.")
    public String getQuery() {
        return query;
    }

    public void setQuery(String query) {
        this.query = query;
    }

    public ReverseEtlModel1 queryIdentifierColumn(String queryIdentifierColumn) {

        this.queryIdentifierColumn = queryIdentifierColumn;
        return this;
    }

    /**
     * Indicates the column named in &#x60;query&#x60; that should be used to uniquely identify the
     * extracted records.
     *
     * @return queryIdentifierColumn
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(
            required = true,
            value =
                    "Indicates the column named in `query` that should be used to uniquely identify"
                            + " the extracted records.")
    public String getQueryIdentifierColumn() {
        return queryIdentifierColumn;
    }

    public void setQueryIdentifierColumn(String queryIdentifierColumn) {
        this.queryIdentifierColumn = queryIdentifierColumn;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ReverseEtlModel1 reverseEtlModel1 = (ReverseEtlModel1) o;
        return Objects.equals(this.id, reverseEtlModel1.id)
                && Objects.equals(this.sourceId, reverseEtlModel1.sourceId)
                && Objects.equals(this.name, reverseEtlModel1.name)
                && Objects.equals(this.description, reverseEtlModel1.description)
                && Objects.equals(this.enabled, reverseEtlModel1.enabled)
                && Objects.equals(this.scheduleStrategy, reverseEtlModel1.scheduleStrategy)
                && Objects.equals(this.scheduleConfig, reverseEtlModel1.scheduleConfig)
                && Objects.equals(this.query, reverseEtlModel1.query)
                && Objects.equals(
                        this.queryIdentifierColumn, reverseEtlModel1.queryIdentifierColumn);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                id,
                sourceId,
                name,
                description,
                enabled,
                scheduleStrategy,
                scheduleConfig,
                query,
                queryIdentifierColumn);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ReverseEtlModel1 {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
        sb.append("    scheduleStrategy: ").append(toIndentedString(scheduleStrategy)).append("\n");
        sb.append("    scheduleConfig: ").append(toIndentedString(scheduleConfig)).append("\n");
        sb.append("    query: ").append(toIndentedString(query)).append("\n");
        sb.append("    queryIdentifierColumn: ")
                .append(toIndentedString(queryIdentifierColumn))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("id");
        openapiFields.add("sourceId");
        openapiFields.add("name");
        openapiFields.add("description");
        openapiFields.add("enabled");
        openapiFields.add("scheduleStrategy");
        openapiFields.add("scheduleConfig");
        openapiFields.add("query");
        openapiFields.add("queryIdentifierColumn");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("id");
        openapiRequiredFields.add("sourceId");
        openapiRequiredFields.add("name");
        openapiRequiredFields.add("description");
        openapiRequiredFields.add("enabled");
        openapiRequiredFields.add("scheduleStrategy");
        openapiRequiredFields.add("scheduleConfig");
        openapiRequiredFields.add("query");
        openapiRequiredFields.add("queryIdentifierColumn");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to ReverseEtlModel1
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!ReverseEtlModel1.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in ReverseEtlModel1 is not found in the"
                                        + " empty JSON string",
                                ReverseEtlModel1.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!ReverseEtlModel1.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `ReverseEtlModel1` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : ReverseEtlModel1.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonObj.toString()));
            }
        }
        if (!jsonObj.get("id").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `id` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("id").toString()));
        }
        if (!jsonObj.get("sourceId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `sourceId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("sourceId").toString()));
        }
        if (!jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `name` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("name").toString()));
        }
        if (!jsonObj.get("description").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `description` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("description").toString()));
        }
        if (!jsonObj.get("scheduleStrategy").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `scheduleStrategy` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("scheduleStrategy").toString()));
        }
        if (!jsonObj.get("query").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `query` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("query").toString()));
        }
        if (!jsonObj.get("queryIdentifierColumn").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `queryIdentifierColumn` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("queryIdentifierColumn").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ReverseEtlModel1.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ReverseEtlModel1' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ReverseEtlModel1> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(ReverseEtlModel1.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<ReverseEtlModel1>() {
                        @Override
                        public void write(JsonWriter out, ReverseEtlModel1 value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public ReverseEtlModel1 read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of ReverseEtlModel1 given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ReverseEtlModel1
     * @throws IOException if the JSON string is invalid with respect to ReverseEtlModel1
     */
    public static ReverseEtlModel1 fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, ReverseEtlModel1.class);
    }

    /**
     * Convert an instance of ReverseEtlModel1 to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
