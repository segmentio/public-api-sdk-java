/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** The regulate request. */
public class Regulation {
    public static final String SERIALIZED_NAME_ID = "id";

    @SerializedName(SERIALIZED_NAME_ID)
    private String id;

    public static final String SERIALIZED_NAME_WORKSPACE_ID = "workspaceId";

    @SerializedName(SERIALIZED_NAME_WORKSPACE_ID)
    private String workspaceId;

    /** The current status of the regulate request. */
    @JsonAdapter(OverallStatusEnum.Adapter.class)
    public enum OverallStatusEnum {
        FAILED("FAILED"),

        FINISHED("FINISHED"),

        INITIALIZED("INITIALIZED"),

        INVALID("INVALID"),

        IN_PROGRESS("IN_PROGRESS"),

        NOT_SUPPORTED("NOT_SUPPORTED"),

        PARTIAL_SUCCESS("PARTIAL_SUCCESS");

        private String value;

        OverallStatusEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static OverallStatusEnum fromValue(String value) {
            for (OverallStatusEnum b : OverallStatusEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<OverallStatusEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final OverallStatusEnum enumeration)
                    throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public OverallStatusEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return OverallStatusEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_OVERALL_STATUS = "overallStatus";

    @SerializedName(SERIALIZED_NAME_OVERALL_STATUS)
    private OverallStatusEnum overallStatus;

    public static final String SERIALIZED_NAME_FINISHED_AT = "finishedAt";

    @SerializedName(SERIALIZED_NAME_FINISHED_AT)
    private String finishedAt;

    public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";

    @SerializedName(SERIALIZED_NAME_CREATED_AT)
    private String createdAt;

    public static final String SERIALIZED_NAME_STREAM_STATUS = "streamStatus";

    @SerializedName(SERIALIZED_NAME_STREAM_STATUS)
    private List<StreamStatusV1> streamStatus = new ArrayList<>();

    public Regulation() {}

    public Regulation id(String id) {

        this.id = id;
        return this;
    }

    /**
     * The id of the regulate request.
     *
     * @return id
     */
    @javax.annotation.Nonnull
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public Regulation workspaceId(String workspaceId) {

        this.workspaceId = workspaceId;
        return this;
    }

    /**
     * The id of the Workspace that the regulate request belongs to.
     *
     * @return workspaceId
     */
    @javax.annotation.Nonnull
    public String getWorkspaceId() {
        return workspaceId;
    }

    public void setWorkspaceId(String workspaceId) {
        this.workspaceId = workspaceId;
    }

    public Regulation overallStatus(OverallStatusEnum overallStatus) {

        this.overallStatus = overallStatus;
        return this;
    }

    /**
     * The current status of the regulate request.
     *
     * @return overallStatus
     */
    @javax.annotation.Nonnull
    public OverallStatusEnum getOverallStatus() {
        return overallStatus;
    }

    public void setOverallStatus(OverallStatusEnum overallStatus) {
        this.overallStatus = overallStatus;
    }

    public Regulation finishedAt(String finishedAt) {

        this.finishedAt = finishedAt;
        return this;
    }

    /**
     * The timestamp of when the request finished.
     *
     * @return finishedAt
     */
    @javax.annotation.Nullable
    public String getFinishedAt() {
        return finishedAt;
    }

    public void setFinishedAt(String finishedAt) {
        this.finishedAt = finishedAt;
    }

    public Regulation createdAt(String createdAt) {

        this.createdAt = createdAt;
        return this;
    }

    /**
     * The timestamp of the creation of the request.
     *
     * @return createdAt
     */
    @javax.annotation.Nonnull
    public String getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(String createdAt) {
        this.createdAt = createdAt;
    }

    public Regulation streamStatus(List<StreamStatusV1> streamStatus) {

        this.streamStatus = streamStatus;
        return this;
    }

    public Regulation addStreamStatusItem(StreamStatusV1 streamStatusItem) {
        if (this.streamStatus == null) {
            this.streamStatus = new ArrayList<>();
        }
        this.streamStatus.add(streamStatusItem);
        return this;
    }

    /**
     * The status of each stream including all the Destinations that correspond to the stream.
     *
     * @return streamStatus
     */
    @javax.annotation.Nonnull
    public List<StreamStatusV1> getStreamStatus() {
        return streamStatus;
    }

    public void setStreamStatus(List<StreamStatusV1> streamStatus) {
        this.streamStatus = streamStatus;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Regulation regulation = (Regulation) o;
        return Objects.equals(this.id, regulation.id)
                && Objects.equals(this.workspaceId, regulation.workspaceId)
                && Objects.equals(this.overallStatus, regulation.overallStatus)
                && Objects.equals(this.finishedAt, regulation.finishedAt)
                && Objects.equals(this.createdAt, regulation.createdAt)
                && Objects.equals(this.streamStatus, regulation.streamStatus);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, workspaceId, overallStatus, finishedAt, createdAt, streamStatus);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Regulation {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    workspaceId: ").append(toIndentedString(workspaceId)).append("\n");
        sb.append("    overallStatus: ").append(toIndentedString(overallStatus)).append("\n");
        sb.append("    finishedAt: ").append(toIndentedString(finishedAt)).append("\n");
        sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
        sb.append("    streamStatus: ").append(toIndentedString(streamStatus)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("id");
        openapiFields.add("workspaceId");
        openapiFields.add("overallStatus");
        openapiFields.add("finishedAt");
        openapiFields.add("createdAt");
        openapiFields.add("streamStatus");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("id");
        openapiRequiredFields.add("workspaceId");
        openapiRequiredFields.add("overallStatus");
        openapiRequiredFields.add("createdAt");
        openapiRequiredFields.add("streamStatus");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to Regulation
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!Regulation.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in Regulation is not found in the empty"
                                        + " JSON string",
                                Regulation.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!Regulation.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `Regulation` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : Regulation.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("id").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `id` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("id").toString()));
        }
        if (!jsonObj.get("workspaceId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `workspaceId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("workspaceId").toString()));
        }
        if (!jsonObj.get("overallStatus").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `overallStatus` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("overallStatus").toString()));
        }
        if ((jsonObj.get("finishedAt") != null && !jsonObj.get("finishedAt").isJsonNull())
                && !jsonObj.get("finishedAt").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `finishedAt` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("finishedAt").toString()));
        }
        if (!jsonObj.get("createdAt").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `createdAt` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("createdAt").toString()));
        }
        // ensure the json data is an array
        if (!jsonObj.get("streamStatus").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `streamStatus` to be an array in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("streamStatus").toString()));
        }

        JsonArray jsonArraystreamStatus = jsonObj.getAsJsonArray("streamStatus");
        // validate the required field `streamStatus` (array)
        for (int i = 0; i < jsonArraystreamStatus.size(); i++) {
            StreamStatusV1.validateJsonElement(jsonArraystreamStatus.get(i));
        }
        ;
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!Regulation.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'Regulation' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<Regulation> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(Regulation.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<Regulation>() {
                        @Override
                        public void write(JsonWriter out, Regulation value) throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public Regulation read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of Regulation given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of Regulation
     * @throws IOException if the JSON string is invalid with respect to Regulation
     */
    public static Regulation fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, Regulation.class);
    }

    /**
     * Convert an instance of Regulation to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
