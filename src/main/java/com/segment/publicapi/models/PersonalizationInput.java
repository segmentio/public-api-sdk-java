/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** The Personalization Input Object. */
public class PersonalizationInput {
    public static final String SERIALIZED_NAME_PROFILE = "profile";

    @SerializedName(SERIALIZED_NAME_PROFILE)
    private Profile profile;

    public static final String SERIALIZED_NAME_ENTITIES = "entities";

    @SerializedName(SERIALIZED_NAME_ENTITIES)
    private List<PersonalizationInputEntity> entities;

    public static final String SERIALIZED_NAME_SYNC_ENTITY_PROPERTY_CHANGES =
            "syncEntityPropertyChanges";

    @SerializedName(SERIALIZED_NAME_SYNC_ENTITY_PROPERTY_CHANGES)
    private Boolean syncEntityPropertyChanges;

    public PersonalizationInput() {}

    public PersonalizationInput profile(Profile profile) {

        this.profile = profile;
        return this;
    }

    /**
     * Get profile
     *
     * @return profile
     */
    @javax.annotation.Nonnull
    public Profile getProfile() {
        return profile;
    }

    public void setProfile(Profile profile) {
        this.profile = profile;
    }

    public PersonalizationInput entities(List<PersonalizationInputEntity> entities) {

        this.entities = entities;
        return this;
    }

    public PersonalizationInput addEntitiesItem(PersonalizationInputEntity entitiesItem) {
        if (this.entities == null) {
            this.entities = new ArrayList<>();
        }
        this.entities.add(entitiesItem);
        return this;
    }

    /**
     * Entities V2 Object.
     *
     * @return entities
     */
    @javax.annotation.Nullable
    public List<PersonalizationInputEntity> getEntities() {
        return entities;
    }

    public void setEntities(List<PersonalizationInputEntity> entities) {
        this.entities = entities;
    }

    public PersonalizationInput syncEntityPropertyChanges(Boolean syncEntityPropertyChanges) {

        this.syncEntityPropertyChanges = syncEntityPropertyChanges;
        return this;
    }

    /**
     * Sync entity property changes back to Segment. Only applicable if activationType is
     * \&quot;Audience Membership Changed\&quot; and segmentEvent is \&quot;identify\&quot;.
     *
     * @return syncEntityPropertyChanges
     */
    @javax.annotation.Nullable
    public Boolean getSyncEntityPropertyChanges() {
        return syncEntityPropertyChanges;
    }

    public void setSyncEntityPropertyChanges(Boolean syncEntityPropertyChanges) {
        this.syncEntityPropertyChanges = syncEntityPropertyChanges;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PersonalizationInput personalizationInput = (PersonalizationInput) o;
        return Objects.equals(this.profile, personalizationInput.profile)
                && Objects.equals(this.entities, personalizationInput.entities)
                && Objects.equals(
                        this.syncEntityPropertyChanges,
                        personalizationInput.syncEntityPropertyChanges);
    }

    @Override
    public int hashCode() {
        return Objects.hash(profile, entities, syncEntityPropertyChanges);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PersonalizationInput {\n");
        sb.append("    profile: ").append(toIndentedString(profile)).append("\n");
        sb.append("    entities: ").append(toIndentedString(entities)).append("\n");
        sb.append("    syncEntityPropertyChanges: ")
                .append(toIndentedString(syncEntityPropertyChanges))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("profile");
        openapiFields.add("entities");
        openapiFields.add("syncEntityPropertyChanges");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("profile");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to PersonalizationInput
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!PersonalizationInput.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in PersonalizationInput is not found in"
                                        + " the empty JSON string",
                                PersonalizationInput.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!PersonalizationInput.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `PersonalizationInput` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : PersonalizationInput.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        // validate the required field `profile`
        Profile.validateJsonElement(jsonObj.get("profile"));
        if (jsonObj.get("entities") != null && !jsonObj.get("entities").isJsonNull()) {
            JsonArray jsonArrayentities = jsonObj.getAsJsonArray("entities");
            if (jsonArrayentities != null) {
                // ensure the json data is an array
                if (!jsonObj.get("entities").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `entities` to be an array in the JSON"
                                            + " string but got `%s`",
                                    jsonObj.get("entities").toString()));
                }

                // validate the optional field `entities` (array)
                for (int i = 0; i < jsonArrayentities.size(); i++) {
                    PersonalizationInputEntity.validateJsonElement(jsonArrayentities.get(i));
                }
                ;
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!PersonalizationInput.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'PersonalizationInput' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<PersonalizationInput> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(PersonalizationInput.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<PersonalizationInput>() {
                        @Override
                        public void write(JsonWriter out, PersonalizationInput value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public PersonalizationInput read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of PersonalizationInput given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of PersonalizationInput
     * @throws IOException if the JSON string is invalid with respect to PersonalizationInput
     */
    public static PersonalizationInput fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, PersonalizationInput.class);
    }

    /**
     * Convert an instance of PersonalizationInput to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
