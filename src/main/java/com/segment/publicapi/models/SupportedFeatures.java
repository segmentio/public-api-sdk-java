/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * The version of the OpenAPI document: 32.0.4
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;


import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/**
 * Features that this Destination supports. Config API note: holds &#x60;browserUnbundling&#x60;
 * fields.
 */
@ApiModel(
        description =
                "Features that this Destination supports.  Config API note: holds"
                        + " `browserUnbundling` fields.")
public class SupportedFeatures {
    /**
     * This Destination&#39;s support level for cloud mode instances. The values &#39;0&#39; and
     * &#39;NONE&#39;, and &#39;1&#39; and &#39;SINGLE&#39; are equivalent.
     */
    @JsonAdapter(CloudModeInstancesEnum.Adapter.class)
    public enum CloudModeInstancesEnum {
        _0("0"),

        _1("1"),

        MULTIPLE("MULTIPLE"),

        NONE("NONE"),

        SINGLE("SINGLE");

        private String value;

        CloudModeInstancesEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static CloudModeInstancesEnum fromValue(String value) {
            for (CloudModeInstancesEnum b : CloudModeInstancesEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<CloudModeInstancesEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final CloudModeInstancesEnum enumeration)
                    throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public CloudModeInstancesEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return CloudModeInstancesEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_CLOUD_MODE_INSTANCES = "cloudModeInstances";

    @SerializedName(SERIALIZED_NAME_CLOUD_MODE_INSTANCES)
    private CloudModeInstancesEnum cloudModeInstances;

    /**
     * This Destination&#39;s support level for device mode instances. Support for multiple device
     * mode instances is currently not planned. The values &#39;0&#39; and &#39;NONE&#39;, and
     * &#39;1&#39; and &#39;SINGLE&#39; are equivalent.
     */
    @JsonAdapter(DeviceModeInstancesEnum.Adapter.class)
    public enum DeviceModeInstancesEnum {
        _0("0"),

        _1("1"),

        NONE("NONE"),

        SINGLE("SINGLE");

        private String value;

        DeviceModeInstancesEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static DeviceModeInstancesEnum fromValue(String value) {
            for (DeviceModeInstancesEnum b : DeviceModeInstancesEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<DeviceModeInstancesEnum> {
            @Override
            public void write(
                    final JsonWriter jsonWriter, final DeviceModeInstancesEnum enumeration)
                    throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public DeviceModeInstancesEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return DeviceModeInstancesEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_DEVICE_MODE_INSTANCES = "deviceModeInstances";

    @SerializedName(SERIALIZED_NAME_DEVICE_MODE_INSTANCES)
    private DeviceModeInstancesEnum deviceModeInstances;

    public static final String SERIALIZED_NAME_REPLAY = "replay";

    @SerializedName(SERIALIZED_NAME_REPLAY)
    private Boolean replay;

    public static final String SERIALIZED_NAME_BROWSER_UNBUNDLING = "browserUnbundling";

    @SerializedName(SERIALIZED_NAME_BROWSER_UNBUNDLING)
    private Boolean browserUnbundling;

    public static final String SERIALIZED_NAME_BROWSER_UNBUNDLING_PUBLIC =
            "browserUnbundlingPublic";

    @SerializedName(SERIALIZED_NAME_BROWSER_UNBUNDLING_PUBLIC)
    private Boolean browserUnbundlingPublic;

    public SupportedFeatures() {}

    public SupportedFeatures cloudModeInstances(CloudModeInstancesEnum cloudModeInstances) {

        this.cloudModeInstances = cloudModeInstances;
        return this;
    }

    /**
     * This Destination&#39;s support level for cloud mode instances. The values &#39;0&#39; and
     * &#39;NONE&#39;, and &#39;1&#39; and &#39;SINGLE&#39; are equivalent.
     *
     * @return cloudModeInstances
     */
    @javax.annotation.Nullable
    @ApiModelProperty(
            value =
                    "This Destination's support level for cloud mode instances. The values '0' and"
                            + " 'NONE', and '1' and 'SINGLE' are equivalent.")
    public CloudModeInstancesEnum getCloudModeInstances() {
        return cloudModeInstances;
    }

    public void setCloudModeInstances(CloudModeInstancesEnum cloudModeInstances) {
        this.cloudModeInstances = cloudModeInstances;
    }

    public SupportedFeatures deviceModeInstances(DeviceModeInstancesEnum deviceModeInstances) {

        this.deviceModeInstances = deviceModeInstances;
        return this;
    }

    /**
     * This Destination&#39;s support level for device mode instances. Support for multiple device
     * mode instances is currently not planned. The values &#39;0&#39; and &#39;NONE&#39;, and
     * &#39;1&#39; and &#39;SINGLE&#39; are equivalent.
     *
     * @return deviceModeInstances
     */
    @javax.annotation.Nullable
    @ApiModelProperty(
            value =
                    "This Destination's support level for device mode instances. Support for"
                        + " multiple device mode instances is currently not planned. The values '0'"
                        + " and 'NONE', and '1' and 'SINGLE' are equivalent.")
    public DeviceModeInstancesEnum getDeviceModeInstances() {
        return deviceModeInstances;
    }

    public void setDeviceModeInstances(DeviceModeInstancesEnum deviceModeInstances) {
        this.deviceModeInstances = deviceModeInstances;
    }

    public SupportedFeatures replay(Boolean replay) {

        this.replay = replay;
        return this;
    }

    /**
     * Whether this Destination supports replays.
     *
     * @return replay
     */
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Whether this Destination supports replays.")
    public Boolean getReplay() {
        return replay;
    }

    public void setReplay(Boolean replay) {
        this.replay = replay;
    }

    public SupportedFeatures browserUnbundling(Boolean browserUnbundling) {

        this.browserUnbundling = browserUnbundling;
        return this;
    }

    /**
     * Whether this Destination supports browser unbundling.
     *
     * @return browserUnbundling
     */
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Whether this Destination supports browser unbundling.")
    public Boolean getBrowserUnbundling() {
        return browserUnbundling;
    }

    public void setBrowserUnbundling(Boolean browserUnbundling) {
        this.browserUnbundling = browserUnbundling;
    }

    public SupportedFeatures browserUnbundlingPublic(Boolean browserUnbundlingPublic) {

        this.browserUnbundlingPublic = browserUnbundlingPublic;
        return this;
    }

    /**
     * Whether this Destination supports public browser unbundling.
     *
     * @return browserUnbundlingPublic
     */
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Whether this Destination supports public browser unbundling.")
    public Boolean getBrowserUnbundlingPublic() {
        return browserUnbundlingPublic;
    }

    public void setBrowserUnbundlingPublic(Boolean browserUnbundlingPublic) {
        this.browserUnbundlingPublic = browserUnbundlingPublic;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SupportedFeatures supportedFeatures = (SupportedFeatures) o;
        return Objects.equals(this.cloudModeInstances, supportedFeatures.cloudModeInstances)
                && Objects.equals(this.deviceModeInstances, supportedFeatures.deviceModeInstances)
                && Objects.equals(this.replay, supportedFeatures.replay)
                && Objects.equals(this.browserUnbundling, supportedFeatures.browserUnbundling)
                && Objects.equals(
                        this.browserUnbundlingPublic, supportedFeatures.browserUnbundlingPublic);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                cloudModeInstances,
                deviceModeInstances,
                replay,
                browserUnbundling,
                browserUnbundlingPublic);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SupportedFeatures {\n");
        sb.append("    cloudModeInstances: ")
                .append(toIndentedString(cloudModeInstances))
                .append("\n");
        sb.append("    deviceModeInstances: ")
                .append(toIndentedString(deviceModeInstances))
                .append("\n");
        sb.append("    replay: ").append(toIndentedString(replay)).append("\n");
        sb.append("    browserUnbundling: ")
                .append(toIndentedString(browserUnbundling))
                .append("\n");
        sb.append("    browserUnbundlingPublic: ")
                .append(toIndentedString(browserUnbundlingPublic))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("cloudModeInstances");
        openapiFields.add("deviceModeInstances");
        openapiFields.add("replay");
        openapiFields.add("browserUnbundling");
        openapiFields.add("browserUnbundlingPublic");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to SupportedFeatures
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!SupportedFeatures.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in SupportedFeatures is not found in the"
                                        + " empty JSON string",
                                SupportedFeatures.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!SupportedFeatures.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `SupportedFeatures` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }
        if ((jsonObj.get("cloudModeInstances") != null
                        && !jsonObj.get("cloudModeInstances").isJsonNull())
                && !jsonObj.get("cloudModeInstances").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `cloudModeInstances` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("cloudModeInstances").toString()));
        }
        if ((jsonObj.get("deviceModeInstances") != null
                        && !jsonObj.get("deviceModeInstances").isJsonNull())
                && !jsonObj.get("deviceModeInstances").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `deviceModeInstances` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("deviceModeInstances").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!SupportedFeatures.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'SupportedFeatures' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<SupportedFeatures> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(SupportedFeatures.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<SupportedFeatures>() {
                        @Override
                        public void write(JsonWriter out, SupportedFeatures value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public SupportedFeatures read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of SupportedFeatures given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of SupportedFeatures
     * @throws IOException if the JSON string is invalid with respect to SupportedFeatures
     */
    public static SupportedFeatures fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, SupportedFeatures.class);
    }

    /**
     * Convert an instance of SupportedFeatures to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
