/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

public class BaseState extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(BaseState.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!BaseState.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'BaseState' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<TransitionState> adapterTransitionState =
                    gson.getDelegateAdapter(this, TypeToken.get(TransitionState.class));
            final TypeAdapter<ExitState> adapterExitState =
                    gson.getDelegateAdapter(this, TypeToken.get(ExitState.class));
            final TypeAdapter<ExitDestinationState> adapterExitDestinationState =
                    gson.getDelegateAdapter(this, TypeToken.get(ExitDestinationState.class));
            final TypeAdapter<ExitRule> adapterExitRule =
                    gson.getDelegateAdapter(this, TypeToken.get(ExitRule.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<BaseState>() {
                        @Override
                        public void write(JsonWriter out, BaseState value) throws IOException {
                            if (value == null || value.getActualInstance() == null) {
                                elementAdapter.write(out, null);
                                return;
                            }

                            // check if the actual instance is of the type `TransitionState`
                            if (value.getActualInstance() instanceof TransitionState) {
                                JsonElement element =
                                        adapterTransitionState.toJsonTree(
                                                (TransitionState) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            // check if the actual instance is of the type `ExitState`
                            if (value.getActualInstance() instanceof ExitState) {
                                JsonElement element =
                                        adapterExitState.toJsonTree(
                                                (ExitState) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            // check if the actual instance is of the type `ExitDestinationState`
                            if (value.getActualInstance() instanceof ExitDestinationState) {
                                JsonElement element =
                                        adapterExitDestinationState.toJsonTree(
                                                (ExitDestinationState) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            // check if the actual instance is of the type `ExitRule`
                            if (value.getActualInstance() instanceof ExitRule) {
                                JsonElement element =
                                        adapterExitRule.toJsonTree(
                                                (ExitRule) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            throw new IOException(
                                    "Failed to serialize as the type doesn't match oneOf schemas:"
                                            + " ExitDestinationState, ExitRule, ExitState,"
                                            + " TransitionState");
                        }

                        @Override
                        public BaseState read(JsonReader in) throws IOException {
                            Object deserialized = null;
                            JsonElement jsonElement = elementAdapter.read(in);

                            int match = 0;
                            ArrayList<String> errorMessages = new ArrayList<>();
                            TypeAdapter actualAdapter = elementAdapter;

                            // deserialize TransitionState
                            try {
                                // validate the JSON object to see if any exception is thrown
                                TransitionState.validateJsonElement(jsonElement);
                                actualAdapter = adapterTransitionState;
                                match++;
                                log.log(Level.FINER, "Input data matches schema 'TransitionState'");
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for TransitionState failed with"
                                                        + " `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'TransitionState'",
                                        e);
                            }
                            // deserialize ExitState
                            try {
                                // validate the JSON object to see if any exception is thrown
                                ExitState.validateJsonElement(jsonElement);
                                actualAdapter = adapterExitState;
                                match++;
                                log.log(Level.FINER, "Input data matches schema 'ExitState'");
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for ExitState failed with `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'ExitState'",
                                        e);
                            }
                            // deserialize ExitDestinationState
                            try {
                                // validate the JSON object to see if any exception is thrown
                                ExitDestinationState.validateJsonElement(jsonElement);
                                actualAdapter = adapterExitDestinationState;
                                match++;
                                log.log(
                                        Level.FINER,
                                        "Input data matches schema 'ExitDestinationState'");
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for ExitDestinationState failed"
                                                        + " with `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'ExitDestinationState'",
                                        e);
                            }
                            // deserialize ExitRule
                            try {
                                // validate the JSON object to see if any exception is thrown
                                ExitRule.validateJsonElement(jsonElement);
                                actualAdapter = adapterExitRule;
                                match++;
                                log.log(Level.FINER, "Input data matches schema 'ExitRule'");
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for ExitRule failed with `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'ExitRule'",
                                        e);
                            }

                            if (match == 1) {
                                BaseState ret = new BaseState();
                                ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                                return ret;
                            }

                            throw new IOException(
                                    String.format(
                                            "Failed deserialization for BaseState: %d classes match"
                                                + " result, expected 1. Detailed failure message"
                                                + " for oneOf schemas: %s. JSON: %s",
                                            match, errorMessages, jsonElement.toString()));
                        }
                    }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public BaseState() {
        super("oneOf", Boolean.FALSE);
    }

    public BaseState(ExitDestinationState o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public BaseState(ExitRule o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public BaseState(ExitState o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public BaseState(TransitionState o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("TransitionState", TransitionState.class);
        schemas.put("ExitState", ExitState.class);
        schemas.put("ExitDestinationState", ExitDestinationState.class);
        schemas.put("ExitRule", ExitRule.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return BaseState.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check the instance parameter is valid
     * against the oneOf child schemas: ExitDestinationState, ExitRule, ExitState, TransitionState
     *
     * <p>It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof TransitionState) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ExitState) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ExitDestinationState) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ExitRule) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException(
                "Invalid instance type. Must be ExitDestinationState, ExitRule, ExitState,"
                        + " TransitionState");
    }

    /**
     * Get the actual instance, which can be the following: ExitDestinationState, ExitRule,
     * ExitState, TransitionState
     *
     * @return The actual instance (ExitDestinationState, ExitRule, ExitState, TransitionState)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `TransitionState`. If the actual instance is not
     * `TransitionState`, the ClassCastException will be thrown.
     *
     * @return The actual instance of `TransitionState`
     * @throws ClassCastException if the instance is not `TransitionState`
     */
    public TransitionState getTransitionState() throws ClassCastException {
        return (TransitionState) super.getActualInstance();
    }

    /**
     * Get the actual instance of `ExitState`. If the actual instance is not `ExitState`, the
     * ClassCastException will be thrown.
     *
     * @return The actual instance of `ExitState`
     * @throws ClassCastException if the instance is not `ExitState`
     */
    public ExitState getExitState() throws ClassCastException {
        return (ExitState) super.getActualInstance();
    }

    /**
     * Get the actual instance of `ExitDestinationState`. If the actual instance is not
     * `ExitDestinationState`, the ClassCastException will be thrown.
     *
     * @return The actual instance of `ExitDestinationState`
     * @throws ClassCastException if the instance is not `ExitDestinationState`
     */
    public ExitDestinationState getExitDestinationState() throws ClassCastException {
        return (ExitDestinationState) super.getActualInstance();
    }

    /**
     * Get the actual instance of `ExitRule`. If the actual instance is not `ExitRule`, the
     * ClassCastException will be thrown.
     *
     * @return The actual instance of `ExitRule`
     * @throws ClassCastException if the instance is not `ExitRule`
     */
    public ExitRule getExitRule() throws ClassCastException {
        return (ExitRule) super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to BaseState
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with TransitionState
        try {
            TransitionState.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for TransitionState failed with `%s`.",
                            e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ExitState
        try {
            ExitState.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for ExitState failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ExitDestinationState
        try {
            ExitDestinationState.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for ExitDestinationState failed with `%s`.",
                            e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ExitRule
        try {
            ExitRule.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for ExitRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(
                    String.format(
                            "The JSON string is invalid for BaseState with oneOf schemas:"
                                + " ExitDestinationState, ExitRule, ExitState, TransitionState. %d"
                                + " class(es) match the result, expected 1. Detailed failure"
                                + " message for oneOf schemas: %s. JSON: %s",
                            validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of BaseState given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of BaseState
     * @throws IOException if the JSON string is invalid with respect to BaseState
     */
    public static BaseState fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, BaseState.class);
    }

    /**
     * Convert an instance of BaseState to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
