/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * The &#x60;DeliveryOverviewSuccessfullyReceivedFilterBy&#x60; object is a map of the filterable
 * fields and their values for the Successfully Received pipeline step.
 */
public class DeliveryOverviewSuccessfullyReceivedFilterBy {
    public static final String SERIALIZED_NAME_EVENT_NAME = "eventName";

    @SerializedName(SERIALIZED_NAME_EVENT_NAME)
    private List<String> eventName;

    public static final String SERIALIZED_NAME_EVENT_TYPE = "eventType";

    @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
    private List<String> eventType;

    public static final String SERIALIZED_NAME_APP_VERSION = "appVersion";

    @SerializedName(SERIALIZED_NAME_APP_VERSION)
    private List<String> appVersion;

    public DeliveryOverviewSuccessfullyReceivedFilterBy() {}

    public DeliveryOverviewSuccessfullyReceivedFilterBy eventName(List<String> eventName) {

        this.eventName = eventName;
        return this;
    }

    public DeliveryOverviewSuccessfullyReceivedFilterBy addEventNameItem(String eventNameItem) {
        if (this.eventName == null) {
            this.eventName = new ArrayList<>();
        }
        this.eventName.add(eventNameItem);
        return this;
    }

    /**
     * A list of strings of event names.
     *
     * @return eventName
     */
    @javax.annotation.Nullable
    public List<String> getEventName() {
        return eventName;
    }

    public void setEventName(List<String> eventName) {
        this.eventName = eventName;
    }

    public DeliveryOverviewSuccessfullyReceivedFilterBy eventType(List<String> eventType) {

        this.eventType = eventType;
        return this;
    }

    public DeliveryOverviewSuccessfullyReceivedFilterBy addEventTypeItem(String eventTypeItem) {
        if (this.eventType == null) {
            this.eventType = new ArrayList<>();
        }
        this.eventType.add(eventTypeItem);
        return this;
    }

    /**
     * A list of strings of event types. Valid options are: &#x60;alias&#x60;, &#x60;group&#x60;,
     * &#x60;identify&#x60;, &#x60;page&#x60;, &#x60;screen&#x60;, and &#x60;track&#x60;.
     *
     * @return eventType
     */
    @javax.annotation.Nullable
    public List<String> getEventType() {
        return eventType;
    }

    public void setEventType(List<String> eventType) {
        this.eventType = eventType;
    }

    public DeliveryOverviewSuccessfullyReceivedFilterBy appVersion(List<String> appVersion) {

        this.appVersion = appVersion;
        return this;
    }

    public DeliveryOverviewSuccessfullyReceivedFilterBy addAppVersionItem(String appVersionItem) {
        if (this.appVersion == null) {
            this.appVersion = new ArrayList<>();
        }
        this.appVersion.add(appVersionItem);
        return this;
    }

    /**
     * A list of strings of app versions.
     *
     * @return appVersion
     */
    @javax.annotation.Nullable
    public List<String> getAppVersion() {
        return appVersion;
    }

    public void setAppVersion(List<String> appVersion) {
        this.appVersion = appVersion;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DeliveryOverviewSuccessfullyReceivedFilterBy deliveryOverviewSuccessfullyReceivedFilterBy =
                (DeliveryOverviewSuccessfullyReceivedFilterBy) o;
        return Objects.equals(
                        this.eventName, deliveryOverviewSuccessfullyReceivedFilterBy.eventName)
                && Objects.equals(
                        this.eventType, deliveryOverviewSuccessfullyReceivedFilterBy.eventType)
                && Objects.equals(
                        this.appVersion, deliveryOverviewSuccessfullyReceivedFilterBy.appVersion);
    }

    @Override
    public int hashCode() {
        return Objects.hash(eventName, eventType, appVersion);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class DeliveryOverviewSuccessfullyReceivedFilterBy {\n");
        sb.append("    eventName: ").append(toIndentedString(eventName)).append("\n");
        sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
        sb.append("    appVersion: ").append(toIndentedString(appVersion)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("eventName");
        openapiFields.add("eventType");
        openapiFields.add("appVersion");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     DeliveryOverviewSuccessfullyReceivedFilterBy
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!DeliveryOverviewSuccessfullyReceivedFilterBy.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " DeliveryOverviewSuccessfullyReceivedFilterBy is not found"
                                    + " in the empty JSON string",
                                DeliveryOverviewSuccessfullyReceivedFilterBy.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!DeliveryOverviewSuccessfullyReceivedFilterBy.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `DeliveryOverviewSuccessfullyReceivedFilterBy` properties."
                                    + " JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        // ensure the optional json data is an array if present
        if (jsonObj.get("eventName") != null
                && !jsonObj.get("eventName").isJsonNull()
                && !jsonObj.get("eventName").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `eventName` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("eventName").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("eventType") != null
                && !jsonObj.get("eventType").isJsonNull()
                && !jsonObj.get("eventType").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `eventType` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("eventType").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("appVersion") != null
                && !jsonObj.get("appVersion").isJsonNull()
                && !jsonObj.get("appVersion").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `appVersion` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("appVersion").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!DeliveryOverviewSuccessfullyReceivedFilterBy.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'DeliveryOverviewSuccessfullyReceivedFilterBy' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<DeliveryOverviewSuccessfullyReceivedFilterBy> thisAdapter =
                    gson.getDelegateAdapter(
                            this,
                            TypeToken.get(DeliveryOverviewSuccessfullyReceivedFilterBy.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<DeliveryOverviewSuccessfullyReceivedFilterBy>() {
                        @Override
                        public void write(
                                JsonWriter out, DeliveryOverviewSuccessfullyReceivedFilterBy value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public DeliveryOverviewSuccessfullyReceivedFilterBy read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of DeliveryOverviewSuccessfullyReceivedFilterBy given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of DeliveryOverviewSuccessfullyReceivedFilterBy
     * @throws IOException if the JSON string is invalid with respect to
     *     DeliveryOverviewSuccessfullyReceivedFilterBy
     */
    public static DeliveryOverviewSuccessfullyReceivedFilterBy fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, DeliveryOverviewSuccessfullyReceivedFilterBy.class);
    }

    /**
     * Convert an instance of DeliveryOverviewSuccessfullyReceivedFilterBy to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
