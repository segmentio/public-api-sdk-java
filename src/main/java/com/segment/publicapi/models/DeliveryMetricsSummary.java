/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * The version of the OpenAPI document: 32.0.4
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;


import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** The delivery metrics summary returned. */
@ApiModel(description = "The delivery metrics summary returned.")
public class DeliveryMetricsSummary {
    public static final String SERIALIZED_NAME_SOURCE_ID = "sourceId";

    @SerializedName(SERIALIZED_NAME_SOURCE_ID)
    private String sourceId;

    public static final String SERIALIZED_NAME_DESTINATION_METADATA_ID = "destinationMetadataId";

    @SerializedName(SERIALIZED_NAME_DESTINATION_METADATA_ID)
    private String destinationMetadataId;

    public static final String SERIALIZED_NAME_METRICS = "metrics";

    @SerializedName(SERIALIZED_NAME_METRICS)
    private List<MetricBeta> metrics = new ArrayList<>();

    public DeliveryMetricsSummary() {}

    public DeliveryMetricsSummary sourceId(String sourceId) {

        this.sourceId = sourceId;
        return this;
    }

    /**
     * The Source id. Config API note: analogous to &#x60;parent&#x60;.
     *
     * @return sourceId
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(
            required = true,
            value = "The Source id.  Config API note: analogous to `parent`.")
    public String getSourceId() {
        return sourceId;
    }

    public void setSourceId(String sourceId) {
        this.sourceId = sourceId;
    }

    public DeliveryMetricsSummary destinationMetadataId(String destinationMetadataId) {

        this.destinationMetadataId = destinationMetadataId;
        return this;
    }

    /**
     * The Destination metadata id.
     *
     * @return destinationMetadataId
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "The Destination metadata id.")
    public String getDestinationMetadataId() {
        return destinationMetadataId;
    }

    public void setDestinationMetadataId(String destinationMetadataId) {
        this.destinationMetadataId = destinationMetadataId;
    }

    public DeliveryMetricsSummary metrics(List<MetricBeta> metrics) {

        this.metrics = metrics;
        return this;
    }

    public DeliveryMetricsSummary addMetricsItem(MetricBeta metricsItem) {
        this.metrics.add(metricsItem);
        return this;
    }

    /**
     * The summary of event delivery metrics for the requested Destination.
     *
     * @return metrics
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(
            required = true,
            value = "The summary of event delivery metrics for the requested Destination.")
    public List<MetricBeta> getMetrics() {
        return metrics;
    }

    public void setMetrics(List<MetricBeta> metrics) {
        this.metrics = metrics;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DeliveryMetricsSummary deliveryMetricsSummary = (DeliveryMetricsSummary) o;
        return Objects.equals(this.sourceId, deliveryMetricsSummary.sourceId)
                && Objects.equals(
                        this.destinationMetadataId, deliveryMetricsSummary.destinationMetadataId)
                && Objects.equals(this.metrics, deliveryMetricsSummary.metrics);
    }

    @Override
    public int hashCode() {
        return Objects.hash(sourceId, destinationMetadataId, metrics);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class DeliveryMetricsSummary {\n");
        sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
        sb.append("    destinationMetadataId: ")
                .append(toIndentedString(destinationMetadataId))
                .append("\n");
        sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("sourceId");
        openapiFields.add("destinationMetadataId");
        openapiFields.add("metrics");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("sourceId");
        openapiRequiredFields.add("destinationMetadataId");
        openapiRequiredFields.add("metrics");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to DeliveryMetricsSummary
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!DeliveryMetricsSummary.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in DeliveryMetricsSummary is not found in"
                                        + " the empty JSON string",
                                DeliveryMetricsSummary.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!DeliveryMetricsSummary.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `DeliveryMetricsSummary` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : DeliveryMetricsSummary.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonObj.toString()));
            }
        }
        if (!jsonObj.get("sourceId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `sourceId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("sourceId").toString()));
        }
        if (!jsonObj.get("destinationMetadataId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `destinationMetadataId` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("destinationMetadataId").toString()));
        }
        // ensure the json data is an array
        if (!jsonObj.get("metrics").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `metrics` to be an array in the JSON string but got"
                                    + " `%s`",
                            jsonObj.get("metrics").toString()));
        }

        JsonArray jsonArraymetrics = jsonObj.getAsJsonArray("metrics");
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!DeliveryMetricsSummary.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'DeliveryMetricsSummary' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<DeliveryMetricsSummary> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(DeliveryMetricsSummary.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<DeliveryMetricsSummary>() {
                        @Override
                        public void write(JsonWriter out, DeliveryMetricsSummary value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public DeliveryMetricsSummary read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of DeliveryMetricsSummary given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of DeliveryMetricsSummary
     * @throws IOException if the JSON string is invalid with respect to DeliveryMetricsSummary
     */
    public static DeliveryMetricsSummary fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, DeliveryMetricsSummary.class);
    }

    /**
     * Convert an instance of DeliveryMetricsSummary to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
