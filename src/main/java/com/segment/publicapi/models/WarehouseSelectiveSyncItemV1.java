/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * The version of the OpenAPI document: 32.0.5
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;


import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** Represents an entry in the Warehouse Selective Sync schema for a Warehouse and Source pair. */
@ApiModel(
        description =
                "Represents an entry in the Warehouse Selective Sync schema for a Warehouse and"
                        + " Source pair.")
public class WarehouseSelectiveSyncItemV1 {
    public static final String SERIALIZED_NAME_SOURCE_ID = "sourceId";

    @SerializedName(SERIALIZED_NAME_SOURCE_ID)
    private String sourceId;

    public static final String SERIALIZED_NAME_COLLECTION = "collection";

    @SerializedName(SERIALIZED_NAME_COLLECTION)
    private String collection;

    public static final String SERIALIZED_NAME_WAREHOUSE_ID = "warehouseId";

    @SerializedName(SERIALIZED_NAME_WAREHOUSE_ID)
    private String warehouseId;

    public static final String SERIALIZED_NAME_PROPERTIES = "properties";

    @SerializedName(SERIALIZED_NAME_PROPERTIES)
    private Map<String, Object> properties = new HashMap<>();

    public WarehouseSelectiveSyncItemV1() {}

    public WarehouseSelectiveSyncItemV1 sourceId(String sourceId) {

        this.sourceId = sourceId;
        return this;
    }

    /**
     * The Source id attached to this Warehouse.
     *
     * @return sourceId
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "The Source id attached to this Warehouse.")
    public String getSourceId() {
        return sourceId;
    }

    public void setSourceId(String sourceId) {
        this.sourceId = sourceId;
    }

    public WarehouseSelectiveSyncItemV1 collection(String collection) {

        this.collection = collection;
        return this;
    }

    /**
     * The collection within the Source.
     *
     * @return collection
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "The collection within the Source.")
    public String getCollection() {
        return collection;
    }

    public void setCollection(String collection) {
        this.collection = collection;
    }

    public WarehouseSelectiveSyncItemV1 warehouseId(String warehouseId) {

        this.warehouseId = warehouseId;
        return this;
    }

    /**
     * The id of the Warehouse this sync belongs to.
     *
     * @return warehouseId
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "The id of the Warehouse this sync belongs to.")
    public String getWarehouseId() {
        return warehouseId;
    }

    public void setWarehouseId(String warehouseId) {
        this.warehouseId = warehouseId;
    }

    public WarehouseSelectiveSyncItemV1 properties(Map<String, Object> properties) {

        this.properties = properties;
        return this;
    }

    public WarehouseSelectiveSyncItemV1 putPropertiesItem(String key, Object propertiesItem) {
        this.properties.put(key, propertiesItem);
        return this;
    }

    /**
     * A map that contains the properties within the collection to which the Warehouse should sync.
     *
     * @return properties
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(
            required = true,
            value =
                    "A map that contains the properties within the collection to which the"
                            + " Warehouse should sync.")
    public Map<String, Object> getProperties() {
        return properties;
    }

    public void setProperties(Map<String, Object> properties) {
        this.properties = properties;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WarehouseSelectiveSyncItemV1 warehouseSelectiveSyncItemV1 =
                (WarehouseSelectiveSyncItemV1) o;
        return Objects.equals(this.sourceId, warehouseSelectiveSyncItemV1.sourceId)
                && Objects.equals(this.collection, warehouseSelectiveSyncItemV1.collection)
                && Objects.equals(this.warehouseId, warehouseSelectiveSyncItemV1.warehouseId)
                && Objects.equals(this.properties, warehouseSelectiveSyncItemV1.properties);
    }

    @Override
    public int hashCode() {
        return Objects.hash(sourceId, collection, warehouseId, properties);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class WarehouseSelectiveSyncItemV1 {\n");
        sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
        sb.append("    collection: ").append(toIndentedString(collection)).append("\n");
        sb.append("    warehouseId: ").append(toIndentedString(warehouseId)).append("\n");
        sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("sourceId");
        openapiFields.add("collection");
        openapiFields.add("warehouseId");
        openapiFields.add("properties");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("sourceId");
        openapiRequiredFields.add("collection");
        openapiRequiredFields.add("warehouseId");
        openapiRequiredFields.add("properties");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to
     *     WarehouseSelectiveSyncItemV1
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!WarehouseSelectiveSyncItemV1.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in WarehouseSelectiveSyncItemV1 is not"
                                        + " found in the empty JSON string",
                                WarehouseSelectiveSyncItemV1.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!WarehouseSelectiveSyncItemV1.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `WarehouseSelectiveSyncItemV1` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : WarehouseSelectiveSyncItemV1.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonObj.toString()));
            }
        }
        if (!jsonObj.get("sourceId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `sourceId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("sourceId").toString()));
        }
        if (!jsonObj.get("collection").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `collection` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("collection").toString()));
        }
        if (!jsonObj.get("warehouseId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `warehouseId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("warehouseId").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!WarehouseSelectiveSyncItemV1.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'WarehouseSelectiveSyncItemV1' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<WarehouseSelectiveSyncItemV1> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(WarehouseSelectiveSyncItemV1.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<WarehouseSelectiveSyncItemV1>() {
                        @Override
                        public void write(JsonWriter out, WarehouseSelectiveSyncItemV1 value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public WarehouseSelectiveSyncItemV1 read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of WarehouseSelectiveSyncItemV1 given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of WarehouseSelectiveSyncItemV1
     * @throws IOException if the JSON string is invalid with respect to
     *     WarehouseSelectiveSyncItemV1
     */
    public static WarehouseSelectiveSyncItemV1 fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, WarehouseSelectiveSyncItemV1.class);
    }

    /**
     * Convert an instance of WarehouseSelectiveSyncItemV1 to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
