/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** Sort criteria input for list audience consumers. */
public class ListAudienceConsumersSortInput {
    /** Field to sort by. */
    @JsonAdapter(FieldEnum.Adapter.class)
    public enum FieldEnum {
        CREATED_AT("CREATED_AT"),

        NAME("NAME"),

        UPDATED_AT("UPDATED_AT");

        private String value;

        FieldEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static FieldEnum fromValue(String value) {
            for (FieldEnum b : FieldEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<FieldEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final FieldEnum enumeration)
                    throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public FieldEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return FieldEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_FIELD = "field";

    @SerializedName(SERIALIZED_NAME_FIELD)
    private FieldEnum field;

    /** Sort direction (ascending or descending). */
    @JsonAdapter(DirectionEnum.Adapter.class)
    public enum DirectionEnum {
        ASC("ASC"),

        DESC("DESC");

        private String value;

        DirectionEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static DirectionEnum fromValue(String value) {
            for (DirectionEnum b : DirectionEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<DirectionEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final DirectionEnum enumeration)
                    throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public DirectionEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return DirectionEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_DIRECTION = "direction";

    @SerializedName(SERIALIZED_NAME_DIRECTION)
    private DirectionEnum direction;

    public ListAudienceConsumersSortInput() {}

    public ListAudienceConsumersSortInput field(FieldEnum field) {

        this.field = field;
        return this;
    }

    /**
     * Field to sort by.
     *
     * @return field
     */
    @javax.annotation.Nonnull
    public FieldEnum getField() {
        return field;
    }

    public void setField(FieldEnum field) {
        this.field = field;
    }

    public ListAudienceConsumersSortInput direction(DirectionEnum direction) {

        this.direction = direction;
        return this;
    }

    /**
     * Sort direction (ascending or descending).
     *
     * @return direction
     */
    @javax.annotation.Nonnull
    public DirectionEnum getDirection() {
        return direction;
    }

    public void setDirection(DirectionEnum direction) {
        this.direction = direction;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListAudienceConsumersSortInput listAudienceConsumersSortInput =
                (ListAudienceConsumersSortInput) o;
        return Objects.equals(this.field, listAudienceConsumersSortInput.field)
                && Objects.equals(this.direction, listAudienceConsumersSortInput.direction);
    }

    @Override
    public int hashCode() {
        return Objects.hash(field, direction);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ListAudienceConsumersSortInput {\n");
        sb.append("    field: ").append(toIndentedString(field)).append("\n");
        sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("field");
        openapiFields.add("direction");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("field");
        openapiRequiredFields.add("direction");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     ListAudienceConsumersSortInput
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!ListAudienceConsumersSortInput.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in ListAudienceConsumersSortInput is not"
                                        + " found in the empty JSON string",
                                ListAudienceConsumersSortInput.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!ListAudienceConsumersSortInput.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `ListAudienceConsumersSortInput` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : ListAudienceConsumersSortInput.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("field").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `field` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("field").toString()));
        }
        if (!jsonObj.get("direction").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `direction` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("direction").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ListAudienceConsumersSortInput.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ListAudienceConsumersSortInput' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ListAudienceConsumersSortInput> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(ListAudienceConsumersSortInput.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<ListAudienceConsumersSortInput>() {
                        @Override
                        public void write(JsonWriter out, ListAudienceConsumersSortInput value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public ListAudienceConsumersSortInput read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of ListAudienceConsumersSortInput given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ListAudienceConsumersSortInput
     * @throws IOException if the JSON string is invalid with respect to
     *     ListAudienceConsumersSortInput
     */
    public static ListAudienceConsumersSortInput fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, ListAudienceConsumersSortInput.class);
    }

    /**
     * Convert an instance of ListAudienceConsumersSortInput to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
