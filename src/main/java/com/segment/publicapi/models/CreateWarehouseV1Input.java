/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * The version of the OpenAPI document: 33.0.0
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;


import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** Create a new Warehouse based on a set of parameters. */
@ApiModel(description = "Create a new Warehouse based on a set of parameters.")
public class CreateWarehouseV1Input {
    public static final String SERIALIZED_NAME_METADATA_ID = "metadataId";

    @SerializedName(SERIALIZED_NAME_METADATA_ID)
    private String metadataId;

    public static final String SERIALIZED_NAME_NAME = "name";

    @SerializedName(SERIALIZED_NAME_NAME)
    private String name;

    public static final String SERIALIZED_NAME_ENABLED = "enabled";

    @SerializedName(SERIALIZED_NAME_ENABLED)
    private Boolean enabled;

    public static final String SERIALIZED_NAME_SETTINGS = "settings";

    @SerializedName(SERIALIZED_NAME_SETTINGS)
    private Map settings;

    public CreateWarehouseV1Input() {}

    public CreateWarehouseV1Input metadataId(String metadataId) {

        this.metadataId = metadataId;
        return this;
    }

    /**
     * The Warehouse metadata to use.
     *
     * @return metadataId
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "The Warehouse metadata to use.")
    public String getMetadataId() {
        return metadataId;
    }

    public void setMetadataId(String metadataId) {
        this.metadataId = metadataId;
    }

    public CreateWarehouseV1Input name(String name) {

        this.name = name;
        return this;
    }

    /**
     * An optional human-readable name for this Warehouse.
     *
     * @return name
     */
    @javax.annotation.Nullable
    @ApiModelProperty(value = "An optional human-readable name for this Warehouse.")
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public CreateWarehouseV1Input enabled(Boolean enabled) {

        this.enabled = enabled;
        return this;
    }

    /**
     * Enable to allow this Warehouse to receive data. Defaults to true.
     *
     * @return enabled
     */
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Enable to allow this Warehouse to receive data. Defaults to true.")
    public Boolean getEnabled() {
        return enabled;
    }

    public void setEnabled(Boolean enabled) {
        this.enabled = enabled;
    }

    public CreateWarehouseV1Input settings(Map settings) {

        this.settings = settings;
        return this;
    }

    /**
     * A key-value object that contains instance-specific settings for a Warehouse. Different kinds
     * of Warehouses require different settings. The required and optional settings for a Warehouse
     * are described in the &#x60;options&#x60; object of the associated Warehouse metadata. You can
     * find the full list of Warehouse metadata and related settings information in the
     * &#x60;/catalog/warehouses&#x60; endpoint.
     *
     * @return settings
     */
    @javax.annotation.Nullable
    @ApiModelProperty(
            required = true,
            value =
                    "A key-value object that contains instance-specific settings for a Warehouse. "
                        + " Different kinds of Warehouses require different settings. The required"
                        + " and optional settings for a Warehouse are described in the `options`"
                        + " object of the associated Warehouse metadata.  You can find the full"
                        + " list of Warehouse metadata and related settings information in the"
                        + " `/catalog/warehouses` endpoint.")
    public Map getSettings() {
        return settings;
    }

    public void setSettings(Map settings) {
        this.settings = settings;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateWarehouseV1Input createWarehouseV1Input = (CreateWarehouseV1Input) o;
        return Objects.equals(this.metadataId, createWarehouseV1Input.metadataId)
                && Objects.equals(this.name, createWarehouseV1Input.name)
                && Objects.equals(this.enabled, createWarehouseV1Input.enabled)
                && Objects.equals(this.settings, createWarehouseV1Input.settings);
    }

    @Override
    public int hashCode() {
        return Objects.hash(metadataId, name, enabled, settings);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CreateWarehouseV1Input {\n");
        sb.append("    metadataId: ").append(toIndentedString(metadataId)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
        sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("metadataId");
        openapiFields.add("name");
        openapiFields.add("enabled");
        openapiFields.add("settings");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("metadataId");
        openapiRequiredFields.add("settings");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to CreateWarehouseV1Input
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!CreateWarehouseV1Input.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in CreateWarehouseV1Input is not found in"
                                        + " the empty JSON string",
                                CreateWarehouseV1Input.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!CreateWarehouseV1Input.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `CreateWarehouseV1Input` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : CreateWarehouseV1Input.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonObj.toString()));
            }
        }
        if (!jsonObj.get("metadataId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `metadataId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("metadataId").toString()));
        }
        if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull())
                && !jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `name` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("name").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CreateWarehouseV1Input.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CreateWarehouseV1Input' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CreateWarehouseV1Input> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(CreateWarehouseV1Input.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<CreateWarehouseV1Input>() {
                        @Override
                        public void write(JsonWriter out, CreateWarehouseV1Input value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public CreateWarehouseV1Input read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of CreateWarehouseV1Input given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CreateWarehouseV1Input
     * @throws IOException if the JSON string is invalid with respect to CreateWarehouseV1Input
     */
    public static CreateWarehouseV1Input fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CreateWarehouseV1Input.class);
    }

    /**
     * Convert an instance of CreateWarehouseV1Input to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
