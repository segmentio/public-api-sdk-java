/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** SimpleDestination */
public class SimpleDestination {
    public static final String SERIALIZED_NAME_ID = "id";

    @SerializedName(SERIALIZED_NAME_ID)
    private String id;

    public static final String SERIALIZED_NAME_NAME = "name";

    @SerializedName(SERIALIZED_NAME_NAME)
    private String name;

    public static final String SERIALIZED_NAME_SOURCE_ID = "sourceId";

    @SerializedName(SERIALIZED_NAME_SOURCE_ID)
    private String sourceId;

    public static final String SERIALIZED_NAME_ENABLED = "enabled";

    @SerializedName(SERIALIZED_NAME_ENABLED)
    private Boolean enabled;

    public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";

    @SerializedName(SERIALIZED_NAME_CREATED_AT)
    private String createdAt;

    public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";

    @SerializedName(SERIALIZED_NAME_UPDATED_AT)
    private String updatedAt;

    public static final String SERIALIZED_NAME_SETTINGS = "settings";

    @SerializedName(SERIALIZED_NAME_SETTINGS)
    private Map<String, Object> settings = new HashMap<>();

    public static final String SERIALIZED_NAME_DESTINATION_ID = "destinationId";

    @SerializedName(SERIALIZED_NAME_DESTINATION_ID)
    private String destinationId;

    public static final String SERIALIZED_NAME_METADATA = "metadata";

    @SerializedName(SERIALIZED_NAME_METADATA)
    private Metadata metadata;

    public static final String SERIALIZED_NAME_ID_SYNC = "idSync";

    @SerializedName(SERIALIZED_NAME_ID_SYNC)
    private IDSyncOptions idSync;

    public SimpleDestination() {}

    public SimpleDestination id(String id) {

        this.id = id;
        return this;
    }

    /**
     * The id of the Integration.
     *
     * @return id
     */
    @javax.annotation.Nonnull
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public SimpleDestination name(String name) {

        this.name = name;
        return this;
    }

    /**
     * The name of the Destination.
     *
     * @return name
     */
    @javax.annotation.Nullable
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public SimpleDestination sourceId(String sourceId) {

        this.sourceId = sourceId;
        return this;
    }

    /**
     * The Source of the Destination.
     *
     * @return sourceId
     */
    @javax.annotation.Nonnull
    public String getSourceId() {
        return sourceId;
    }

    public void setSourceId(String sourceId) {
        this.sourceId = sourceId;
    }

    public SimpleDestination enabled(Boolean enabled) {

        this.enabled = enabled;
        return this;
    }

    /**
     * Whether the Integration is enabled or not.
     *
     * @return enabled
     */
    @javax.annotation.Nonnull
    public Boolean getEnabled() {
        return enabled;
    }

    public void setEnabled(Boolean enabled) {
        this.enabled = enabled;
    }

    public SimpleDestination createdAt(String createdAt) {

        this.createdAt = createdAt;
        return this;
    }

    /**
     * When the Integration connection was created.
     *
     * @return createdAt
     */
    @javax.annotation.Nonnull
    public String getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(String createdAt) {
        this.createdAt = createdAt;
    }

    public SimpleDestination updatedAt(String updatedAt) {

        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * When the Integration connection was last updated.
     *
     * @return updatedAt
     */
    @javax.annotation.Nonnull
    public String getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
    }

    public SimpleDestination settings(Map<String, Object> settings) {

        this.settings = settings;
        return this;
    }

    public SimpleDestination putSettingsItem(String key, Object settingsItem) {
        if (this.settings == null) {
            this.settings = new HashMap<>();
        }
        this.settings.put(key, settingsItem);
        return this;
    }

    /**
     * The Destination settings.
     *
     * @return settings
     */
    @javax.annotation.Nonnull
    public Map<String, Object> getSettings() {
        return settings;
    }

    public void setSettings(Map<String, Object> settings) {
        this.settings = settings;
    }

    public SimpleDestination destinationId(String destinationId) {

        this.destinationId = destinationId;
        return this;
    }

    /**
     * The Destination id.
     *
     * @return destinationId
     */
    @javax.annotation.Nonnull
    public String getDestinationId() {
        return destinationId;
    }

    public void setDestinationId(String destinationId) {
        this.destinationId = destinationId;
    }

    public SimpleDestination metadata(Metadata metadata) {

        this.metadata = metadata;
        return this;
    }

    /**
     * Get metadata
     *
     * @return metadata
     */
    @javax.annotation.Nullable
    public Metadata getMetadata() {
        return metadata;
    }

    public void setMetadata(Metadata metadata) {
        this.metadata = metadata;
    }

    public SimpleDestination idSync(IDSyncOptions idSync) {

        this.idSync = idSync;
        return this;
    }

    /**
     * Get idSync
     *
     * @return idSync
     */
    @javax.annotation.Nullable
    public IDSyncOptions getIdSync() {
        return idSync;
    }

    public void setIdSync(IDSyncOptions idSync) {
        this.idSync = idSync;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SimpleDestination simpleDestination = (SimpleDestination) o;
        return Objects.equals(this.id, simpleDestination.id)
                && Objects.equals(this.name, simpleDestination.name)
                && Objects.equals(this.sourceId, simpleDestination.sourceId)
                && Objects.equals(this.enabled, simpleDestination.enabled)
                && Objects.equals(this.createdAt, simpleDestination.createdAt)
                && Objects.equals(this.updatedAt, simpleDestination.updatedAt)
                && Objects.equals(this.settings, simpleDestination.settings)
                && Objects.equals(this.destinationId, simpleDestination.destinationId)
                && Objects.equals(this.metadata, simpleDestination.metadata)
                && Objects.equals(this.idSync, simpleDestination.idSync);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                id,
                name,
                sourceId,
                enabled,
                createdAt,
                updatedAt,
                settings,
                destinationId,
                metadata,
                idSync);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SimpleDestination {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
        sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
        sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
        sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
        sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
        sb.append("    destinationId: ").append(toIndentedString(destinationId)).append("\n");
        sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
        sb.append("    idSync: ").append(toIndentedString(idSync)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("id");
        openapiFields.add("name");
        openapiFields.add("sourceId");
        openapiFields.add("enabled");
        openapiFields.add("createdAt");
        openapiFields.add("updatedAt");
        openapiFields.add("settings");
        openapiFields.add("destinationId");
        openapiFields.add("metadata");
        openapiFields.add("idSync");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("id");
        openapiRequiredFields.add("sourceId");
        openapiRequiredFields.add("enabled");
        openapiRequiredFields.add("createdAt");
        openapiRequiredFields.add("updatedAt");
        openapiRequiredFields.add("settings");
        openapiRequiredFields.add("destinationId");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to SimpleDestination
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!SimpleDestination.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in SimpleDestination is not found in the"
                                        + " empty JSON string",
                                SimpleDestination.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!SimpleDestination.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `SimpleDestination` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : SimpleDestination.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("id").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `id` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("id").toString()));
        }
        if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull())
                && !jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `name` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("name").toString()));
        }
        if (!jsonObj.get("sourceId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `sourceId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("sourceId").toString()));
        }
        if (!jsonObj.get("createdAt").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `createdAt` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("createdAt").toString()));
        }
        if (!jsonObj.get("updatedAt").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `updatedAt` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("updatedAt").toString()));
        }
        if (!jsonObj.get("destinationId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `destinationId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("destinationId").toString()));
        }
        // validate the optional field `metadata`
        if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
            Metadata.validateJsonElement(jsonObj.get("metadata"));
        }
        // validate the optional field `idSync`
        if (jsonObj.get("idSync") != null && !jsonObj.get("idSync").isJsonNull()) {
            IDSyncOptions.validateJsonElement(jsonObj.get("idSync"));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!SimpleDestination.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'SimpleDestination' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<SimpleDestination> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(SimpleDestination.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<SimpleDestination>() {
                        @Override
                        public void write(JsonWriter out, SimpleDestination value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public SimpleDestination read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of SimpleDestination given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of SimpleDestination
     * @throws IOException if the JSON string is invalid with respect to SimpleDestination
     */
    public static SimpleDestination fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, SimpleDestination.class);
    }

    /**
     * Convert an instance of SimpleDestination to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
