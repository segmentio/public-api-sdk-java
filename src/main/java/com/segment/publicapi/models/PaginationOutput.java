/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * The version of the OpenAPI document: 32.0.8
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;


import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Pagination metadata for a list response. Responses return this object alongside a list of
 * resources, which provides the necessary metadata for manipulating a paginated collection. In
 * operations that return lists, it&#39;s always present, though some of its fields might not be.
 */
@ApiModel(
        description =
                "Pagination metadata for a list response.  Responses return this object alongside a"
                    + " list of resources, which provides the necessary metadata for manipulating a"
                    + " paginated collection. In operations that return lists, it's always present,"
                    + " though some of its fields might not be.")
public class PaginationOutput {
    public static final String SERIALIZED_NAME_CURRENT = "current";

    @SerializedName(SERIALIZED_NAME_CURRENT)
    private String current;

    public static final String SERIALIZED_NAME_NEXT = "next";

    @SerializedName(SERIALIZED_NAME_NEXT)
    private String next;

    public static final String SERIALIZED_NAME_PREVIOUS = "previous";

    @SerializedName(SERIALIZED_NAME_PREVIOUS)
    private String previous;

    public static final String SERIALIZED_NAME_TOTAL_ENTRIES = "totalEntries";

    @SerializedName(SERIALIZED_NAME_TOTAL_ENTRIES)
    private BigDecimal totalEntries;

    public PaginationOutput() {}

    public PaginationOutput current(String current) {

        this.current = current;
        return this;
    }

    /**
     * The current cursor within a collection. Consumers of the API must treat this value as opaque.
     *
     * @return current
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(
            required = true,
            value =
                    "The current cursor within a collection.  Consumers of the API must treat this"
                            + " value as opaque.")
    public String getCurrent() {
        return current;
    }

    public void setCurrent(String current) {
        this.current = current;
    }

    public PaginationOutput next(String next) {

        this.next = next;
        return this;
    }

    /**
     * A pointer to the next page. This does not return when you retrieve the last page. Consumers
     * of the API must treat this value as opaque.
     *
     * @return next
     */
    @javax.annotation.Nullable
    @ApiModelProperty(
            value =
                    "A pointer to the next page.  This does not return when you retrieve the last"
                            + " page.  Consumers of the API must treat this value as opaque.")
    public String getNext() {
        return next;
    }

    public void setNext(String next) {
        this.next = next;
    }

    public PaginationOutput previous(String previous) {

        this.previous = previous;
        return this;
    }

    /**
     * A pointer to the previous page. This does not return when you retrieve the first page.
     * Consumers of the API must treat this value as opaque.
     *
     * @return previous
     */
    @javax.annotation.Nullable
    @ApiModelProperty(
            value =
                    "A pointer to the previous page.  This does not return when you retrieve the"
                            + " first page.  Consumers of the API must treat this value as opaque.")
    public String getPrevious() {
        return previous;
    }

    public void setPrevious(String previous) {
        this.previous = previous;
    }

    public PaginationOutput totalEntries(BigDecimal totalEntries) {

        this.totalEntries = totalEntries;
        return this;
    }

    /**
     * The total number of entries available in the collection. If calculating it impacts
     * performance, the response may omit this field.
     *
     * @return totalEntries
     */
    @javax.annotation.Nullable
    @ApiModelProperty(
            value =
                    "The total number of entries available in the collection.  If calculating it"
                            + " impacts performance, the response may omit this field.")
    public BigDecimal getTotalEntries() {
        return totalEntries;
    }

    public void setTotalEntries(BigDecimal totalEntries) {
        this.totalEntries = totalEntries;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaginationOutput paginationOutput = (PaginationOutput) o;
        return Objects.equals(this.current, paginationOutput.current)
                && Objects.equals(this.next, paginationOutput.next)
                && Objects.equals(this.previous, paginationOutput.previous)
                && Objects.equals(this.totalEntries, paginationOutput.totalEntries);
    }

    private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
        return a == b
                || (a != null
                        && b != null
                        && a.isPresent()
                        && b.isPresent()
                        && Objects.deepEquals(a.get(), b.get()));
    }

    @Override
    public int hashCode() {
        return Objects.hash(current, next, previous, totalEntries);
    }

    private static <T> int hashCodeNullable(JsonNullable<T> a) {
        if (a == null) {
            return 1;
        }
        return a.isPresent() ? Arrays.deepHashCode(new Object[] {a.get()}) : 31;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PaginationOutput {\n");
        sb.append("    current: ").append(toIndentedString(current)).append("\n");
        sb.append("    next: ").append(toIndentedString(next)).append("\n");
        sb.append("    previous: ").append(toIndentedString(previous)).append("\n");
        sb.append("    totalEntries: ").append(toIndentedString(totalEntries)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("current");
        openapiFields.add("next");
        openapiFields.add("previous");
        openapiFields.add("totalEntries");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("current");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to PaginationOutput
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!PaginationOutput.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in PaginationOutput is not found in the"
                                        + " empty JSON string",
                                PaginationOutput.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!PaginationOutput.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `PaginationOutput` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : PaginationOutput.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonObj.toString()));
            }
        }
        if (!jsonObj.get("current").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `current` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("current").toString()));
        }
        if ((jsonObj.get("next") != null && !jsonObj.get("next").isJsonNull())
                && !jsonObj.get("next").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `next` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("next").toString()));
        }
        if ((jsonObj.get("previous") != null && !jsonObj.get("previous").isJsonNull())
                && !jsonObj.get("previous").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `previous` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("previous").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!PaginationOutput.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'PaginationOutput' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<PaginationOutput> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(PaginationOutput.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<PaginationOutput>() {
                        @Override
                        public void write(JsonWriter out, PaginationOutput value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public PaginationOutput read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of PaginationOutput given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of PaginationOutput
     * @throws IOException if the JSON string is invalid with respect to PaginationOutput
     */
    public static PaginationOutput fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, PaginationOutput.class);
    }

    /**
     * Convert an instance of PaginationOutput to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
