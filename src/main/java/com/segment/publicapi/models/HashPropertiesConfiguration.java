/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** HashPropertiesConfiguration */
public class HashPropertiesConfiguration {
    public static final String SERIALIZED_NAME_ALGORITHM = "algorithm";

    @SerializedName(SERIALIZED_NAME_ALGORITHM)
    private String algorithm;

    public static final String SERIALIZED_NAME_KEY = "key";

    @SerializedName(SERIALIZED_NAME_KEY)
    private String key;

    /** Optional encoding to use for the hashing. */
    @JsonAdapter(EncodingEnum.Adapter.class)
    public enum EncodingEnum {
        BASE16("BASE16"),

        BASE64("BASE64"),

        BASE64URL("BASE64URL"),

        HEX("HEX");

        private String value;

        EncodingEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static EncodingEnum fromValue(String value) {
            for (EncodingEnum b : EncodingEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<EncodingEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final EncodingEnum enumeration)
                    throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public EncodingEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return EncodingEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_ENCODING = "encoding";

    @SerializedName(SERIALIZED_NAME_ENCODING)
    private EncodingEnum encoding;

    public static final String SERIALIZED_NAME_PATHS = "paths";

    @SerializedName(SERIALIZED_NAME_PATHS)
    private List<String> paths = new ArrayList<>();

    public HashPropertiesConfiguration() {}

    public HashPropertiesConfiguration algorithm(String algorithm) {

        this.algorithm = algorithm;
        return this;
    }

    /**
     * Which algorithm to use to hash to properties.
     *
     * @return algorithm
     */
    @javax.annotation.Nonnull
    public String getAlgorithm() {
        return algorithm;
    }

    public void setAlgorithm(String algorithm) {
        this.algorithm = algorithm;
    }

    public HashPropertiesConfiguration key(String key) {

        this.key = key;
        return this;
    }

    /**
     * Optional key to hash with.
     *
     * @return key
     */
    @javax.annotation.Nullable
    public String getKey() {
        return key;
    }

    public void setKey(String key) {
        this.key = key;
    }

    public HashPropertiesConfiguration encoding(EncodingEnum encoding) {

        this.encoding = encoding;
        return this;
    }

    /**
     * Optional encoding to use for the hashing.
     *
     * @return encoding
     */
    @javax.annotation.Nullable
    public EncodingEnum getEncoding() {
        return encoding;
    }

    public void setEncoding(EncodingEnum encoding) {
        this.encoding = encoding;
    }

    public HashPropertiesConfiguration paths(List<String> paths) {

        this.paths = paths;
        return this;
    }

    public HashPropertiesConfiguration addPathsItem(String pathsItem) {
        if (this.paths == null) {
            this.paths = new ArrayList<>();
        }
        this.paths.add(pathsItem);
        return this;
    }

    /**
     * The paths to the properties to be hashed.
     *
     * @return paths
     */
    @javax.annotation.Nonnull
    public List<String> getPaths() {
        return paths;
    }

    public void setPaths(List<String> paths) {
        this.paths = paths;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        HashPropertiesConfiguration hashPropertiesConfiguration = (HashPropertiesConfiguration) o;
        return Objects.equals(this.algorithm, hashPropertiesConfiguration.algorithm)
                && Objects.equals(this.key, hashPropertiesConfiguration.key)
                && Objects.equals(this.encoding, hashPropertiesConfiguration.encoding)
                && Objects.equals(this.paths, hashPropertiesConfiguration.paths);
    }

    @Override
    public int hashCode() {
        return Objects.hash(algorithm, key, encoding, paths);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class HashPropertiesConfiguration {\n");
        sb.append("    algorithm: ").append(toIndentedString(algorithm)).append("\n");
        sb.append("    key: ").append(toIndentedString(key)).append("\n");
        sb.append("    encoding: ").append(toIndentedString(encoding)).append("\n");
        sb.append("    paths: ").append(toIndentedString(paths)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("algorithm");
        openapiFields.add("key");
        openapiFields.add("encoding");
        openapiFields.add("paths");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("algorithm");
        openapiRequiredFields.add("paths");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     HashPropertiesConfiguration
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!HashPropertiesConfiguration.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in HashPropertiesConfiguration is not"
                                        + " found in the empty JSON string",
                                HashPropertiesConfiguration.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!HashPropertiesConfiguration.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `HashPropertiesConfiguration` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : HashPropertiesConfiguration.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("algorithm").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `algorithm` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("algorithm").toString()));
        }
        if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull())
                && !jsonObj.get("key").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `key` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("key").toString()));
        }
        if ((jsonObj.get("encoding") != null && !jsonObj.get("encoding").isJsonNull())
                && !jsonObj.get("encoding").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `encoding` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("encoding").toString()));
        }
        // ensure the required json array is present
        if (jsonObj.get("paths") == null) {
            throw new IllegalArgumentException(
                    "Expected the field `linkedContent` to be an array in the JSON string but got"
                            + " `null`");
        } else if (!jsonObj.get("paths").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `paths` to be an array in the JSON string but got"
                                    + " `%s`",
                            jsonObj.get("paths").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!HashPropertiesConfiguration.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'HashPropertiesConfiguration' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<HashPropertiesConfiguration> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(HashPropertiesConfiguration.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<HashPropertiesConfiguration>() {
                        @Override
                        public void write(JsonWriter out, HashPropertiesConfiguration value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public HashPropertiesConfiguration read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of HashPropertiesConfiguration given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of HashPropertiesConfiguration
     * @throws IOException if the JSON string is invalid with respect to HashPropertiesConfiguration
     */
    public static HashPropertiesConfiguration fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, HashPropertiesConfiguration.class);
    }

    /**
     * Convert an instance of HashPropertiesConfiguration to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
