/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.openapitools.jackson.nullable.JsonNullable;

/** InsertFunctionInstanceAlpha */
public class InsertFunctionInstanceAlpha {
    public static final String SERIALIZED_NAME_ID = "id";

    @SerializedName(SERIALIZED_NAME_ID)
    private String id;

    public static final String SERIALIZED_NAME_NAME = "name";

    @SerializedName(SERIALIZED_NAME_NAME)
    private String name;

    public static final String SERIALIZED_NAME_INTEGRATION_ID = "integrationId";

    @SerializedName(SERIALIZED_NAME_INTEGRATION_ID)
    private String integrationId;

    public static final String SERIALIZED_NAME_CLASS_ID = "classId";

    @SerializedName(SERIALIZED_NAME_CLASS_ID)
    private String classId;

    public static final String SERIALIZED_NAME_ENABLED = "enabled";

    @SerializedName(SERIALIZED_NAME_ENABLED)
    private Boolean enabled;

    public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";

    @SerializedName(SERIALIZED_NAME_CREATED_AT)
    private String createdAt;

    public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";

    @SerializedName(SERIALIZED_NAME_UPDATED_AT)
    private String updatedAt;

    public static final String SERIALIZED_NAME_SETTINGS = "settings";

    @SerializedName(SERIALIZED_NAME_SETTINGS)
    private Map<String, Object> settings = new HashMap<>();

    public static final String SERIALIZED_NAME_ENCRYPTED_SETTINGS = "encryptedSettings";

    @SerializedName(SERIALIZED_NAME_ENCRYPTED_SETTINGS)
    private Map<String, Object> encryptedSettings = new HashMap<>();

    public static final String SERIALIZED_NAME_INTEGRATION_TYPE = "integrationType";

    @SerializedName(SERIALIZED_NAME_INTEGRATION_TYPE)
    private Object integrationType;

    public InsertFunctionInstanceAlpha() {}

    public InsertFunctionInstanceAlpha id(String id) {

        this.id = id;
        return this;
    }

    /**
     * Get id
     *
     * @return id
     */
    @javax.annotation.Nonnull
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public InsertFunctionInstanceAlpha name(String name) {

        this.name = name;
        return this;
    }

    /**
     * Get name
     *
     * @return name
     */
    @javax.annotation.Nullable
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public InsertFunctionInstanceAlpha integrationId(String integrationId) {

        this.integrationId = integrationId;
        return this;
    }

    /**
     * Get integrationId
     *
     * @return integrationId
     */
    @javax.annotation.Nonnull
    public String getIntegrationId() {
        return integrationId;
    }

    public void setIntegrationId(String integrationId) {
        this.integrationId = integrationId;
    }

    public InsertFunctionInstanceAlpha classId(String classId) {

        this.classId = classId;
        return this;
    }

    /**
     * Get classId
     *
     * @return classId
     */
    @javax.annotation.Nonnull
    public String getClassId() {
        return classId;
    }

    public void setClassId(String classId) {
        this.classId = classId;
    }

    public InsertFunctionInstanceAlpha enabled(Boolean enabled) {

        this.enabled = enabled;
        return this;
    }

    /**
     * Get enabled
     *
     * @return enabled
     */
    @javax.annotation.Nonnull
    public Boolean getEnabled() {
        return enabled;
    }

    public void setEnabled(Boolean enabled) {
        this.enabled = enabled;
    }

    public InsertFunctionInstanceAlpha createdAt(String createdAt) {

        this.createdAt = createdAt;
        return this;
    }

    /**
     * Get createdAt
     *
     * @return createdAt
     */
    @javax.annotation.Nonnull
    public String getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(String createdAt) {
        this.createdAt = createdAt;
    }

    public InsertFunctionInstanceAlpha updatedAt(String updatedAt) {

        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Get updatedAt
     *
     * @return updatedAt
     */
    @javax.annotation.Nonnull
    public String getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
    }

    public InsertFunctionInstanceAlpha settings(Map<String, Object> settings) {

        this.settings = settings;
        return this;
    }

    public InsertFunctionInstanceAlpha putSettingsItem(String key, Object settingsItem) {
        if (this.settings == null) {
            this.settings = new HashMap<>();
        }
        this.settings.put(key, settingsItem);
        return this;
    }

    /**
     * Get settings
     *
     * @return settings
     */
    @javax.annotation.Nonnull
    public Map<String, Object> getSettings() {
        return settings;
    }

    public void setSettings(Map<String, Object> settings) {
        this.settings = settings;
    }

    public InsertFunctionInstanceAlpha encryptedSettings(Map<String, Object> encryptedSettings) {

        this.encryptedSettings = encryptedSettings;
        return this;
    }

    public InsertFunctionInstanceAlpha putEncryptedSettingsItem(
            String key, Object encryptedSettingsItem) {
        if (this.encryptedSettings == null) {
            this.encryptedSettings = new HashMap<>();
        }
        this.encryptedSettings.put(key, encryptedSettingsItem);
        return this;
    }

    /**
     * Get encryptedSettings
     *
     * @return encryptedSettings
     */
    @javax.annotation.Nonnull
    public Map<String, Object> getEncryptedSettings() {
        return encryptedSettings;
    }

    public void setEncryptedSettings(Map<String, Object> encryptedSettings) {
        this.encryptedSettings = encryptedSettings;
    }

    public InsertFunctionInstanceAlpha integrationType(Object integrationType) {

        this.integrationType = integrationType;
        return this;
    }

    /**
     * Get integrationType
     *
     * @return integrationType
     */
    @javax.annotation.Nullable
    public Object getIntegrationType() {
        return integrationType;
    }

    public void setIntegrationType(Object integrationType) {
        this.integrationType = integrationType;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InsertFunctionInstanceAlpha insertFunctionInstanceAlpha = (InsertFunctionInstanceAlpha) o;
        return Objects.equals(this.id, insertFunctionInstanceAlpha.id)
                && Objects.equals(this.name, insertFunctionInstanceAlpha.name)
                && Objects.equals(this.integrationId, insertFunctionInstanceAlpha.integrationId)
                && Objects.equals(this.classId, insertFunctionInstanceAlpha.classId)
                && Objects.equals(this.enabled, insertFunctionInstanceAlpha.enabled)
                && Objects.equals(this.createdAt, insertFunctionInstanceAlpha.createdAt)
                && Objects.equals(this.updatedAt, insertFunctionInstanceAlpha.updatedAt)
                && Objects.equals(this.settings, insertFunctionInstanceAlpha.settings)
                && Objects.equals(
                        this.encryptedSettings, insertFunctionInstanceAlpha.encryptedSettings)
                && Objects.equals(
                        this.integrationType, insertFunctionInstanceAlpha.integrationType);
    }

    private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
        return a == b
                || (a != null
                        && b != null
                        && a.isPresent()
                        && b.isPresent()
                        && Objects.deepEquals(a.get(), b.get()));
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                id,
                name,
                integrationId,
                classId,
                enabled,
                createdAt,
                updatedAt,
                settings,
                encryptedSettings,
                integrationType);
    }

    private static <T> int hashCodeNullable(JsonNullable<T> a) {
        if (a == null) {
            return 1;
        }
        return a.isPresent() ? Arrays.deepHashCode(new Object[] {a.get()}) : 31;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class InsertFunctionInstanceAlpha {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    integrationId: ").append(toIndentedString(integrationId)).append("\n");
        sb.append("    classId: ").append(toIndentedString(classId)).append("\n");
        sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
        sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
        sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
        sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
        sb.append("    encryptedSettings: ")
                .append(toIndentedString(encryptedSettings))
                .append("\n");
        sb.append("    integrationType: ").append(toIndentedString(integrationType)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("id");
        openapiFields.add("name");
        openapiFields.add("integrationId");
        openapiFields.add("classId");
        openapiFields.add("enabled");
        openapiFields.add("createdAt");
        openapiFields.add("updatedAt");
        openapiFields.add("settings");
        openapiFields.add("encryptedSettings");
        openapiFields.add("integrationType");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("id");
        openapiRequiredFields.add("integrationId");
        openapiRequiredFields.add("classId");
        openapiRequiredFields.add("enabled");
        openapiRequiredFields.add("createdAt");
        openapiRequiredFields.add("updatedAt");
        openapiRequiredFields.add("settings");
        openapiRequiredFields.add("encryptedSettings");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     InsertFunctionInstanceAlpha
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!InsertFunctionInstanceAlpha.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in InsertFunctionInstanceAlpha is not"
                                        + " found in the empty JSON string",
                                InsertFunctionInstanceAlpha.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!InsertFunctionInstanceAlpha.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `InsertFunctionInstanceAlpha` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : InsertFunctionInstanceAlpha.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("id").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `id` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("id").toString()));
        }
        if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull())
                && !jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `name` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("name").toString()));
        }
        if (!jsonObj.get("integrationId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `integrationId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("integrationId").toString()));
        }
        if (!jsonObj.get("classId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `classId` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("classId").toString()));
        }
        if (!jsonObj.get("createdAt").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `createdAt` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("createdAt").toString()));
        }
        if (!jsonObj.get("updatedAt").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `updatedAt` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("updatedAt").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!InsertFunctionInstanceAlpha.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'InsertFunctionInstanceAlpha' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<InsertFunctionInstanceAlpha> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(InsertFunctionInstanceAlpha.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<InsertFunctionInstanceAlpha>() {
                        @Override
                        public void write(JsonWriter out, InsertFunctionInstanceAlpha value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public InsertFunctionInstanceAlpha read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of InsertFunctionInstanceAlpha given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of InsertFunctionInstanceAlpha
     * @throws IOException if the JSON string is invalid with respect to InsertFunctionInstanceAlpha
     */
    public static InsertFunctionInstanceAlpha fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, InsertFunctionInstanceAlpha.class);
    }

    /**
     * Convert an instance of InsertFunctionInstanceAlpha to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
