/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * Result membership object for an audience preview with &#x60;audienceType: USERS&#x60; or
 * &#x60;audienceType: LINKED&#x60;.
 */
public class AudiencePreviewEntitiesResult {
    public static final String SERIALIZED_NAME_ENTITIES = "entities";

    @SerializedName(SERIALIZED_NAME_ENTITIES)
    private Map<String, List<EntityProfileDetails>> entities;

    public AudiencePreviewEntitiesResult() {}

    public AudiencePreviewEntitiesResult entities(
            Map<String, List<EntityProfileDetails>> entities) {

        this.entities = entities;
        return this;
    }

    public AudiencePreviewEntitiesResult putEntitiesItem(
            String key, List<EntityProfileDetails> entitiesItem) {
        if (this.entities == null) {
            this.entities = new HashMap<>();
        }
        this.entities.put(key, entitiesItem);
        return this;
    }

    /**
     * Get entities
     *
     * @return entities
     */
    @javax.annotation.Nullable
    public Map<String, List<EntityProfileDetails>> getEntities() {
        return entities;
    }

    public void setEntities(Map<String, List<EntityProfileDetails>> entities) {
        this.entities = entities;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AudiencePreviewEntitiesResult audiencePreviewEntitiesResult =
                (AudiencePreviewEntitiesResult) o;
        return Objects.equals(this.entities, audiencePreviewEntitiesResult.entities);
    }

    @Override
    public int hashCode() {
        return Objects.hash(entities);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AudiencePreviewEntitiesResult {\n");
        sb.append("    entities: ").append(toIndentedString(entities)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("entities");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     AudiencePreviewEntitiesResult
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!AudiencePreviewEntitiesResult.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in AudiencePreviewEntitiesResult is not"
                                        + " found in the empty JSON string",
                                AudiencePreviewEntitiesResult.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!AudiencePreviewEntitiesResult.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `AudiencePreviewEntitiesResult` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!AudiencePreviewEntitiesResult.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'AudiencePreviewEntitiesResult' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AudiencePreviewEntitiesResult> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(AudiencePreviewEntitiesResult.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<AudiencePreviewEntitiesResult>() {
                        @Override
                        public void write(JsonWriter out, AudiencePreviewEntitiesResult value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public AudiencePreviewEntitiesResult read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of AudiencePreviewEntitiesResult given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of AudiencePreviewEntitiesResult
     * @throws IOException if the JSON string is invalid with respect to
     *     AudiencePreviewEntitiesResult
     */
    public static AudiencePreviewEntitiesResult fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, AudiencePreviewEntitiesResult.class);
    }

    /**
     * Convert an instance of AudiencePreviewEntitiesResult to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
