/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * The version of the OpenAPI document: 32.0.5
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;


import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** TrackSourceSettingsV1 */
public class TrackSourceSettingsV1 {
    public static final String SERIALIZED_NAME_ALLOW_UNPLANNED_EVENTS = "allowUnplannedEvents";

    @SerializedName(SERIALIZED_NAME_ALLOW_UNPLANNED_EVENTS)
    private Boolean allowUnplannedEvents;

    public static final String SERIALIZED_NAME_ALLOW_UNPLANNED_EVENT_PROPERTIES =
            "allowUnplannedEventProperties";

    @SerializedName(SERIALIZED_NAME_ALLOW_UNPLANNED_EVENT_PROPERTIES)
    private Boolean allowUnplannedEventProperties;

    public static final String SERIALIZED_NAME_ALLOW_EVENT_ON_VIOLATIONS = "allowEventOnViolations";

    @SerializedName(SERIALIZED_NAME_ALLOW_EVENT_ON_VIOLATIONS)
    private Boolean allowEventOnViolations;

    public static final String SERIALIZED_NAME_ALLOW_PROPERTIES_ON_VIOLATIONS =
            "allowPropertiesOnViolations";

    @SerializedName(SERIALIZED_NAME_ALLOW_PROPERTIES_ON_VIOLATIONS)
    private Boolean allowPropertiesOnViolations;

    /**
     * The common track event on violations. Config API note: equal to
     * &#x60;commonTrackEventOnViolations&#x60;.
     */
    @JsonAdapter(CommonEventOnViolationsEnum.Adapter.class)
    public enum CommonEventOnViolationsEnum {
        ALLOW("ALLOW"),

        BLOCK("BLOCK"),

        OMIT_PROPERTIES("OMIT_PROPERTIES");

        private String value;

        CommonEventOnViolationsEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static CommonEventOnViolationsEnum fromValue(String value) {
            for (CommonEventOnViolationsEnum b : CommonEventOnViolationsEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<CommonEventOnViolationsEnum> {
            @Override
            public void write(
                    final JsonWriter jsonWriter, final CommonEventOnViolationsEnum enumeration)
                    throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public CommonEventOnViolationsEnum read(final JsonReader jsonReader)
                    throws IOException {
                String value = jsonReader.nextString();
                return CommonEventOnViolationsEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_COMMON_EVENT_ON_VIOLATIONS =
            "commonEventOnViolations";

    @SerializedName(SERIALIZED_NAME_COMMON_EVENT_ON_VIOLATIONS)
    private CommonEventOnViolationsEnum commonEventOnViolations;

    public TrackSourceSettingsV1() {}

    public TrackSourceSettingsV1 allowUnplannedEvents(Boolean allowUnplannedEvents) {

        this.allowUnplannedEvents = allowUnplannedEvents;
        return this;
    }

    /**
     * Enable to allow unplanned track events. Config API note: equal to
     * &#x60;allowUnplannedTrackEvents&#x60;.
     *
     * @return allowUnplannedEvents
     */
    @javax.annotation.Nullable
    @ApiModelProperty(
            value =
                    "Enable to allow unplanned track events.  Config API note: equal to"
                            + " `allowUnplannedTrackEvents`.")
    public Boolean getAllowUnplannedEvents() {
        return allowUnplannedEvents;
    }

    public void setAllowUnplannedEvents(Boolean allowUnplannedEvents) {
        this.allowUnplannedEvents = allowUnplannedEvents;
    }

    public TrackSourceSettingsV1 allowUnplannedEventProperties(
            Boolean allowUnplannedEventProperties) {

        this.allowUnplannedEventProperties = allowUnplannedEventProperties;
        return this;
    }

    /**
     * Enable to allow unplanned track event properties. Config API note: equal to
     * &#x60;allowUnplannedTrackEventProperties&#x60;.
     *
     * @return allowUnplannedEventProperties
     */
    @javax.annotation.Nullable
    @ApiModelProperty(
            value =
                    "Enable to allow unplanned track event properties.  Config API note: equal to"
                            + " `allowUnplannedTrackEventProperties`.")
    public Boolean getAllowUnplannedEventProperties() {
        return allowUnplannedEventProperties;
    }

    public void setAllowUnplannedEventProperties(Boolean allowUnplannedEventProperties) {
        this.allowUnplannedEventProperties = allowUnplannedEventProperties;
    }

    public TrackSourceSettingsV1 allowEventOnViolations(Boolean allowEventOnViolations) {

        this.allowEventOnViolations = allowEventOnViolations;
        return this;
    }

    /**
     * Allow track event on violations. Config API note: equal to
     * &#x60;allowTrackEventOnViolations&#x60;.
     *
     * @return allowEventOnViolations
     */
    @javax.annotation.Nullable
    @ApiModelProperty(
            value =
                    "Allow track event on violations.  Config API note: equal to"
                            + " `allowTrackEventOnViolations`.")
    public Boolean getAllowEventOnViolations() {
        return allowEventOnViolations;
    }

    public void setAllowEventOnViolations(Boolean allowEventOnViolations) {
        this.allowEventOnViolations = allowEventOnViolations;
    }

    public TrackSourceSettingsV1 allowPropertiesOnViolations(Boolean allowPropertiesOnViolations) {

        this.allowPropertiesOnViolations = allowPropertiesOnViolations;
        return this;
    }

    /**
     * Enable to allow track properties on violations. Config API note: equal to
     * &#x60;allowTrackEventPropertiesOnViolations&#x60;.
     *
     * @return allowPropertiesOnViolations
     */
    @javax.annotation.Nullable
    @ApiModelProperty(
            value =
                    "Enable to allow track properties on violations.  Config API note: equal to"
                            + " `allowTrackEventPropertiesOnViolations`.")
    public Boolean getAllowPropertiesOnViolations() {
        return allowPropertiesOnViolations;
    }

    public void setAllowPropertiesOnViolations(Boolean allowPropertiesOnViolations) {
        this.allowPropertiesOnViolations = allowPropertiesOnViolations;
    }

    public TrackSourceSettingsV1 commonEventOnViolations(
            CommonEventOnViolationsEnum commonEventOnViolations) {

        this.commonEventOnViolations = commonEventOnViolations;
        return this;
    }

    /**
     * The common track event on violations. Config API note: equal to
     * &#x60;commonTrackEventOnViolations&#x60;.
     *
     * @return commonEventOnViolations
     */
    @javax.annotation.Nullable
    @ApiModelProperty(
            value =
                    "The common track event on violations.  Config API note: equal to"
                            + " `commonTrackEventOnViolations`.")
    public CommonEventOnViolationsEnum getCommonEventOnViolations() {
        return commonEventOnViolations;
    }

    public void setCommonEventOnViolations(CommonEventOnViolationsEnum commonEventOnViolations) {
        this.commonEventOnViolations = commonEventOnViolations;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TrackSourceSettingsV1 trackSourceSettingsV1 = (TrackSourceSettingsV1) o;
        return Objects.equals(this.allowUnplannedEvents, trackSourceSettingsV1.allowUnplannedEvents)
                && Objects.equals(
                        this.allowUnplannedEventProperties,
                        trackSourceSettingsV1.allowUnplannedEventProperties)
                && Objects.equals(
                        this.allowEventOnViolations, trackSourceSettingsV1.allowEventOnViolations)
                && Objects.equals(
                        this.allowPropertiesOnViolations,
                        trackSourceSettingsV1.allowPropertiesOnViolations)
                && Objects.equals(
                        this.commonEventOnViolations,
                        trackSourceSettingsV1.commonEventOnViolations);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                allowUnplannedEvents,
                allowUnplannedEventProperties,
                allowEventOnViolations,
                allowPropertiesOnViolations,
                commonEventOnViolations);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TrackSourceSettingsV1 {\n");
        sb.append("    allowUnplannedEvents: ")
                .append(toIndentedString(allowUnplannedEvents))
                .append("\n");
        sb.append("    allowUnplannedEventProperties: ")
                .append(toIndentedString(allowUnplannedEventProperties))
                .append("\n");
        sb.append("    allowEventOnViolations: ")
                .append(toIndentedString(allowEventOnViolations))
                .append("\n");
        sb.append("    allowPropertiesOnViolations: ")
                .append(toIndentedString(allowPropertiesOnViolations))
                .append("\n");
        sb.append("    commonEventOnViolations: ")
                .append(toIndentedString(commonEventOnViolations))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("allowUnplannedEvents");
        openapiFields.add("allowUnplannedEventProperties");
        openapiFields.add("allowEventOnViolations");
        openapiFields.add("allowPropertiesOnViolations");
        openapiFields.add("commonEventOnViolations");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to TrackSourceSettingsV1
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!TrackSourceSettingsV1.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in TrackSourceSettingsV1 is not found in"
                                        + " the empty JSON string",
                                TrackSourceSettingsV1.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!TrackSourceSettingsV1.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `TrackSourceSettingsV1` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }
        if ((jsonObj.get("commonEventOnViolations") != null
                        && !jsonObj.get("commonEventOnViolations").isJsonNull())
                && !jsonObj.get("commonEventOnViolations").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `commonEventOnViolations` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("commonEventOnViolations").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!TrackSourceSettingsV1.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'TrackSourceSettingsV1' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<TrackSourceSettingsV1> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(TrackSourceSettingsV1.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<TrackSourceSettingsV1>() {
                        @Override
                        public void write(JsonWriter out, TrackSourceSettingsV1 value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public TrackSourceSettingsV1 read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of TrackSourceSettingsV1 given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of TrackSourceSettingsV1
     * @throws IOException if the JSON string is invalid with respect to TrackSourceSettingsV1
     */
    public static TrackSourceSettingsV1 fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, TrackSourceSettingsV1.class);
    }

    /**
     * Convert an instance of TrackSourceSettingsV1 to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
