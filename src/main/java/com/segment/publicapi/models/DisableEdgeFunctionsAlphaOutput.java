/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 32.0.2
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.segment.publicapi.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.models.EdgeFunctions1;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.segment.publicapi.JSON;

/**
 * Output for DisableEdgeFunctions.
 */
@ApiModel(description = "Output for DisableEdgeFunctions.")

public class DisableEdgeFunctionsAlphaOutput {
  public static final String SERIALIZED_NAME_EDGE_FUNCTIONS = "edgeFunctions";
  @SerializedName(SERIALIZED_NAME_EDGE_FUNCTIONS)
  private EdgeFunctions1 edgeFunctions;

  public DisableEdgeFunctionsAlphaOutput() {
  }

  public DisableEdgeFunctionsAlphaOutput edgeFunctions(EdgeFunctions1 edgeFunctions) {
    
    this.edgeFunctions = edgeFunctions;
    return this;
  }

   /**
   * Get edgeFunctions
   * @return edgeFunctions
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EdgeFunctions1 getEdgeFunctions() {
    return edgeFunctions;
  }


  public void setEdgeFunctions(EdgeFunctions1 edgeFunctions) {
    this.edgeFunctions = edgeFunctions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DisableEdgeFunctionsAlphaOutput disableEdgeFunctionsAlphaOutput = (DisableEdgeFunctionsAlphaOutput) o;
    return Objects.equals(this.edgeFunctions, disableEdgeFunctionsAlphaOutput.edgeFunctions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(edgeFunctions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DisableEdgeFunctionsAlphaOutput {\n");
    sb.append("    edgeFunctions: ").append(toIndentedString(edgeFunctions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("edgeFunctions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("edgeFunctions");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DisableEdgeFunctionsAlphaOutput
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DisableEdgeFunctionsAlphaOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DisableEdgeFunctionsAlphaOutput is not found in the empty JSON string", DisableEdgeFunctionsAlphaOutput.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DisableEdgeFunctionsAlphaOutput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DisableEdgeFunctionsAlphaOutput` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DisableEdgeFunctionsAlphaOutput.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DisableEdgeFunctionsAlphaOutput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DisableEdgeFunctionsAlphaOutput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DisableEdgeFunctionsAlphaOutput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DisableEdgeFunctionsAlphaOutput.class));

       return (TypeAdapter<T>) new TypeAdapter<DisableEdgeFunctionsAlphaOutput>() {
           @Override
           public void write(JsonWriter out, DisableEdgeFunctionsAlphaOutput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DisableEdgeFunctionsAlphaOutput read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DisableEdgeFunctionsAlphaOutput given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DisableEdgeFunctionsAlphaOutput
  * @throws IOException if the JSON string is invalid with respect to DisableEdgeFunctionsAlphaOutput
  */
  public static DisableEdgeFunctionsAlphaOutput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DisableEdgeFunctionsAlphaOutput.class);
  }

 /**
  * Convert an instance of DisableEdgeFunctionsAlphaOutput to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

