/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * CancelReverseETLSyncForModelOutput either will return an error or a \&quot;CANCELLING\&quot;
 * status.
 */
public class CancelReverseETLSyncForModelOutput {
    public static final String SERIALIZED_NAME_ERROR_CODE = "errorCode";

    @SerializedName(SERIALIZED_NAME_ERROR_CODE)
    private String errorCode;

    public static final String SERIALIZED_NAME_ERROR_MESSAGE = "errorMessage";

    @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
    private String errorMessage;

    public static final String SERIALIZED_NAME_STATUS = "status";

    @SerializedName(SERIALIZED_NAME_STATUS)
    private String status;

    public CancelReverseETLSyncForModelOutput() {}

    public CancelReverseETLSyncForModelOutput errorCode(String errorCode) {

        this.errorCode = errorCode;
        return this;
    }

    /**
     * A place holder for a machine-friendly category for an error, if applicable. -
     * \&quot;SyncAlreadyCanceled\&quot; - \&quot;SyncFinishedCannotCancel\&quot;
     *
     * @return errorCode
     */
    @javax.annotation.Nullable
    public String getErrorCode() {
        return errorCode;
    }

    public void setErrorCode(String errorCode) {
        this.errorCode = errorCode;
    }

    public CancelReverseETLSyncForModelOutput errorMessage(String errorMessage) {

        this.errorMessage = errorMessage;
        return this;
    }

    /**
     * A place holder for a human-readable description of the error, if applicable. - \&quot;sync
     * already canceled\&quot; - \&quot;sync already finished\&quot;.
     *
     * @return errorMessage
     */
    @javax.annotation.Nullable
    public String getErrorMessage() {
        return errorMessage;
    }

    public void setErrorMessage(String errorMessage) {
        this.errorMessage = errorMessage;
    }

    public CancelReverseETLSyncForModelOutput status(String status) {

        this.status = status;
        return this;
    }

    /**
     * If no error, status will be CANCELLING, as the extract/load might take some time to cancel.
     *
     * @return status
     */
    @javax.annotation.Nullable
    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CancelReverseETLSyncForModelOutput cancelReverseETLSyncForModelOutput =
                (CancelReverseETLSyncForModelOutput) o;
        return Objects.equals(this.errorCode, cancelReverseETLSyncForModelOutput.errorCode)
                && Objects.equals(
                        this.errorMessage, cancelReverseETLSyncForModelOutput.errorMessage)
                && Objects.equals(this.status, cancelReverseETLSyncForModelOutput.status);
    }

    @Override
    public int hashCode() {
        return Objects.hash(errorCode, errorMessage, status);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CancelReverseETLSyncForModelOutput {\n");
        sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
        sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("errorCode");
        openapiFields.add("errorMessage");
        openapiFields.add("status");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     CancelReverseETLSyncForModelOutput
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!CancelReverseETLSyncForModelOutput.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in CancelReverseETLSyncForModelOutput is"
                                        + " not found in the empty JSON string",
                                CancelReverseETLSyncForModelOutput.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!CancelReverseETLSyncForModelOutput.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `CancelReverseETLSyncForModelOutput` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("errorCode") != null && !jsonObj.get("errorCode").isJsonNull())
                && !jsonObj.get("errorCode").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `errorCode` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("errorCode").toString()));
        }
        if ((jsonObj.get("errorMessage") != null && !jsonObj.get("errorMessage").isJsonNull())
                && !jsonObj.get("errorMessage").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `errorMessage` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("errorMessage").toString()));
        }
        if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull())
                && !jsonObj.get("status").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `status` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("status").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CancelReverseETLSyncForModelOutput.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CancelReverseETLSyncForModelOutput' and
                // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CancelReverseETLSyncForModelOutput> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(CancelReverseETLSyncForModelOutput.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<CancelReverseETLSyncForModelOutput>() {
                        @Override
                        public void write(JsonWriter out, CancelReverseETLSyncForModelOutput value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public CancelReverseETLSyncForModelOutput read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of CancelReverseETLSyncForModelOutput given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CancelReverseETLSyncForModelOutput
     * @throws IOException if the JSON string is invalid with respect to
     *     CancelReverseETLSyncForModelOutput
     */
    public static CancelReverseETLSyncForModelOutput fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, CancelReverseETLSyncForModelOutput.class);
    }

    /**
     * Convert an instance of CancelReverseETLSyncForModelOutput to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
