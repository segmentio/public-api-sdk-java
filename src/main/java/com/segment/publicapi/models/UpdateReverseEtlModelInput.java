/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** Defines how to update an existing Model. */
public class UpdateReverseEtlModelInput {
    public static final String SERIALIZED_NAME_NAME = "name";

    @SerializedName(SERIALIZED_NAME_NAME)
    private String name;

    public static final String SERIALIZED_NAME_DESCRIPTION = "description";

    @SerializedName(SERIALIZED_NAME_DESCRIPTION)
    private String description;

    public static final String SERIALIZED_NAME_ENABLED = "enabled";

    @SerializedName(SERIALIZED_NAME_ENABLED)
    private Boolean enabled;

    public static final String SERIALIZED_NAME_QUERY = "query";

    @SerializedName(SERIALIZED_NAME_QUERY)
    private String query;

    public static final String SERIALIZED_NAME_QUERY_IDENTIFIER_COLUMN = "queryIdentifierColumn";

    @SerializedName(SERIALIZED_NAME_QUERY_IDENTIFIER_COLUMN)
    private String queryIdentifierColumn;

    public UpdateReverseEtlModelInput() {}

    public UpdateReverseEtlModelInput name(String name) {

        this.name = name;
        return this;
    }

    /**
     * A short, human-readable description of the Model.
     *
     * @return name
     */
    @javax.annotation.Nullable
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public UpdateReverseEtlModelInput description(String description) {

        this.description = description;
        return this;
    }

    /**
     * A longer, more descriptive explanation of the Model.
     *
     * @return description
     */
    @javax.annotation.Nullable
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public UpdateReverseEtlModelInput enabled(Boolean enabled) {

        this.enabled = enabled;
        return this;
    }

    /**
     * Indicates whether the Model should have syncs enabled. When disabled, no syncs will be
     * triggered, regardless of the enabled status of the attached destinations/subscriptions.
     *
     * @return enabled
     */
    @javax.annotation.Nullable
    public Boolean getEnabled() {
        return enabled;
    }

    public void setEnabled(Boolean enabled) {
        this.enabled = enabled;
    }

    public UpdateReverseEtlModelInput query(String query) {

        this.query = query;
        return this;
    }

    /**
     * The SQL query that will be executed to extract data from the connected Source.
     *
     * @return query
     */
    @javax.annotation.Nullable
    public String getQuery() {
        return query;
    }

    public void setQuery(String query) {
        this.query = query;
    }

    public UpdateReverseEtlModelInput queryIdentifierColumn(String queryIdentifierColumn) {

        this.queryIdentifierColumn = queryIdentifierColumn;
        return this;
    }

    /**
     * Indicates the column named in &#x60;query&#x60; that should be used to uniquely identify the
     * extracted records.
     *
     * @return queryIdentifierColumn
     */
    @javax.annotation.Nullable
    public String getQueryIdentifierColumn() {
        return queryIdentifierColumn;
    }

    public void setQueryIdentifierColumn(String queryIdentifierColumn) {
        this.queryIdentifierColumn = queryIdentifierColumn;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateReverseEtlModelInput updateReverseEtlModelInput = (UpdateReverseEtlModelInput) o;
        return Objects.equals(this.name, updateReverseEtlModelInput.name)
                && Objects.equals(this.description, updateReverseEtlModelInput.description)
                && Objects.equals(this.enabled, updateReverseEtlModelInput.enabled)
                && Objects.equals(this.query, updateReverseEtlModelInput.query)
                && Objects.equals(
                        this.queryIdentifierColumn,
                        updateReverseEtlModelInput.queryIdentifierColumn);
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, description, enabled, query, queryIdentifierColumn);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class UpdateReverseEtlModelInput {\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
        sb.append("    query: ").append(toIndentedString(query)).append("\n");
        sb.append("    queryIdentifierColumn: ")
                .append(toIndentedString(queryIdentifierColumn))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("name");
        openapiFields.add("description");
        openapiFields.add("enabled");
        openapiFields.add("query");
        openapiFields.add("queryIdentifierColumn");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to UpdateReverseEtlModelInput
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!UpdateReverseEtlModelInput.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in UpdateReverseEtlModelInput is not"
                                        + " found in the empty JSON string",
                                UpdateReverseEtlModelInput.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!UpdateReverseEtlModelInput.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `UpdateReverseEtlModelInput` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull())
                && !jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `name` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("name").toString()));
        }
        if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull())
                && !jsonObj.get("description").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `description` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("description").toString()));
        }
        if ((jsonObj.get("query") != null && !jsonObj.get("query").isJsonNull())
                && !jsonObj.get("query").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `query` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("query").toString()));
        }
        if ((jsonObj.get("queryIdentifierColumn") != null
                        && !jsonObj.get("queryIdentifierColumn").isJsonNull())
                && !jsonObj.get("queryIdentifierColumn").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `queryIdentifierColumn` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("queryIdentifierColumn").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!UpdateReverseEtlModelInput.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'UpdateReverseEtlModelInput' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<UpdateReverseEtlModelInput> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(UpdateReverseEtlModelInput.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<UpdateReverseEtlModelInput>() {
                        @Override
                        public void write(JsonWriter out, UpdateReverseEtlModelInput value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public UpdateReverseEtlModelInput read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of UpdateReverseEtlModelInput given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of UpdateReverseEtlModelInput
     * @throws IOException if the JSON string is invalid with respect to UpdateReverseEtlModelInput
     */
    public static UpdateReverseEtlModelInput fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, UpdateReverseEtlModelInput.class);
    }

    /**
     * Convert an instance of UpdateReverseEtlModelInput to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
