/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** Defines how to create a new Model. */
public class CreateReverseEtlModelInput {
    public static final String SERIALIZED_NAME_SOURCE_ID = "sourceId";

    @SerializedName(SERIALIZED_NAME_SOURCE_ID)
    private String sourceId;

    public static final String SERIALIZED_NAME_NAME = "name";

    @SerializedName(SERIALIZED_NAME_NAME)
    private String name;

    public static final String SERIALIZED_NAME_DESCRIPTION = "description";

    @SerializedName(SERIALIZED_NAME_DESCRIPTION)
    private String description;

    public static final String SERIALIZED_NAME_ENABLED = "enabled";

    @SerializedName(SERIALIZED_NAME_ENABLED)
    private Boolean enabled;

    /**
     * Determines the strategy used for triggering syncs, which will be used in conjunction with
     * scheduleConfig.
     */
    @JsonAdapter(ScheduleStrategyEnum.Adapter.class)
    public enum ScheduleStrategyEnum {
        MANUAL("MANUAL"),

        PERIODIC("PERIODIC"),

        SPECIFIC_DAYS("SPECIFIC_DAYS");

        private String value;

        ScheduleStrategyEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static ScheduleStrategyEnum fromValue(String value) {
            for (ScheduleStrategyEnum b : ScheduleStrategyEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<ScheduleStrategyEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final ScheduleStrategyEnum enumeration)
                    throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public ScheduleStrategyEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return ScheduleStrategyEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_SCHEDULE_STRATEGY = "scheduleStrategy";

    @SerializedName(SERIALIZED_NAME_SCHEDULE_STRATEGY)
    private ScheduleStrategyEnum scheduleStrategy;

    public static final String SERIALIZED_NAME_SCHEDULE_CONFIG = "scheduleConfig";

    @SerializedName(SERIALIZED_NAME_SCHEDULE_CONFIG)
    private Map<String, Object> scheduleConfig;

    public static final String SERIALIZED_NAME_QUERY = "query";

    @SerializedName(SERIALIZED_NAME_QUERY)
    private String query;

    public static final String SERIALIZED_NAME_QUERY_IDENTIFIER_COLUMN = "queryIdentifierColumn";

    @SerializedName(SERIALIZED_NAME_QUERY_IDENTIFIER_COLUMN)
    private String queryIdentifierColumn;

    public CreateReverseEtlModelInput() {}

    public CreateReverseEtlModelInput sourceId(String sourceId) {

        this.sourceId = sourceId;
        return this;
    }

    /**
     * Indicates which Source to attach this model to.
     *
     * @return sourceId
     */
    @javax.annotation.Nonnull
    public String getSourceId() {
        return sourceId;
    }

    public void setSourceId(String sourceId) {
        this.sourceId = sourceId;
    }

    public CreateReverseEtlModelInput name(String name) {

        this.name = name;
        return this;
    }

    /**
     * A short, human-readable description of the Model.
     *
     * @return name
     */
    @javax.annotation.Nonnull
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public CreateReverseEtlModelInput description(String description) {

        this.description = description;
        return this;
    }

    /**
     * A longer, more descriptive explanation of the Model.
     *
     * @return description
     */
    @javax.annotation.Nonnull
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public CreateReverseEtlModelInput enabled(Boolean enabled) {

        this.enabled = enabled;
        return this;
    }

    /**
     * Indicates whether the Model should have syncs enabled. When disabled, no syncs will be
     * triggered, regardless of the enabled status of the attached destinations/subscriptions.
     *
     * @return enabled
     */
    @javax.annotation.Nonnull
    public Boolean getEnabled() {
        return enabled;
    }

    public void setEnabled(Boolean enabled) {
        this.enabled = enabled;
    }

    public CreateReverseEtlModelInput scheduleStrategy(ScheduleStrategyEnum scheduleStrategy) {

        this.scheduleStrategy = scheduleStrategy;
        return this;
    }

    /**
     * Determines the strategy used for triggering syncs, which will be used in conjunction with
     * scheduleConfig.
     *
     * @return scheduleStrategy
     */
    @javax.annotation.Nonnull
    public ScheduleStrategyEnum getScheduleStrategy() {
        return scheduleStrategy;
    }

    public void setScheduleStrategy(ScheduleStrategyEnum scheduleStrategy) {
        this.scheduleStrategy = scheduleStrategy;
    }

    public CreateReverseEtlModelInput scheduleConfig(Map<String, Object> scheduleConfig) {

        this.scheduleConfig = scheduleConfig;
        return this;
    }

    public CreateReverseEtlModelInput putScheduleConfigItem(String key, Object scheduleConfigItem) {
        if (this.scheduleConfig == null) {
            this.scheduleConfig = new HashMap<>();
        }
        this.scheduleConfig.put(key, scheduleConfigItem);
        return this;
    }

    /**
     * Defines a configuration object used for scheduling, which can vary depending on the
     * configured strategy, but must always be an object with at least 1 level of keys.
     *
     * @return scheduleConfig
     */
    @javax.annotation.Nonnull
    public Map<String, Object> getScheduleConfig() {
        return scheduleConfig;
    }

    public void setScheduleConfig(Map<String, Object> scheduleConfig) {
        this.scheduleConfig = scheduleConfig;
    }

    public CreateReverseEtlModelInput query(String query) {

        this.query = query;
        return this;
    }

    /**
     * The SQL query that will be executed to extract data from the connected Source.
     *
     * @return query
     */
    @javax.annotation.Nonnull
    public String getQuery() {
        return query;
    }

    public void setQuery(String query) {
        this.query = query;
    }

    public CreateReverseEtlModelInput queryIdentifierColumn(String queryIdentifierColumn) {

        this.queryIdentifierColumn = queryIdentifierColumn;
        return this;
    }

    /**
     * Indicates the column named in &#x60;query&#x60; that should be used to uniquely identify the
     * extracted records.
     *
     * @return queryIdentifierColumn
     */
    @javax.annotation.Nonnull
    public String getQueryIdentifierColumn() {
        return queryIdentifierColumn;
    }

    public void setQueryIdentifierColumn(String queryIdentifierColumn) {
        this.queryIdentifierColumn = queryIdentifierColumn;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateReverseEtlModelInput createReverseEtlModelInput = (CreateReverseEtlModelInput) o;
        return Objects.equals(this.sourceId, createReverseEtlModelInput.sourceId)
                && Objects.equals(this.name, createReverseEtlModelInput.name)
                && Objects.equals(this.description, createReverseEtlModelInput.description)
                && Objects.equals(this.enabled, createReverseEtlModelInput.enabled)
                && Objects.equals(
                        this.scheduleStrategy, createReverseEtlModelInput.scheduleStrategy)
                && Objects.equals(this.scheduleConfig, createReverseEtlModelInput.scheduleConfig)
                && Objects.equals(this.query, createReverseEtlModelInput.query)
                && Objects.equals(
                        this.queryIdentifierColumn,
                        createReverseEtlModelInput.queryIdentifierColumn);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                sourceId,
                name,
                description,
                enabled,
                scheduleStrategy,
                scheduleConfig,
                query,
                queryIdentifierColumn);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CreateReverseEtlModelInput {\n");
        sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
        sb.append("    scheduleStrategy: ").append(toIndentedString(scheduleStrategy)).append("\n");
        sb.append("    scheduleConfig: ").append(toIndentedString(scheduleConfig)).append("\n");
        sb.append("    query: ").append(toIndentedString(query)).append("\n");
        sb.append("    queryIdentifierColumn: ")
                .append(toIndentedString(queryIdentifierColumn))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("sourceId");
        openapiFields.add("name");
        openapiFields.add("description");
        openapiFields.add("enabled");
        openapiFields.add("scheduleStrategy");
        openapiFields.add("scheduleConfig");
        openapiFields.add("query");
        openapiFields.add("queryIdentifierColumn");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("sourceId");
        openapiRequiredFields.add("name");
        openapiRequiredFields.add("description");
        openapiRequiredFields.add("enabled");
        openapiRequiredFields.add("scheduleStrategy");
        openapiRequiredFields.add("scheduleConfig");
        openapiRequiredFields.add("query");
        openapiRequiredFields.add("queryIdentifierColumn");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to CreateReverseEtlModelInput
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!CreateReverseEtlModelInput.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in CreateReverseEtlModelInput is not"
                                        + " found in the empty JSON string",
                                CreateReverseEtlModelInput.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!CreateReverseEtlModelInput.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `CreateReverseEtlModelInput` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : CreateReverseEtlModelInput.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("sourceId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `sourceId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("sourceId").toString()));
        }
        if (!jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `name` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("name").toString()));
        }
        if (!jsonObj.get("description").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `description` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("description").toString()));
        }
        if (!jsonObj.get("scheduleStrategy").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `scheduleStrategy` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("scheduleStrategy").toString()));
        }
        if (!jsonObj.get("query").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `query` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("query").toString()));
        }
        if (!jsonObj.get("queryIdentifierColumn").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `queryIdentifierColumn` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("queryIdentifierColumn").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CreateReverseEtlModelInput.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CreateReverseEtlModelInput' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CreateReverseEtlModelInput> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(CreateReverseEtlModelInput.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<CreateReverseEtlModelInput>() {
                        @Override
                        public void write(JsonWriter out, CreateReverseEtlModelInput value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public CreateReverseEtlModelInput read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of CreateReverseEtlModelInput given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CreateReverseEtlModelInput
     * @throws IOException if the JSON string is invalid with respect to CreateReverseEtlModelInput
     */
    public static CreateReverseEtlModelInput fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CreateReverseEtlModelInput.class);
    }

    /**
     * Convert an instance of CreateReverseEtlModelInput to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
