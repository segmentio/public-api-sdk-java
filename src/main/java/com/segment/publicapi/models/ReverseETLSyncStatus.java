/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** Defines the result of getting the sync status of a RETL connection. */
public class ReverseETLSyncStatus {
    public static final String SERIALIZED_NAME_SYNC_ID = "syncId";

    @SerializedName(SERIALIZED_NAME_SYNC_ID)
    private String syncId;

    public static final String SERIALIZED_NAME_MODEL_ID = "modelId";

    @SerializedName(SERIALIZED_NAME_MODEL_ID)
    private String modelId;

    public static final String SERIALIZED_NAME_SOURCE_ID = "sourceId";

    @SerializedName(SERIALIZED_NAME_SOURCE_ID)
    private String sourceId;

    public static final String SERIALIZED_NAME_SYNC_STATUS = "syncStatus";

    @SerializedName(SERIALIZED_NAME_SYNC_STATUS)
    private String syncStatus;

    public static final String SERIALIZED_NAME_DURATION = "duration";

    @SerializedName(SERIALIZED_NAME_DURATION)
    private String duration;

    public static final String SERIALIZED_NAME_STARTED_AT = "startedAt";

    @SerializedName(SERIALIZED_NAME_STARTED_AT)
    private String startedAt;

    public static final String SERIALIZED_NAME_FINISHED_AT = "finishedAt";

    @SerializedName(SERIALIZED_NAME_FINISHED_AT)
    private String finishedAt;

    public static final String SERIALIZED_NAME_EXTRACT_PHASE = "extractPhase";

    @SerializedName(SERIALIZED_NAME_EXTRACT_PHASE)
    private SyncExtractPhase extractPhase;

    public static final String SERIALIZED_NAME_LOAD_PHASE = "loadPhase";

    @SerializedName(SERIALIZED_NAME_LOAD_PHASE)
    private SyncLoadPhase loadPhase;

    public static final String SERIALIZED_NAME_ERROR = "error";

    @SerializedName(SERIALIZED_NAME_ERROR)
    private String error;

    public static final String SERIALIZED_NAME_ERROR_CODE = "errorCode";

    @SerializedName(SERIALIZED_NAME_ERROR_CODE)
    private String errorCode;

    public ReverseETLSyncStatus() {}

    public ReverseETLSyncStatus syncId(String syncId) {

        this.syncId = syncId;
        return this;
    }

    /**
     * The id of the sync.
     *
     * @return syncId
     */
    @javax.annotation.Nonnull
    public String getSyncId() {
        return syncId;
    }

    public void setSyncId(String syncId) {
        this.syncId = syncId;
    }

    public ReverseETLSyncStatus modelId(String modelId) {

        this.modelId = modelId;
        return this;
    }

    /**
     * The Model id of the sync.
     *
     * @return modelId
     */
    @javax.annotation.Nonnull
    public String getModelId() {
        return modelId;
    }

    public void setModelId(String modelId) {
        this.modelId = modelId;
    }

    public ReverseETLSyncStatus sourceId(String sourceId) {

        this.sourceId = sourceId;
        return this;
    }

    /**
     * The Source id of the sync.
     *
     * @return sourceId
     */
    @javax.annotation.Nonnull
    public String getSourceId() {
        return sourceId;
    }

    public void setSourceId(String sourceId) {
        this.sourceId = sourceId;
    }

    public ReverseETLSyncStatus syncStatus(String syncStatus) {

        this.syncStatus = syncStatus;
        return this;
    }

    /**
     * The status of the sync. It currently can be IN_PROGRESS, FAIL, SUCCESS, PARTIAL_SUCCESS.
     *
     * @return syncStatus
     */
    @javax.annotation.Nonnull
    public String getSyncStatus() {
        return syncStatus;
    }

    public void setSyncStatus(String syncStatus) {
        this.syncStatus = syncStatus;
    }

    public ReverseETLSyncStatus duration(String duration) {

        this.duration = duration;
        return this;
    }

    /**
     * The duration of the sync.
     *
     * @return duration
     */
    @javax.annotation.Nonnull
    public String getDuration() {
        return duration;
    }

    public void setDuration(String duration) {
        this.duration = duration;
    }

    public ReverseETLSyncStatus startedAt(String startedAt) {

        this.startedAt = startedAt;
        return this;
    }

    /**
     * When the sync started.
     *
     * @return startedAt
     */
    @javax.annotation.Nonnull
    public String getStartedAt() {
        return startedAt;
    }

    public void setStartedAt(String startedAt) {
        this.startedAt = startedAt;
    }

    public ReverseETLSyncStatus finishedAt(String finishedAt) {

        this.finishedAt = finishedAt;
        return this;
    }

    /**
     * When the sync started.
     *
     * @return finishedAt
     */
    @javax.annotation.Nullable
    public String getFinishedAt() {
        return finishedAt;
    }

    public void setFinishedAt(String finishedAt) {
        this.finishedAt = finishedAt;
    }

    public ReverseETLSyncStatus extractPhase(SyncExtractPhase extractPhase) {

        this.extractPhase = extractPhase;
        return this;
    }

    /**
     * Get extractPhase
     *
     * @return extractPhase
     */
    @javax.annotation.Nullable
    public SyncExtractPhase getExtractPhase() {
        return extractPhase;
    }

    public void setExtractPhase(SyncExtractPhase extractPhase) {
        this.extractPhase = extractPhase;
    }

    public ReverseETLSyncStatus loadPhase(SyncLoadPhase loadPhase) {

        this.loadPhase = loadPhase;
        return this;
    }

    /**
     * Get loadPhase
     *
     * @return loadPhase
     */
    @javax.annotation.Nullable
    public SyncLoadPhase getLoadPhase() {
        return loadPhase;
    }

    public void setLoadPhase(SyncLoadPhase loadPhase) {
        this.loadPhase = loadPhase;
    }

    public ReverseETLSyncStatus error(String error) {

        this.error = error;
        return this;
    }

    /**
     * Error message if applicable.
     *
     * @return error
     */
    @javax.annotation.Nullable
    public String getError() {
        return error;
    }

    public void setError(String error) {
        this.error = error;
    }

    public ReverseETLSyncStatus errorCode(String errorCode) {

        this.errorCode = errorCode;
        return this;
    }

    /**
     * Error code indicates a fatal sync error code, if applicable.
     *
     * @return errorCode
     */
    @javax.annotation.Nullable
    public String getErrorCode() {
        return errorCode;
    }

    public void setErrorCode(String errorCode) {
        this.errorCode = errorCode;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ReverseETLSyncStatus reverseETLSyncStatus = (ReverseETLSyncStatus) o;
        return Objects.equals(this.syncId, reverseETLSyncStatus.syncId)
                && Objects.equals(this.modelId, reverseETLSyncStatus.modelId)
                && Objects.equals(this.sourceId, reverseETLSyncStatus.sourceId)
                && Objects.equals(this.syncStatus, reverseETLSyncStatus.syncStatus)
                && Objects.equals(this.duration, reverseETLSyncStatus.duration)
                && Objects.equals(this.startedAt, reverseETLSyncStatus.startedAt)
                && Objects.equals(this.finishedAt, reverseETLSyncStatus.finishedAt)
                && Objects.equals(this.extractPhase, reverseETLSyncStatus.extractPhase)
                && Objects.equals(this.loadPhase, reverseETLSyncStatus.loadPhase)
                && Objects.equals(this.error, reverseETLSyncStatus.error)
                && Objects.equals(this.errorCode, reverseETLSyncStatus.errorCode);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                syncId,
                modelId,
                sourceId,
                syncStatus,
                duration,
                startedAt,
                finishedAt,
                extractPhase,
                loadPhase,
                error,
                errorCode);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ReverseETLSyncStatus {\n");
        sb.append("    syncId: ").append(toIndentedString(syncId)).append("\n");
        sb.append("    modelId: ").append(toIndentedString(modelId)).append("\n");
        sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
        sb.append("    syncStatus: ").append(toIndentedString(syncStatus)).append("\n");
        sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
        sb.append("    startedAt: ").append(toIndentedString(startedAt)).append("\n");
        sb.append("    finishedAt: ").append(toIndentedString(finishedAt)).append("\n");
        sb.append("    extractPhase: ").append(toIndentedString(extractPhase)).append("\n");
        sb.append("    loadPhase: ").append(toIndentedString(loadPhase)).append("\n");
        sb.append("    error: ").append(toIndentedString(error)).append("\n");
        sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("syncId");
        openapiFields.add("modelId");
        openapiFields.add("sourceId");
        openapiFields.add("syncStatus");
        openapiFields.add("duration");
        openapiFields.add("startedAt");
        openapiFields.add("finishedAt");
        openapiFields.add("extractPhase");
        openapiFields.add("loadPhase");
        openapiFields.add("error");
        openapiFields.add("errorCode");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("syncId");
        openapiRequiredFields.add("modelId");
        openapiRequiredFields.add("sourceId");
        openapiRequiredFields.add("syncStatus");
        openapiRequiredFields.add("duration");
        openapiRequiredFields.add("startedAt");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to ReverseETLSyncStatus
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!ReverseETLSyncStatus.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in ReverseETLSyncStatus is not found in"
                                        + " the empty JSON string",
                                ReverseETLSyncStatus.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!ReverseETLSyncStatus.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `ReverseETLSyncStatus` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : ReverseETLSyncStatus.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("syncId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `syncId` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("syncId").toString()));
        }
        if (!jsonObj.get("modelId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `modelId` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("modelId").toString()));
        }
        if (!jsonObj.get("sourceId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `sourceId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("sourceId").toString()));
        }
        if (!jsonObj.get("syncStatus").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `syncStatus` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("syncStatus").toString()));
        }
        if (!jsonObj.get("duration").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `duration` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("duration").toString()));
        }
        if (!jsonObj.get("startedAt").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `startedAt` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("startedAt").toString()));
        }
        if ((jsonObj.get("finishedAt") != null && !jsonObj.get("finishedAt").isJsonNull())
                && !jsonObj.get("finishedAt").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `finishedAt` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("finishedAt").toString()));
        }
        // validate the optional field `extractPhase`
        if (jsonObj.get("extractPhase") != null && !jsonObj.get("extractPhase").isJsonNull()) {
            SyncExtractPhase.validateJsonElement(jsonObj.get("extractPhase"));
        }
        // validate the optional field `loadPhase`
        if (jsonObj.get("loadPhase") != null && !jsonObj.get("loadPhase").isJsonNull()) {
            SyncLoadPhase.validateJsonElement(jsonObj.get("loadPhase"));
        }
        if ((jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull())
                && !jsonObj.get("error").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `error` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("error").toString()));
        }
        if ((jsonObj.get("errorCode") != null && !jsonObj.get("errorCode").isJsonNull())
                && !jsonObj.get("errorCode").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `errorCode` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("errorCode").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ReverseETLSyncStatus.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ReverseETLSyncStatus' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ReverseETLSyncStatus> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(ReverseETLSyncStatus.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<ReverseETLSyncStatus>() {
                        @Override
                        public void write(JsonWriter out, ReverseETLSyncStatus value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public ReverseETLSyncStatus read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of ReverseETLSyncStatus given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ReverseETLSyncStatus
     * @throws IOException if the JSON string is invalid with respect to ReverseETLSyncStatus
     */
    public static ReverseETLSyncStatus fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, ReverseETLSyncStatus.class);
    }

    /**
     * Convert an instance of ReverseETLSyncStatus to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
