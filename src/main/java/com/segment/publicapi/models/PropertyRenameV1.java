/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;


import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** PropertyRenameV1 */
public class PropertyRenameV1 {
    public static final String SERIALIZED_NAME_OLD_NAME = "oldName";

    @SerializedName(SERIALIZED_NAME_OLD_NAME)
    private String oldName;

    public static final String SERIALIZED_NAME_NEW_NAME = "newName";

    @SerializedName(SERIALIZED_NAME_NEW_NAME)
    private String newName;

    public PropertyRenameV1() {}

    public PropertyRenameV1 oldName(String oldName) {

        this.oldName = oldName;
        return this;
    }

    /**
     * The old name of the property.
     *
     * @return oldName
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "The old name of the property.")
    public String getOldName() {
        return oldName;
    }

    public void setOldName(String oldName) {
        this.oldName = oldName;
    }

    public PropertyRenameV1 newName(String newName) {

        this.newName = newName;
        return this;
    }

    /**
     * The new name to rename the property.
     *
     * @return newName
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "The new name to rename the property.")
    public String getNewName() {
        return newName;
    }

    public void setNewName(String newName) {
        this.newName = newName;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PropertyRenameV1 propertyRenameV1 = (PropertyRenameV1) o;
        return Objects.equals(this.oldName, propertyRenameV1.oldName)
                && Objects.equals(this.newName, propertyRenameV1.newName);
    }

    @Override
    public int hashCode() {
        return Objects.hash(oldName, newName);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PropertyRenameV1 {\n");
        sb.append("    oldName: ").append(toIndentedString(oldName)).append("\n");
        sb.append("    newName: ").append(toIndentedString(newName)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("oldName");
        openapiFields.add("newName");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("oldName");
        openapiRequiredFields.add("newName");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to PropertyRenameV1
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!PropertyRenameV1.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in PropertyRenameV1 is not found in the"
                                        + " empty JSON string",
                                PropertyRenameV1.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!PropertyRenameV1.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `PropertyRenameV1` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : PropertyRenameV1.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonObj.toString()));
            }
        }
        if (!jsonObj.get("oldName").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `oldName` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("oldName").toString()));
        }
        if (!jsonObj.get("newName").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `newName` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("newName").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!PropertyRenameV1.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'PropertyRenameV1' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<PropertyRenameV1> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(PropertyRenameV1.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<PropertyRenameV1>() {
                        @Override
                        public void write(JsonWriter out, PropertyRenameV1 value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public PropertyRenameV1 read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of PropertyRenameV1 given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of PropertyRenameV1
     * @throws IOException if the JSON string is invalid with respect to PropertyRenameV1
     */
    public static PropertyRenameV1 fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, PropertyRenameV1.class);
    }

    /**
     * Convert an instance of PropertyRenameV1 to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
