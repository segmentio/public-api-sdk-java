/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** Input of the Delivery Overview Destination steps. */
public class GetDeliveryOverviewDestMetricsBetaInput {
    public static final String SERIALIZED_NAME_SOURCE_ID = "sourceId";

    @SerializedName(SERIALIZED_NAME_SOURCE_ID)
    private String sourceId;

    public static final String SERIALIZED_NAME_DESTINATION_CONFIG_ID = "destinationConfigId";

    @SerializedName(SERIALIZED_NAME_DESTINATION_CONFIG_ID)
    private String destinationConfigId;

    public static final String SERIALIZED_NAME_START_TIME = "startTime";

    @SerializedName(SERIALIZED_NAME_START_TIME)
    private String startTime;

    public static final String SERIALIZED_NAME_END_TIME = "endTime";

    @SerializedName(SERIALIZED_NAME_END_TIME)
    private String endTime;

    public static final String SERIALIZED_NAME_GROUP_BY = "groupBy";

    @SerializedName(SERIALIZED_NAME_GROUP_BY)
    private List<String> groupBy;

    /**
     * The size of each bucket in the requested window. Based on the granularity chosen, there are
     * restrictions on the time range you can query: **Minute**: - Max time range: 4 hours - Oldest
     * possible start time: 48 hours in the past **Hour**: - Max Time range: 14 days - Oldest
     * possible start time: 30 days in the past **Day**: - Max time range: 30 days - Oldest possible
     * start time: 30 days in the past
     */
    @JsonAdapter(GranularityEnum.Adapter.class)
    public enum GranularityEnum {
        DAY("day"),

        HOUR("hour"),

        MINUTE("minute");

        private String value;

        GranularityEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static GranularityEnum fromValue(String value) {
            for (GranularityEnum b : GranularityEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<GranularityEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final GranularityEnum enumeration)
                    throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public GranularityEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return GranularityEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_GRANULARITY = "granularity";

    @SerializedName(SERIALIZED_NAME_GRANULARITY)
    private GranularityEnum granularity;

    public static final String SERIALIZED_NAME_FILTER = "filter";

    @SerializedName(SERIALIZED_NAME_FILTER)
    private DeliveryOverviewFilterBy filter;

    public static final String SERIALIZED_NAME_PAGINATION = "pagination";

    @SerializedName(SERIALIZED_NAME_PAGINATION)
    private PaginationInput pagination;

    public static final String SERIALIZED_NAME_SUBSCRIPTION_ID = "subscriptionId";

    @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ID)
    private String subscriptionId;

    public GetDeliveryOverviewDestMetricsBetaInput() {}

    public GetDeliveryOverviewDestMetricsBetaInput sourceId(String sourceId) {

        this.sourceId = sourceId;
        return this;
    }

    /**
     * The sourceId for the Workspace.
     *
     * @return sourceId
     */
    @javax.annotation.Nonnull
    public String getSourceId() {
        return sourceId;
    }

    public void setSourceId(String sourceId) {
        this.sourceId = sourceId;
    }

    public GetDeliveryOverviewDestMetricsBetaInput destinationConfigId(String destinationConfigId) {

        this.destinationConfigId = destinationConfigId;
        return this;
    }

    /**
     * The id tied to a Workspace Destination.
     *
     * @return destinationConfigId
     */
    @javax.annotation.Nonnull
    public String getDestinationConfigId() {
        return destinationConfigId;
    }

    public void setDestinationConfigId(String destinationConfigId) {
        this.destinationConfigId = destinationConfigId;
    }

    public GetDeliveryOverviewDestMetricsBetaInput startTime(String startTime) {

        this.startTime = startTime;
        return this;
    }

    /**
     * The ISO8601 formatted timestamp corresponding to the beginning of the requested timeframe,
     * inclusive.
     *
     * @return startTime
     */
    @javax.annotation.Nonnull
    public String getStartTime() {
        return startTime;
    }

    public void setStartTime(String startTime) {
        this.startTime = startTime;
    }

    public GetDeliveryOverviewDestMetricsBetaInput endTime(String endTime) {

        this.endTime = endTime;
        return this;
    }

    /**
     * The ISO8601 formatted timestamp corresponding to the end of the requested timeframe,
     * noninclusive.
     *
     * @return endTime
     */
    @javax.annotation.Nonnull
    public String getEndTime() {
        return endTime;
    }

    public void setEndTime(String endTime) {
        this.endTime = endTime;
    }

    public GetDeliveryOverviewDestMetricsBetaInput groupBy(List<String> groupBy) {

        this.groupBy = groupBy;
        return this;
    }

    public GetDeliveryOverviewDestMetricsBetaInput addGroupByItem(String groupByItem) {
        if (this.groupBy == null) {
            this.groupBy = new ArrayList<>();
        }
        this.groupBy.add(groupByItem);
        return this;
    }

    /**
     * A comma-delimited list of strings representing one or more dimensions to group the result by.
     * Valid options are: &#x60;eventName&#x60;, &#x60;eventType&#x60;, &#x60;discardReason&#x60;,
     * and &#x60;appVersion&#x60;.
     *
     * @return groupBy
     */
    @javax.annotation.Nullable
    public List<String> getGroupBy() {
        return groupBy;
    }

    public void setGroupBy(List<String> groupBy) {
        this.groupBy = groupBy;
    }

    public GetDeliveryOverviewDestMetricsBetaInput granularity(GranularityEnum granularity) {

        this.granularity = granularity;
        return this;
    }

    /**
     * The size of each bucket in the requested window. Based on the granularity chosen, there are
     * restrictions on the time range you can query: **Minute**: - Max time range: 4 hours - Oldest
     * possible start time: 48 hours in the past **Hour**: - Max Time range: 14 days - Oldest
     * possible start time: 30 days in the past **Day**: - Max time range: 30 days - Oldest possible
     * start time: 30 days in the past
     *
     * @return granularity
     */
    @javax.annotation.Nonnull
    public GranularityEnum getGranularity() {
        return granularity;
    }

    public void setGranularity(GranularityEnum granularity) {
        this.granularity = granularity;
    }

    public GetDeliveryOverviewDestMetricsBetaInput filter(DeliveryOverviewFilterBy filter) {

        this.filter = filter;
        return this;
    }

    /**
     * Get filter
     *
     * @return filter
     */
    @javax.annotation.Nullable
    public DeliveryOverviewFilterBy getFilter() {
        return filter;
    }

    public void setFilter(DeliveryOverviewFilterBy filter) {
        this.filter = filter;
    }

    public GetDeliveryOverviewDestMetricsBetaInput pagination(PaginationInput pagination) {

        this.pagination = pagination;
        return this;
    }

    /**
     * Get pagination
     *
     * @return pagination
     */
    @javax.annotation.Nonnull
    public PaginationInput getPagination() {
        return pagination;
    }

    public void setPagination(PaginationInput pagination) {
        this.pagination = pagination;
    }

    public GetDeliveryOverviewDestMetricsBetaInput subscriptionId(String subscriptionId) {

        this.subscriptionId = subscriptionId;
        return this;
    }

    /**
     * An optional filter for actions destinations, to filter by a specific action.
     *
     * @return subscriptionId
     */
    @javax.annotation.Nullable
    public String getSubscriptionId() {
        return subscriptionId;
    }

    public void setSubscriptionId(String subscriptionId) {
        this.subscriptionId = subscriptionId;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetDeliveryOverviewDestMetricsBetaInput getDeliveryOverviewDestMetricsBetaInput =
                (GetDeliveryOverviewDestMetricsBetaInput) o;
        return Objects.equals(this.sourceId, getDeliveryOverviewDestMetricsBetaInput.sourceId)
                && Objects.equals(
                        this.destinationConfigId,
                        getDeliveryOverviewDestMetricsBetaInput.destinationConfigId)
                && Objects.equals(this.startTime, getDeliveryOverviewDestMetricsBetaInput.startTime)
                && Objects.equals(this.endTime, getDeliveryOverviewDestMetricsBetaInput.endTime)
                && Objects.equals(this.groupBy, getDeliveryOverviewDestMetricsBetaInput.groupBy)
                && Objects.equals(
                        this.granularity, getDeliveryOverviewDestMetricsBetaInput.granularity)
                && Objects.equals(this.filter, getDeliveryOverviewDestMetricsBetaInput.filter)
                && Objects.equals(
                        this.pagination, getDeliveryOverviewDestMetricsBetaInput.pagination)
                && Objects.equals(
                        this.subscriptionId,
                        getDeliveryOverviewDestMetricsBetaInput.subscriptionId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                sourceId,
                destinationConfigId,
                startTime,
                endTime,
                groupBy,
                granularity,
                filter,
                pagination,
                subscriptionId);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetDeliveryOverviewDestMetricsBetaInput {\n");
        sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
        sb.append("    destinationConfigId: ")
                .append(toIndentedString(destinationConfigId))
                .append("\n");
        sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
        sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
        sb.append("    groupBy: ").append(toIndentedString(groupBy)).append("\n");
        sb.append("    granularity: ").append(toIndentedString(granularity)).append("\n");
        sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
        sb.append("    pagination: ").append(toIndentedString(pagination)).append("\n");
        sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("sourceId");
        openapiFields.add("destinationConfigId");
        openapiFields.add("startTime");
        openapiFields.add("endTime");
        openapiFields.add("groupBy");
        openapiFields.add("granularity");
        openapiFields.add("filter");
        openapiFields.add("pagination");
        openapiFields.add("subscriptionId");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("sourceId");
        openapiRequiredFields.add("destinationConfigId");
        openapiRequiredFields.add("startTime");
        openapiRequiredFields.add("endTime");
        openapiRequiredFields.add("granularity");
        openapiRequiredFields.add("pagination");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     GetDeliveryOverviewDestMetricsBetaInput
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetDeliveryOverviewDestMetricsBetaInput.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " GetDeliveryOverviewDestMetricsBetaInput is not found in the"
                                    + " empty JSON string",
                                GetDeliveryOverviewDestMetricsBetaInput.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetDeliveryOverviewDestMetricsBetaInput.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `GetDeliveryOverviewDestMetricsBetaInput` properties. JSON:"
                                    + " %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : GetDeliveryOverviewDestMetricsBetaInput.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("sourceId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `sourceId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("sourceId").toString()));
        }
        if (!jsonObj.get("destinationConfigId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `destinationConfigId` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("destinationConfigId").toString()));
        }
        if (!jsonObj.get("startTime").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `startTime` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("startTime").toString()));
        }
        if (!jsonObj.get("endTime").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `endTime` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("endTime").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("groupBy") != null
                && !jsonObj.get("groupBy").isJsonNull()
                && !jsonObj.get("groupBy").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `groupBy` to be an array in the JSON string but got"
                                    + " `%s`",
                            jsonObj.get("groupBy").toString()));
        }
        if (!jsonObj.get("granularity").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `granularity` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("granularity").toString()));
        }
        // validate the optional field `filter`
        if (jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) {
            DeliveryOverviewFilterBy.validateJsonElement(jsonObj.get("filter"));
        }
        // validate the required field `pagination`
        PaginationInput.validateJsonElement(jsonObj.get("pagination"));
        if ((jsonObj.get("subscriptionId") != null && !jsonObj.get("subscriptionId").isJsonNull())
                && !jsonObj.get("subscriptionId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `subscriptionId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("subscriptionId").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetDeliveryOverviewDestMetricsBetaInput.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes 'GetDeliveryOverviewDestMetricsBetaInput'
                // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetDeliveryOverviewDestMetricsBetaInput> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(GetDeliveryOverviewDestMetricsBetaInput.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<GetDeliveryOverviewDestMetricsBetaInput>() {
                        @Override
                        public void write(
                                JsonWriter out, GetDeliveryOverviewDestMetricsBetaInput value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public GetDeliveryOverviewDestMetricsBetaInput read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of GetDeliveryOverviewDestMetricsBetaInput given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetDeliveryOverviewDestMetricsBetaInput
     * @throws IOException if the JSON string is invalid with respect to
     *     GetDeliveryOverviewDestMetricsBetaInput
     */
    public static GetDeliveryOverviewDestMetricsBetaInput fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, GetDeliveryOverviewDestMetricsBetaInput.class);
    }

    /**
     * Convert an instance of GetDeliveryOverviewDestMetricsBetaInput to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
