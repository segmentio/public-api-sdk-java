/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** Create a new Profiles Warehouse based on a set of parameters. */
public class CreateProfilesWarehouseAlphaInput {
    public static final String SERIALIZED_NAME_METADATA_ID = "metadataId";

    @SerializedName(SERIALIZED_NAME_METADATA_ID)
    private String metadataId;

    public static final String SERIALIZED_NAME_NAME = "name";

    @SerializedName(SERIALIZED_NAME_NAME)
    private String name;

    public static final String SERIALIZED_NAME_ENABLED = "enabled";

    @SerializedName(SERIALIZED_NAME_ENABLED)
    private Boolean enabled;

    public static final String SERIALIZED_NAME_SETTINGS = "settings";

    @SerializedName(SERIALIZED_NAME_SETTINGS)
    private Map<String, Object> settings;

    public static final String SERIALIZED_NAME_SCHEMA_NAME = "schemaName";

    @SerializedName(SERIALIZED_NAME_SCHEMA_NAME)
    private String schemaName;

    public CreateProfilesWarehouseAlphaInput() {}

    public CreateProfilesWarehouseAlphaInput metadataId(String metadataId) {

        this.metadataId = metadataId;
        return this;
    }

    /**
     * The Warehouse metadata to use.
     *
     * @return metadataId
     */
    @javax.annotation.Nonnull
    public String getMetadataId() {
        return metadataId;
    }

    public void setMetadataId(String metadataId) {
        this.metadataId = metadataId;
    }

    public CreateProfilesWarehouseAlphaInput name(String name) {

        this.name = name;
        return this;
    }

    /**
     * An optional human-readable name for this Warehouse.
     *
     * @return name
     */
    @javax.annotation.Nullable
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public CreateProfilesWarehouseAlphaInput enabled(Boolean enabled) {

        this.enabled = enabled;
        return this;
    }

    /**
     * Enable to allow this Warehouse to receive data. Defaults to true.
     *
     * @return enabled
     */
    @javax.annotation.Nullable
    public Boolean getEnabled() {
        return enabled;
    }

    public void setEnabled(Boolean enabled) {
        this.enabled = enabled;
    }

    public CreateProfilesWarehouseAlphaInput settings(Map<String, Object> settings) {

        this.settings = settings;
        return this;
    }

    public CreateProfilesWarehouseAlphaInput putSettingsItem(String key, Object settingsItem) {
        if (this.settings == null) {
            this.settings = new HashMap<>();
        }
        this.settings.put(key, settingsItem);
        return this;
    }

    /**
     * A key-value object that contains instance-specific Warehouse settings.
     *
     * @return settings
     */
    @javax.annotation.Nonnull
    public Map<String, Object> getSettings() {
        return settings;
    }

    public void setSettings(Map<String, Object> settings) {
        this.settings = settings;
    }

    public CreateProfilesWarehouseAlphaInput schemaName(String schemaName) {

        this.schemaName = schemaName;
        return this;
    }

    /**
     * The custom schema name that Segment uses on the Warehouse side. The space slug value is
     * default otherwise. The schema name cannot be an existing schema name in the Warehouse. To use
     * an existing schema name, please create a profiles Warehouse through the Segment app UI.
     *
     * @return schemaName
     */
    @javax.annotation.Nullable
    public String getSchemaName() {
        return schemaName;
    }

    public void setSchemaName(String schemaName) {
        this.schemaName = schemaName;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateProfilesWarehouseAlphaInput createProfilesWarehouseAlphaInput =
                (CreateProfilesWarehouseAlphaInput) o;
        return Objects.equals(this.metadataId, createProfilesWarehouseAlphaInput.metadataId)
                && Objects.equals(this.name, createProfilesWarehouseAlphaInput.name)
                && Objects.equals(this.enabled, createProfilesWarehouseAlphaInput.enabled)
                && Objects.equals(this.settings, createProfilesWarehouseAlphaInput.settings)
                && Objects.equals(this.schemaName, createProfilesWarehouseAlphaInput.schemaName);
    }

    @Override
    public int hashCode() {
        return Objects.hash(metadataId, name, enabled, settings, schemaName);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CreateProfilesWarehouseAlphaInput {\n");
        sb.append("    metadataId: ").append(toIndentedString(metadataId)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
        sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
        sb.append("    schemaName: ").append(toIndentedString(schemaName)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("metadataId");
        openapiFields.add("name");
        openapiFields.add("enabled");
        openapiFields.add("settings");
        openapiFields.add("schemaName");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("metadataId");
        openapiRequiredFields.add("settings");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     CreateProfilesWarehouseAlphaInput
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!CreateProfilesWarehouseAlphaInput.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in CreateProfilesWarehouseAlphaInput is"
                                        + " not found in the empty JSON string",
                                CreateProfilesWarehouseAlphaInput.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!CreateProfilesWarehouseAlphaInput.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `CreateProfilesWarehouseAlphaInput` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : CreateProfilesWarehouseAlphaInput.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("metadataId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `metadataId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("metadataId").toString()));
        }
        if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull())
                && !jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `name` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("name").toString()));
        }
        if ((jsonObj.get("schemaName") != null && !jsonObj.get("schemaName").isJsonNull())
                && !jsonObj.get("schemaName").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `schemaName` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("schemaName").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CreateProfilesWarehouseAlphaInput.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CreateProfilesWarehouseAlphaInput' and
                // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CreateProfilesWarehouseAlphaInput> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(CreateProfilesWarehouseAlphaInput.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<CreateProfilesWarehouseAlphaInput>() {
                        @Override
                        public void write(JsonWriter out, CreateProfilesWarehouseAlphaInput value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public CreateProfilesWarehouseAlphaInput read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of CreateProfilesWarehouseAlphaInput given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CreateProfilesWarehouseAlphaInput
     * @throws IOException if the JSON string is invalid with respect to
     *     CreateProfilesWarehouseAlphaInput
     */
    public static CreateProfilesWarehouseAlphaInput fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CreateProfilesWarehouseAlphaInput.class);
    }

    /**
     * Convert an instance of CreateProfilesWarehouseAlphaInput to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
