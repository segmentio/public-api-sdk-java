/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 32.0.2
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.segment.publicapi.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.models.PropertyRenameBeta;
import com.segment.publicapi.models.PropertyValueTransformationBeta;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.segment.publicapi.JSON;

/**
 * Represents a Transformation.
 */
@ApiModel(description = "Represents a Transformation.")

public class TransformationBeta {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SOURCE_ID = "sourceId";
  @SerializedName(SERIALIZED_NAME_SOURCE_ID)
  private String sourceId;

  public static final String SERIALIZED_NAME_DESTINATION_METADATA_ID = "destinationMetadataId";
  @SerializedName(SERIALIZED_NAME_DESTINATION_METADATA_ID)
  private String destinationMetadataId;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_IF = "if";
  @SerializedName(SERIALIZED_NAME_IF)
  private String _if;

  public static final String SERIALIZED_NAME_NEW_EVENT_NAME = "newEventName";
  @SerializedName(SERIALIZED_NAME_NEW_EVENT_NAME)
  private String newEventName;

  public static final String SERIALIZED_NAME_PROPERTY_RENAMES = "propertyRenames";
  @SerializedName(SERIALIZED_NAME_PROPERTY_RENAMES)
  private List<PropertyRenameBeta> propertyRenames = null;

  public static final String SERIALIZED_NAME_PROPERTY_VALUE_TRANSFORMATIONS = "propertyValueTransformations";
  @SerializedName(SERIALIZED_NAME_PROPERTY_VALUE_TRANSFORMATIONS)
  private List<PropertyValueTransformationBeta> propertyValueTransformations = null;

  public TransformationBeta() {
  }

  public TransformationBeta id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * The id of the Transformation.
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The id of the Transformation.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public TransformationBeta name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the Transformation.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The name of the Transformation.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public TransformationBeta sourceId(String sourceId) {
    
    this.sourceId = sourceId;
    return this;
  }

   /**
   * The Source associated with the Transformation.
   * @return sourceId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The Source associated with the Transformation.")

  public String getSourceId() {
    return sourceId;
  }


  public void setSourceId(String sourceId) {
    this.sourceId = sourceId;
  }


  public TransformationBeta destinationMetadataId(String destinationMetadataId) {
    
    this.destinationMetadataId = destinationMetadataId;
    return this;
  }

   /**
   * The optional Destination metadata associated with the Transformation.
   * @return destinationMetadataId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The optional Destination metadata associated with the Transformation.")

  public String getDestinationMetadataId() {
    return destinationMetadataId;
  }


  public void setDestinationMetadataId(String destinationMetadataId) {
    this.destinationMetadataId = destinationMetadataId;
  }


  public TransformationBeta enabled(Boolean enabled) {
    
    this.enabled = enabled;
    return this;
  }

   /**
   * If the Transformation is enabled.
   * @return enabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "If the Transformation is enabled.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public TransformationBeta _if(String _if) {
    
    this._if = _if;
    return this;
  }

   /**
   * If statement ([FQL](https://segment.com/docs/config-api/fql/)) to match events.  For standard event matchers, use the following:   Track -\\&gt; \&quot;event&#x3D;&#39;\\&lt;eventName\\&gt;&#39;\&quot;   Identify -\\&gt; \&quot;type&#x3D;&#39;identify&#39;\&quot;   Group -\\&gt; \&quot;type&#x3D;&#39;group&#39;\&quot;
   * @return _if
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "If statement ([FQL](https://segment.com/docs/config-api/fql/)) to match events.  For standard event matchers, use the following:   Track -\\> \"event='\\<eventName\\>'\"   Identify -\\> \"type='identify'\"   Group -\\> \"type='group'\"")

  public String getIf() {
    return _if;
  }


  public void setIf(String _if) {
    this._if = _if;
  }


  public TransformationBeta newEventName(String newEventName) {
    
    this.newEventName = newEventName;
    return this;
  }

   /**
   * Optional new event name for renaming events. Works only for &#39;track&#39; event type.
   * @return newEventName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional new event name for renaming events. Works only for 'track' event type.")

  public String getNewEventName() {
    return newEventName;
  }


  public void setNewEventName(String newEventName) {
    this.newEventName = newEventName;
  }


  public TransformationBeta propertyRenames(List<PropertyRenameBeta> propertyRenames) {
    
    this.propertyRenames = propertyRenames;
    return this;
  }

  public TransformationBeta addPropertyRenamesItem(PropertyRenameBeta propertyRenamesItem) {
    if (this.propertyRenames == null) {
      this.propertyRenames = new ArrayList<>();
    }
    this.propertyRenames.add(propertyRenamesItem);
    return this;
  }

   /**
   * Optional array for renaming properties collected by your events.
   * @return propertyRenames
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional array for renaming properties collected by your events.")

  public List<PropertyRenameBeta> getPropertyRenames() {
    return propertyRenames;
  }


  public void setPropertyRenames(List<PropertyRenameBeta> propertyRenames) {
    this.propertyRenames = propertyRenames;
  }


  public TransformationBeta propertyValueTransformations(List<PropertyValueTransformationBeta> propertyValueTransformations) {
    
    this.propertyValueTransformations = propertyValueTransformations;
    return this;
  }

  public TransformationBeta addPropertyValueTransformationsItem(PropertyValueTransformationBeta propertyValueTransformationsItem) {
    if (this.propertyValueTransformations == null) {
      this.propertyValueTransformations = new ArrayList<>();
    }
    this.propertyValueTransformations.add(propertyValueTransformationsItem);
    return this;
  }

   /**
   * Optional array for transforming properties and values collected by your events.
   * @return propertyValueTransformations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional array for transforming properties and values collected by your events.")

  public List<PropertyValueTransformationBeta> getPropertyValueTransformations() {
    return propertyValueTransformations;
  }


  public void setPropertyValueTransformations(List<PropertyValueTransformationBeta> propertyValueTransformations) {
    this.propertyValueTransformations = propertyValueTransformations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransformationBeta transformationBeta = (TransformationBeta) o;
    return Objects.equals(this.id, transformationBeta.id) &&
        Objects.equals(this.name, transformationBeta.name) &&
        Objects.equals(this.sourceId, transformationBeta.sourceId) &&
        Objects.equals(this.destinationMetadataId, transformationBeta.destinationMetadataId) &&
        Objects.equals(this.enabled, transformationBeta.enabled) &&
        Objects.equals(this._if, transformationBeta._if) &&
        Objects.equals(this.newEventName, transformationBeta.newEventName) &&
        Objects.equals(this.propertyRenames, transformationBeta.propertyRenames) &&
        Objects.equals(this.propertyValueTransformations, transformationBeta.propertyValueTransformations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, sourceId, destinationMetadataId, enabled, _if, newEventName, propertyRenames, propertyValueTransformations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransformationBeta {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("    destinationMetadataId: ").append(toIndentedString(destinationMetadataId)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    _if: ").append(toIndentedString(_if)).append("\n");
    sb.append("    newEventName: ").append(toIndentedString(newEventName)).append("\n");
    sb.append("    propertyRenames: ").append(toIndentedString(propertyRenames)).append("\n");
    sb.append("    propertyValueTransformations: ").append(toIndentedString(propertyValueTransformations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("sourceId");
    openapiFields.add("destinationMetadataId");
    openapiFields.add("enabled");
    openapiFields.add("if");
    openapiFields.add("newEventName");
    openapiFields.add("propertyRenames");
    openapiFields.add("propertyValueTransformations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("sourceId");
    openapiRequiredFields.add("enabled");
    openapiRequiredFields.add("if");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TransformationBeta
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TransformationBeta.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransformationBeta is not found in the empty JSON string", TransformationBeta.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TransformationBeta.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransformationBeta` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TransformationBeta.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("sourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceId").toString()));
      }
      if ((jsonObj.get("destinationMetadataId") != null && !jsonObj.get("destinationMetadataId").isJsonNull()) && !jsonObj.get("destinationMetadataId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationMetadataId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationMetadataId").toString()));
      }
      if (!jsonObj.get("if").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `if` to be a primitive type in the JSON string but got `%s`", jsonObj.get("if").toString()));
      }
      if ((jsonObj.get("newEventName") != null && !jsonObj.get("newEventName").isJsonNull()) && !jsonObj.get("newEventName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `newEventName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("newEventName").toString()));
      }
      if (jsonObj.get("propertyRenames") != null && !jsonObj.get("propertyRenames").isJsonNull()) {
        JsonArray jsonArraypropertyRenames = jsonObj.getAsJsonArray("propertyRenames");
        if (jsonArraypropertyRenames != null) {
          // ensure the json data is an array
          if (!jsonObj.get("propertyRenames").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `propertyRenames` to be an array in the JSON string but got `%s`", jsonObj.get("propertyRenames").toString()));
          }
        }
      }
      if (jsonObj.get("propertyValueTransformations") != null && !jsonObj.get("propertyValueTransformations").isJsonNull()) {
        JsonArray jsonArraypropertyValueTransformations = jsonObj.getAsJsonArray("propertyValueTransformations");
        if (jsonArraypropertyValueTransformations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("propertyValueTransformations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `propertyValueTransformations` to be an array in the JSON string but got `%s`", jsonObj.get("propertyValueTransformations").toString()));
          }
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransformationBeta.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransformationBeta' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransformationBeta> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransformationBeta.class));

       return (TypeAdapter<T>) new TypeAdapter<TransformationBeta>() {
           @Override
           public void write(JsonWriter out, TransformationBeta value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransformationBeta read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TransformationBeta given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TransformationBeta
  * @throws IOException if the JSON string is invalid with respect to TransformationBeta
  */
  public static TransformationBeta fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransformationBeta.class);
  }

 /**
  * Convert an instance of TransformationBeta to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

