/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * The version of the OpenAPI document: 33.0.0
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;


import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** Represents a Destination filter action. */
@ApiModel(description = "Represents a Destination filter action.")
public class DestinationFilterActionV1 {
    /** The kind of Transformation to apply to any matched properties. */
    @JsonAdapter(TypeEnum.Adapter.class)
    public enum TypeEnum {
        ALLOW_PROPERTIES("ALLOW_PROPERTIES"),

        DROP("DROP"),

        DROP_PROPERTIES("DROP_PROPERTIES"),

        SAMPLE("SAMPLE");

        private String value;

        TypeEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static TypeEnum fromValue(String value) {
            for (TypeEnum b : TypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<TypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final TypeEnum enumeration)
                    throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public TypeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return TypeEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_TYPE = "type";

    @SerializedName(SERIALIZED_NAME_TYPE)
    private TypeEnum type;

    public static final String SERIALIZED_NAME_FIELDS = "fields";

    @SerializedName(SERIALIZED_NAME_FIELDS)
    private Map<String, Object> fields = null;

    public static final String SERIALIZED_NAME_PERCENT = "percent";

    @SerializedName(SERIALIZED_NAME_PERCENT)
    private BigDecimal percent;

    public static final String SERIALIZED_NAME_PATH = "path";

    @SerializedName(SERIALIZED_NAME_PATH)
    private String path;

    public DestinationFilterActionV1() {}

    public DestinationFilterActionV1 type(TypeEnum type) {

        this.type = type;
        return this;
    }

    /**
     * The kind of Transformation to apply to any matched properties.
     *
     * @return type
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(
            required = true,
            value = "The kind of Transformation to apply to any matched properties.")
    public TypeEnum getType() {
        return type;
    }

    public void setType(TypeEnum type) {
        this.type = type;
    }

    public DestinationFilterActionV1 fields(Map<String, Object> fields) {

        this.fields = fields;
        return this;
    }

    public DestinationFilterActionV1 putFieldsItem(String key, Object fieldsItem) {
        if (this.fields == null) {
            this.fields = new HashMap<>();
        }
        this.fields.put(key, fieldsItem);
        return this;
    }

    /**
     * A dictionary of paths to object keys that this filter applies to. The literal string
     * &#39;&#39; represents the top level of the object.
     *
     * @return fields
     */
    @javax.annotation.Nullable
    @ApiModelProperty(
            value =
                    "A dictionary of paths to object keys that this filter applies to.   The"
                            + " literal string '' represents the top level of the object.")
    public Map<String, Object> getFields() {
        return fields;
    }

    public void setFields(Map<String, Object> fields) {
        this.fields = fields;
    }

    public DestinationFilterActionV1 percent(BigDecimal percent) {

        this.percent = percent;
        return this;
    }

    /**
     * A decimal between 0 and 1 used for &#39;sample&#39; type events and influences the likelihood
     * of sampling to occur.
     *
     * @return percent
     */
    @javax.annotation.Nullable
    @ApiModelProperty(
            value =
                    "A decimal between 0 and 1 used for 'sample' type events and influences the"
                            + " likelihood of sampling to occur.")
    public BigDecimal getPercent() {
        return percent;
    }

    public void setPercent(BigDecimal percent) {
        this.percent = percent;
    }

    public DestinationFilterActionV1 path(String path) {

        this.path = path;
        return this;
    }

    /**
     * The JSON path to a property within a payload object from which Segment generates a
     * deterministic sampling rate.
     *
     * @return path
     */
    @javax.annotation.Nullable
    @ApiModelProperty(
            value =
                    "The JSON path to a property within a payload object from which Segment"
                            + " generates a deterministic sampling rate.")
    public String getPath() {
        return path;
    }

    public void setPath(String path) {
        this.path = path;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DestinationFilterActionV1 destinationFilterActionV1 = (DestinationFilterActionV1) o;
        return Objects.equals(this.type, destinationFilterActionV1.type)
                && Objects.equals(this.fields, destinationFilterActionV1.fields)
                && Objects.equals(this.percent, destinationFilterActionV1.percent)
                && Objects.equals(this.path, destinationFilterActionV1.path);
    }

    @Override
    public int hashCode() {
        return Objects.hash(type, fields, percent, path);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class DestinationFilterActionV1 {\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
        sb.append("    percent: ").append(toIndentedString(percent)).append("\n");
        sb.append("    path: ").append(toIndentedString(path)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("type");
        openapiFields.add("fields");
        openapiFields.add("percent");
        openapiFields.add("path");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("type");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to DestinationFilterActionV1
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!DestinationFilterActionV1.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in DestinationFilterActionV1 is not found"
                                        + " in the empty JSON string",
                                DestinationFilterActionV1.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!DestinationFilterActionV1.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `DestinationFilterActionV1` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : DestinationFilterActionV1.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonObj.toString()));
            }
        }
        if (!jsonObj.get("type").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `type` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("type").toString()));
        }
        if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull())
                && !jsonObj.get("path").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `path` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("path").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!DestinationFilterActionV1.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'DestinationFilterActionV1' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<DestinationFilterActionV1> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(DestinationFilterActionV1.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<DestinationFilterActionV1>() {
                        @Override
                        public void write(JsonWriter out, DestinationFilterActionV1 value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public DestinationFilterActionV1 read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of DestinationFilterActionV1 given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of DestinationFilterActionV1
     * @throws IOException if the JSON string is invalid with respect to DestinationFilterActionV1
     */
    public static DestinationFilterActionV1 fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, DestinationFilterActionV1.class);
    }

    /**
     * Convert an instance of DestinationFilterActionV1 to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
