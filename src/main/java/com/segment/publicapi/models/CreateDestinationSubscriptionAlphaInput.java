/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * The version of the OpenAPI document: 32.0.4
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;


import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** The basic input parameters for creating a Destination subscription. */
@ApiModel(description = "The basic input parameters for creating a Destination subscription.")
public class CreateDestinationSubscriptionAlphaInput {
    public static final String SERIALIZED_NAME_NAME = "name";

    @SerializedName(SERIALIZED_NAME_NAME)
    private String name;

    public static final String SERIALIZED_NAME_ACTION_ID = "actionId";

    @SerializedName(SERIALIZED_NAME_ACTION_ID)
    private String actionId;

    public static final String SERIALIZED_NAME_TRIGGER = "trigger";

    @SerializedName(SERIALIZED_NAME_TRIGGER)
    private String trigger;

    public static final String SERIALIZED_NAME_ENABLED = "enabled";

    @SerializedName(SERIALIZED_NAME_ENABLED)
    private Boolean enabled;

    public static final String SERIALIZED_NAME_SETTINGS = "settings";

    @SerializedName(SERIALIZED_NAME_SETTINGS)
    private Map settings;

    public CreateDestinationSubscriptionAlphaInput() {}

    public CreateDestinationSubscriptionAlphaInput name(String name) {

        this.name = name;
        return this;
    }

    /**
     * A user-defined name for the subscription.
     *
     * @return name
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "A user-defined name for the subscription.")
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public CreateDestinationSubscriptionAlphaInput actionId(String actionId) {

        this.actionId = actionId;
        return this;
    }

    /**
     * The associated action id the subscription should trigger.
     *
     * @return actionId
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(
            required = true,
            value = "The associated action id the subscription should trigger.")
    public String getActionId() {
        return actionId;
    }

    public void setActionId(String actionId) {
        this.actionId = actionId;
    }

    public CreateDestinationSubscriptionAlphaInput trigger(String trigger) {

        this.trigger = trigger;
        return this;
    }

    /**
     * The FQL statement.
     *
     * @return trigger
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "The FQL statement.")
    public String getTrigger() {
        return trigger;
    }

    public void setTrigger(String trigger) {
        this.trigger = trigger;
    }

    public CreateDestinationSubscriptionAlphaInput enabled(Boolean enabled) {

        this.enabled = enabled;
        return this;
    }

    /**
     * Is the subscription enabled.
     *
     * @return enabled
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Is the subscription enabled.")
    public Boolean getEnabled() {
        return enabled;
    }

    public void setEnabled(Boolean enabled) {
        this.enabled = enabled;
    }

    public CreateDestinationSubscriptionAlphaInput settings(Map settings) {

        this.settings = settings;
        return this;
    }

    /**
     * The fields used for configuring this action.
     *
     * @return settings
     */
    @javax.annotation.Nullable
    @ApiModelProperty(value = "The fields used for configuring this action.")
    public Map getSettings() {
        return settings;
    }

    public void setSettings(Map settings) {
        this.settings = settings;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateDestinationSubscriptionAlphaInput createDestinationSubscriptionAlphaInput =
                (CreateDestinationSubscriptionAlphaInput) o;
        return Objects.equals(this.name, createDestinationSubscriptionAlphaInput.name)
                && Objects.equals(this.actionId, createDestinationSubscriptionAlphaInput.actionId)
                && Objects.equals(this.trigger, createDestinationSubscriptionAlphaInput.trigger)
                && Objects.equals(this.enabled, createDestinationSubscriptionAlphaInput.enabled)
                && Objects.equals(this.settings, createDestinationSubscriptionAlphaInput.settings);
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, actionId, trigger, enabled, settings);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CreateDestinationSubscriptionAlphaInput {\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    actionId: ").append(toIndentedString(actionId)).append("\n");
        sb.append("    trigger: ").append(toIndentedString(trigger)).append("\n");
        sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
        sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("name");
        openapiFields.add("actionId");
        openapiFields.add("trigger");
        openapiFields.add("enabled");
        openapiFields.add("settings");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("name");
        openapiRequiredFields.add("actionId");
        openapiRequiredFields.add("trigger");
        openapiRequiredFields.add("enabled");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to
     *     CreateDestinationSubscriptionAlphaInput
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!CreateDestinationSubscriptionAlphaInput.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                        + " CreateDestinationSubscriptionAlphaInput is not found in"
                                        + " the empty JSON string",
                                CreateDestinationSubscriptionAlphaInput.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!CreateDestinationSubscriptionAlphaInput.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `CreateDestinationSubscriptionAlphaInput` properties."
                                        + " JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : CreateDestinationSubscriptionAlphaInput.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonObj.toString()));
            }
        }
        if (!jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `name` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("name").toString()));
        }
        if (!jsonObj.get("actionId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `actionId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("actionId").toString()));
        }
        if (!jsonObj.get("trigger").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `trigger` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("trigger").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CreateDestinationSubscriptionAlphaInput.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes 'CreateDestinationSubscriptionAlphaInput'
                // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CreateDestinationSubscriptionAlphaInput> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(CreateDestinationSubscriptionAlphaInput.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<CreateDestinationSubscriptionAlphaInput>() {
                        @Override
                        public void write(
                                JsonWriter out, CreateDestinationSubscriptionAlphaInput value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public CreateDestinationSubscriptionAlphaInput read(JsonReader in)
                                throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of CreateDestinationSubscriptionAlphaInput given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CreateDestinationSubscriptionAlphaInput
     * @throws IOException if the JSON string is invalid with respect to
     *     CreateDestinationSubscriptionAlphaInput
     */
    public static CreateDestinationSubscriptionAlphaInput fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, CreateDestinationSubscriptionAlphaInput.class);
    }

    /**
     * Convert an instance of CreateDestinationSubscriptionAlphaInput to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
