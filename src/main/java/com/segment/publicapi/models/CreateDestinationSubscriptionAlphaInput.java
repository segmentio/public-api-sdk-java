/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** The basic input parameters for creating a Destination subscription. */
public class CreateDestinationSubscriptionAlphaInput {
    public static final String SERIALIZED_NAME_NAME = "name";

    @SerializedName(SERIALIZED_NAME_NAME)
    private String name;

    public static final String SERIALIZED_NAME_ACTION_ID = "actionId";

    @SerializedName(SERIALIZED_NAME_ACTION_ID)
    private String actionId;

    public static final String SERIALIZED_NAME_TRIGGER = "trigger";

    @SerializedName(SERIALIZED_NAME_TRIGGER)
    private String trigger;

    public static final String SERIALIZED_NAME_ENABLED = "enabled";

    @SerializedName(SERIALIZED_NAME_ENABLED)
    private Boolean enabled;

    public static final String SERIALIZED_NAME_SETTINGS = "settings";

    @SerializedName(SERIALIZED_NAME_SETTINGS)
    private Map<String, Object> settings;

    public static final String SERIALIZED_NAME_MODEL_ID = "modelId";

    @SerializedName(SERIALIZED_NAME_MODEL_ID)
    private String modelId;

    public CreateDestinationSubscriptionAlphaInput() {}

    public CreateDestinationSubscriptionAlphaInput name(String name) {

        this.name = name;
        return this;
    }

    /**
     * A user-defined name for the subscription.
     *
     * @return name
     */
    @javax.annotation.Nonnull
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public CreateDestinationSubscriptionAlphaInput actionId(String actionId) {

        this.actionId = actionId;
        return this;
    }

    /**
     * The associated action id the subscription should trigger.
     *
     * @return actionId
     */
    @javax.annotation.Nonnull
    public String getActionId() {
        return actionId;
    }

    public void setActionId(String actionId) {
        this.actionId = actionId;
    }

    public CreateDestinationSubscriptionAlphaInput trigger(String trigger) {

        this.trigger = trigger;
        return this;
    }

    /**
     * The FQL statement.
     *
     * @return trigger
     */
    @javax.annotation.Nonnull
    public String getTrigger() {
        return trigger;
    }

    public void setTrigger(String trigger) {
        this.trigger = trigger;
    }

    public CreateDestinationSubscriptionAlphaInput enabled(Boolean enabled) {

        this.enabled = enabled;
        return this;
    }

    /**
     * Is the subscription enabled.
     *
     * @return enabled
     */
    @javax.annotation.Nonnull
    public Boolean getEnabled() {
        return enabled;
    }

    public void setEnabled(Boolean enabled) {
        this.enabled = enabled;
    }

    public CreateDestinationSubscriptionAlphaInput settings(Map<String, Object> settings) {

        this.settings = settings;
        return this;
    }

    public CreateDestinationSubscriptionAlphaInput putSettingsItem(
            String key, Object settingsItem) {
        if (this.settings == null) {
            this.settings = new HashMap<>();
        }
        this.settings.put(key, settingsItem);
        return this;
    }

    /**
     * Represents settings used to configure an action subscription.
     *
     * @return settings
     */
    @javax.annotation.Nullable
    public Map<String, Object> getSettings() {
        return settings;
    }

    public void setSettings(Map<String, Object> settings) {
        this.settings = settings;
    }

    public CreateDestinationSubscriptionAlphaInput modelId(String modelId) {

        this.modelId = modelId;
        return this;
    }

    /**
     * When creating a Reverse ETL connection, indicates the Model being used to extract data.
     *
     * @return modelId
     */
    @javax.annotation.Nullable
    public String getModelId() {
        return modelId;
    }

    public void setModelId(String modelId) {
        this.modelId = modelId;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateDestinationSubscriptionAlphaInput createDestinationSubscriptionAlphaInput =
                (CreateDestinationSubscriptionAlphaInput) o;
        return Objects.equals(this.name, createDestinationSubscriptionAlphaInput.name)
                && Objects.equals(this.actionId, createDestinationSubscriptionAlphaInput.actionId)
                && Objects.equals(this.trigger, createDestinationSubscriptionAlphaInput.trigger)
                && Objects.equals(this.enabled, createDestinationSubscriptionAlphaInput.enabled)
                && Objects.equals(this.settings, createDestinationSubscriptionAlphaInput.settings)
                && Objects.equals(this.modelId, createDestinationSubscriptionAlphaInput.modelId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, actionId, trigger, enabled, settings, modelId);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CreateDestinationSubscriptionAlphaInput {\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    actionId: ").append(toIndentedString(actionId)).append("\n");
        sb.append("    trigger: ").append(toIndentedString(trigger)).append("\n");
        sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
        sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
        sb.append("    modelId: ").append(toIndentedString(modelId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("name");
        openapiFields.add("actionId");
        openapiFields.add("trigger");
        openapiFields.add("enabled");
        openapiFields.add("settings");
        openapiFields.add("modelId");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("name");
        openapiRequiredFields.add("actionId");
        openapiRequiredFields.add("trigger");
        openapiRequiredFields.add("enabled");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     CreateDestinationSubscriptionAlphaInput
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!CreateDestinationSubscriptionAlphaInput.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " CreateDestinationSubscriptionAlphaInput is not found in the"
                                    + " empty JSON string",
                                CreateDestinationSubscriptionAlphaInput.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!CreateDestinationSubscriptionAlphaInput.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `CreateDestinationSubscriptionAlphaInput` properties. JSON:"
                                    + " %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : CreateDestinationSubscriptionAlphaInput.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `name` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("name").toString()));
        }
        if (!jsonObj.get("actionId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `actionId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("actionId").toString()));
        }
        if (!jsonObj.get("trigger").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `trigger` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("trigger").toString()));
        }
        if ((jsonObj.get("modelId") != null && !jsonObj.get("modelId").isJsonNull())
                && !jsonObj.get("modelId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `modelId` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("modelId").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CreateDestinationSubscriptionAlphaInput.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes 'CreateDestinationSubscriptionAlphaInput'
                // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CreateDestinationSubscriptionAlphaInput> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(CreateDestinationSubscriptionAlphaInput.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<CreateDestinationSubscriptionAlphaInput>() {
                        @Override
                        public void write(
                                JsonWriter out, CreateDestinationSubscriptionAlphaInput value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public CreateDestinationSubscriptionAlphaInput read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of CreateDestinationSubscriptionAlphaInput given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CreateDestinationSubscriptionAlphaInput
     * @throws IOException if the JSON string is invalid with respect to
     *     CreateDestinationSubscriptionAlphaInput
     */
    public static CreateDestinationSubscriptionAlphaInput fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, CreateDestinationSubscriptionAlphaInput.class);
    }

    /**
     * Convert an instance of CreateDestinationSubscriptionAlphaInput to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
