/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * The version of the OpenAPI document: 32.0.5
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;


import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** The Destination looked up. */
@ApiModel(description = "The Destination looked up.")
public class Destination {
    public static final String SERIALIZED_NAME_ID = "id";

    @SerializedName(SERIALIZED_NAME_ID)
    private String id;

    public static final String SERIALIZED_NAME_NAME = "name";

    @SerializedName(SERIALIZED_NAME_NAME)
    private String name;

    public static final String SERIALIZED_NAME_ENABLED = "enabled";

    @SerializedName(SERIALIZED_NAME_ENABLED)
    private Boolean enabled;

    public static final String SERIALIZED_NAME_METADATA = "metadata";

    @SerializedName(SERIALIZED_NAME_METADATA)
    private Metadata metadata;

    public static final String SERIALIZED_NAME_SOURCE_ID = "sourceId";

    @SerializedName(SERIALIZED_NAME_SOURCE_ID)
    private String sourceId;

    public static final String SERIALIZED_NAME_SETTINGS = "settings";

    @SerializedName(SERIALIZED_NAME_SETTINGS)
    private Map<String, Object> settings = new HashMap<>();

    public Destination() {}

    public Destination id(String id) {

        this.id = id;
        return this;
    }

    /**
     * The unique identifier of this instance of a Destination. Config API note: analogous to
     * &#x60;name&#x60;.
     *
     * @return id
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(
            required = true,
            value =
                    "The unique identifier of this instance of a Destination.  Config API note:"
                            + " analogous to `name`.")
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public Destination name(String name) {

        this.name = name;
        return this;
    }

    /**
     * The name of this instance of a Destination. Config API note: equal to
     * &#x60;displayName&#x60;.
     *
     * @return name
     */
    @javax.annotation.Nullable
    @ApiModelProperty(
            value =
                    "The name of this instance of a Destination.  Config API note: equal to"
                            + " `displayName`.")
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Destination enabled(Boolean enabled) {

        this.enabled = enabled;
        return this;
    }

    /**
     * Whether this instance of a Destination receives data.
     *
     * @return enabled
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(
            required = true,
            value = "Whether this instance of a Destination receives data.")
    public Boolean getEnabled() {
        return enabled;
    }

    public void setEnabled(Boolean enabled) {
        this.enabled = enabled;
    }

    public Destination metadata(Metadata metadata) {

        this.metadata = metadata;
        return this;
    }

    /**
     * Get metadata
     *
     * @return metadata
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    public Metadata getMetadata() {
        return metadata;
    }

    public void setMetadata(Metadata metadata) {
        this.metadata = metadata;
    }

    public Destination sourceId(String sourceId) {

        this.sourceId = sourceId;
        return this;
    }

    /**
     * The id of a Source connected to this instance of a Destination. Config API note: analogous to
     * &#x60;parent&#x60;.
     *
     * @return sourceId
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(
            required = true,
            value =
                    "The id of a Source connected to this instance of a Destination.  Config API"
                            + " note: analogous to `parent`.")
    public String getSourceId() {
        return sourceId;
    }

    public void setSourceId(String sourceId) {
        this.sourceId = sourceId;
    }

    public Destination settings(Map<String, Object> settings) {

        this.settings = settings;
        return this;
    }

    public Destination putSettingsItem(String key, Object settingsItem) {
        this.settings.put(key, settingsItem);
        return this;
    }

    /**
     * The collection of settings associated with a Destination. Config API note: equal to
     * &#x60;config&#x60;.
     *
     * @return settings
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(
            required = true,
            value =
                    "The collection of settings associated with a Destination.  Config API note:"
                            + " equal to `config`.")
    public Map<String, Object> getSettings() {
        return settings;
    }

    public void setSettings(Map<String, Object> settings) {
        this.settings = settings;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Destination destination = (Destination) o;
        return Objects.equals(this.id, destination.id)
                && Objects.equals(this.name, destination.name)
                && Objects.equals(this.enabled, destination.enabled)
                && Objects.equals(this.metadata, destination.metadata)
                && Objects.equals(this.sourceId, destination.sourceId)
                && Objects.equals(this.settings, destination.settings);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, name, enabled, metadata, sourceId, settings);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Destination {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
        sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
        sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
        sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("id");
        openapiFields.add("name");
        openapiFields.add("enabled");
        openapiFields.add("metadata");
        openapiFields.add("sourceId");
        openapiFields.add("settings");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("id");
        openapiRequiredFields.add("enabled");
        openapiRequiredFields.add("metadata");
        openapiRequiredFields.add("sourceId");
        openapiRequiredFields.add("settings");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to Destination
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!Destination.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in Destination is not found in the empty"
                                        + " JSON string",
                                Destination.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!Destination.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `Destination` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : Destination.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonObj.toString()));
            }
        }
        if (!jsonObj.get("id").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `id` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("id").toString()));
        }
        if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull())
                && !jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `name` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("name").toString()));
        }
        if (!jsonObj.get("sourceId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `sourceId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("sourceId").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!Destination.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'Destination' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<Destination> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(Destination.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<Destination>() {
                        @Override
                        public void write(JsonWriter out, Destination value) throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public Destination read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of Destination given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of Destination
     * @throws IOException if the JSON string is invalid with respect to Destination
     */
    public static Destination fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, Destination.class);
    }

    /**
     * Convert an instance of Destination to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
