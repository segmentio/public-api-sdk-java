/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * The version of the OpenAPI document: 32.0.4
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;


import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/**
 * Platforms from which the Destination receives events. Config API note: equal to
 * &#x60;platforms&#x60;.
 */
@ApiModel(
        description =
                "Platforms from which the Destination receives events.  Config API note: equal to"
                        + " `platforms`.")
public class SupportedPlatforms {
    public static final String SERIALIZED_NAME_BROWSER = "browser";

    @SerializedName(SERIALIZED_NAME_BROWSER)
    private Boolean browser;

    public static final String SERIALIZED_NAME_SERVER = "server";

    @SerializedName(SERIALIZED_NAME_SERVER)
    private Boolean server;

    public static final String SERIALIZED_NAME_MOBILE = "mobile";

    @SerializedName(SERIALIZED_NAME_MOBILE)
    private Boolean mobile;

    public SupportedPlatforms() {}

    public SupportedPlatforms browser(Boolean browser) {

        this.browser = browser;
        return this;
    }

    /**
     * Whether this Destination supports browser events.
     *
     * @return browser
     */
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Whether this Destination supports browser events.")
    public Boolean getBrowser() {
        return browser;
    }

    public void setBrowser(Boolean browser) {
        this.browser = browser;
    }

    public SupportedPlatforms server(Boolean server) {

        this.server = server;
        return this;
    }

    /**
     * Whether this Destination supports server events.
     *
     * @return server
     */
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Whether this Destination supports server events.")
    public Boolean getServer() {
        return server;
    }

    public void setServer(Boolean server) {
        this.server = server;
    }

    public SupportedPlatforms mobile(Boolean mobile) {

        this.mobile = mobile;
        return this;
    }

    /**
     * Whether this Destination supports mobile events.
     *
     * @return mobile
     */
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Whether this Destination supports mobile events.")
    public Boolean getMobile() {
        return mobile;
    }

    public void setMobile(Boolean mobile) {
        this.mobile = mobile;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SupportedPlatforms supportedPlatforms = (SupportedPlatforms) o;
        return Objects.equals(this.browser, supportedPlatforms.browser)
                && Objects.equals(this.server, supportedPlatforms.server)
                && Objects.equals(this.mobile, supportedPlatforms.mobile);
    }

    @Override
    public int hashCode() {
        return Objects.hash(browser, server, mobile);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SupportedPlatforms {\n");
        sb.append("    browser: ").append(toIndentedString(browser)).append("\n");
        sb.append("    server: ").append(toIndentedString(server)).append("\n");
        sb.append("    mobile: ").append(toIndentedString(mobile)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("browser");
        openapiFields.add("server");
        openapiFields.add("mobile");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to SupportedPlatforms
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!SupportedPlatforms.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in SupportedPlatforms is not found in"
                                        + " the empty JSON string",
                                SupportedPlatforms.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!SupportedPlatforms.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `SupportedPlatforms` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!SupportedPlatforms.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'SupportedPlatforms' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<SupportedPlatforms> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(SupportedPlatforms.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<SupportedPlatforms>() {
                        @Override
                        public void write(JsonWriter out, SupportedPlatforms value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public SupportedPlatforms read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of SupportedPlatforms given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of SupportedPlatforms
     * @throws IOException if the JSON string is invalid with respect to SupportedPlatforms
     */
    public static SupportedPlatforms fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, SupportedPlatforms.class);
    }

    /**
     * Convert an instance of SupportedPlatforms to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
