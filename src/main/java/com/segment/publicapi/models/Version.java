/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;


import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** Functions version. */
@ApiModel(description = "Functions version.")
public class Version {
    public static final String SERIALIZED_NAME_ID = "id";

    @SerializedName(SERIALIZED_NAME_ID)
    private String id;

    public static final String SERIALIZED_NAME_AUTHOR = "author";

    @SerializedName(SERIALIZED_NAME_AUTHOR)
    private String author;

    public static final String SERIALIZED_NAME_CODE = "code";

    @SerializedName(SERIALIZED_NAME_CODE)
    private String code;

    public static final String SERIALIZED_NAME_IS_DEPLOYED = "isDeployed";

    @SerializedName(SERIALIZED_NAME_IS_DEPLOYED)
    private Boolean isDeployed;

    public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";

    @SerializedName(SERIALIZED_NAME_CREATED_AT)
    private String createdAt;

    public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";

    @SerializedName(SERIALIZED_NAME_UPDATED_AT)
    private String updatedAt;

    public static final String SERIALIZED_NAME_DEPLOYED_AT = "deployedAt";

    @SerializedName(SERIALIZED_NAME_DEPLOYED_AT)
    private String deployedAt;

    public Version() {}

    public Version id(String id) {

        this.id = id;
        return this;
    }

    /**
     * An identifier for this version.
     *
     * @return id
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "An identifier for this version.")
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public Version author(String author) {

        this.author = author;
        return this;
    }

    /**
     * Author of this version.
     *
     * @return author
     */
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Author of this version.")
    public String getAuthor() {
        return author;
    }

    public void setAuthor(String author) {
        this.author = author;
    }

    public Version code(String code) {

        this.code = code;
        return this;
    }

    /**
     * Source code of this version.
     *
     * @return code
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Source code of this version.")
    public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    public Version isDeployed(Boolean isDeployed) {

        this.isDeployed = isDeployed;
        return this;
    }

    /**
     * The deployed status of this version.
     *
     * @return isDeployed
     */
    @javax.annotation.Nullable
    @ApiModelProperty(value = "The deployed status of this version.")
    public Boolean getIsDeployed() {
        return isDeployed;
    }

    public void setIsDeployed(Boolean isDeployed) {
        this.isDeployed = isDeployed;
    }

    public Version createdAt(String createdAt) {

        this.createdAt = createdAt;
        return this;
    }

    /**
     * The time of this Version&#39;s creation.
     *
     * @return createdAt
     */
    @javax.annotation.Nullable
    @ApiModelProperty(value = "The time of this Version's creation.")
    public String getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(String createdAt) {
        this.createdAt = createdAt;
    }

    public Version updatedAt(String updatedAt) {

        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * The time of this Version&#39;s latest update.
     *
     * @return updatedAt
     */
    @javax.annotation.Nullable
    @ApiModelProperty(value = "The time of this Version's latest update.")
    public String getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
    }

    public Version deployedAt(String deployedAt) {

        this.deployedAt = deployedAt;
        return this;
    }

    /**
     * The time of this Version&#39;s last deployment.
     *
     * @return deployedAt
     */
    @javax.annotation.Nullable
    @ApiModelProperty(value = "The time of this Version's last deployment.")
    public String getDeployedAt() {
        return deployedAt;
    }

    public void setDeployedAt(String deployedAt) {
        this.deployedAt = deployedAt;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Version version = (Version) o;
        return Objects.equals(this.id, version.id)
                && Objects.equals(this.author, version.author)
                && Objects.equals(this.code, version.code)
                && Objects.equals(this.isDeployed, version.isDeployed)
                && Objects.equals(this.createdAt, version.createdAt)
                && Objects.equals(this.updatedAt, version.updatedAt)
                && Objects.equals(this.deployedAt, version.deployedAt);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, author, code, isDeployed, createdAt, updatedAt, deployedAt);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Version {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    author: ").append(toIndentedString(author)).append("\n");
        sb.append("    code: ").append(toIndentedString(code)).append("\n");
        sb.append("    isDeployed: ").append(toIndentedString(isDeployed)).append("\n");
        sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
        sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
        sb.append("    deployedAt: ").append(toIndentedString(deployedAt)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("id");
        openapiFields.add("author");
        openapiFields.add("code");
        openapiFields.add("isDeployed");
        openapiFields.add("createdAt");
        openapiFields.add("updatedAt");
        openapiFields.add("deployedAt");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("id");
        openapiRequiredFields.add("code");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to Version
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!Version.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in Version is not found in the empty JSON"
                                        + " string",
                                Version.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!Version.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `Version`"
                                        + " properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : Version.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonObj.toString()));
            }
        }
        if (!jsonObj.get("id").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `id` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("id").toString()));
        }
        if ((jsonObj.get("author") != null && !jsonObj.get("author").isJsonNull())
                && !jsonObj.get("author").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `author` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("author").toString()));
        }
        if (!jsonObj.get("code").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `code` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("code").toString()));
        }
        if ((jsonObj.get("createdAt") != null && !jsonObj.get("createdAt").isJsonNull())
                && !jsonObj.get("createdAt").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `createdAt` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("createdAt").toString()));
        }
        if ((jsonObj.get("updatedAt") != null && !jsonObj.get("updatedAt").isJsonNull())
                && !jsonObj.get("updatedAt").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `updatedAt` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("updatedAt").toString()));
        }
        if ((jsonObj.get("deployedAt") != null && !jsonObj.get("deployedAt").isJsonNull())
                && !jsonObj.get("deployedAt").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `deployedAt` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("deployedAt").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!Version.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'Version' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<Version> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(Version.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<Version>() {
                        @Override
                        public void write(JsonWriter out, Version value) throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public Version read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of Version given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of Version
     * @throws IOException if the JSON string is invalid with respect to Version
     */
    public static Version fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, Version.class);
    }

    /**
     * Convert an instance of Version to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
