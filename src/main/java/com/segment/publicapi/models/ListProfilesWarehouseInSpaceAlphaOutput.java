/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** Returns all Profiles Warehouse based on spaceID and pagination. */
public class ListProfilesWarehouseInSpaceAlphaOutput {
    public static final String SERIALIZED_NAME_PROFILES_WAREHOUSES = "profilesWarehouses";

    @SerializedName(SERIALIZED_NAME_PROFILES_WAREHOUSES)
    private List<ProfilesWarehouseAlpha> profilesWarehouses = new ArrayList<>();

    public static final String SERIALIZED_NAME_PAGINATION = "pagination";

    @SerializedName(SERIALIZED_NAME_PAGINATION)
    private PaginationOutput pagination;

    public ListProfilesWarehouseInSpaceAlphaOutput() {}

    public ListProfilesWarehouseInSpaceAlphaOutput profilesWarehouses(
            List<ProfilesWarehouseAlpha> profilesWarehouses) {

        this.profilesWarehouses = profilesWarehouses;
        return this;
    }

    public ListProfilesWarehouseInSpaceAlphaOutput addProfilesWarehousesItem(
            ProfilesWarehouseAlpha profilesWarehousesItem) {
        if (this.profilesWarehouses == null) {
            this.profilesWarehouses = new ArrayList<>();
        }
        this.profilesWarehouses.add(profilesWarehousesItem);
        return this;
    }

    /**
     * A list of Warehouses that belong to the Workspace.
     *
     * @return profilesWarehouses
     */
    @javax.annotation.Nonnull
    public List<ProfilesWarehouseAlpha> getProfilesWarehouses() {
        return profilesWarehouses;
    }

    public void setProfilesWarehouses(List<ProfilesWarehouseAlpha> profilesWarehouses) {
        this.profilesWarehouses = profilesWarehouses;
    }

    public ListProfilesWarehouseInSpaceAlphaOutput pagination(PaginationOutput pagination) {

        this.pagination = pagination;
        return this;
    }

    /**
     * Get pagination
     *
     * @return pagination
     */
    @javax.annotation.Nullable
    public PaginationOutput getPagination() {
        return pagination;
    }

    public void setPagination(PaginationOutput pagination) {
        this.pagination = pagination;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListProfilesWarehouseInSpaceAlphaOutput listProfilesWarehouseInSpaceAlphaOutput =
                (ListProfilesWarehouseInSpaceAlphaOutput) o;
        return Objects.equals(
                        this.profilesWarehouses,
                        listProfilesWarehouseInSpaceAlphaOutput.profilesWarehouses)
                && Objects.equals(
                        this.pagination, listProfilesWarehouseInSpaceAlphaOutput.pagination);
    }

    @Override
    public int hashCode() {
        return Objects.hash(profilesWarehouses, pagination);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ListProfilesWarehouseInSpaceAlphaOutput {\n");
        sb.append("    profilesWarehouses: ")
                .append(toIndentedString(profilesWarehouses))
                .append("\n");
        sb.append("    pagination: ").append(toIndentedString(pagination)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("profilesWarehouses");
        openapiFields.add("pagination");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("profilesWarehouses");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     ListProfilesWarehouseInSpaceAlphaOutput
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!ListProfilesWarehouseInSpaceAlphaOutput.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " ListProfilesWarehouseInSpaceAlphaOutput is not found in the"
                                    + " empty JSON string",
                                ListProfilesWarehouseInSpaceAlphaOutput.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!ListProfilesWarehouseInSpaceAlphaOutput.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `ListProfilesWarehouseInSpaceAlphaOutput` properties. JSON:"
                                    + " %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : ListProfilesWarehouseInSpaceAlphaOutput.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        // ensure the json data is an array
        if (!jsonObj.get("profilesWarehouses").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `profilesWarehouses` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("profilesWarehouses").toString()));
        }

        JsonArray jsonArrayprofilesWarehouses = jsonObj.getAsJsonArray("profilesWarehouses");
        // validate the required field `profilesWarehouses` (array)
        for (int i = 0; i < jsonArrayprofilesWarehouses.size(); i++) {
            ProfilesWarehouseAlpha.validateJsonElement(jsonArrayprofilesWarehouses.get(i));
        }
        ;
        // validate the optional field `pagination`
        if (jsonObj.get("pagination") != null && !jsonObj.get("pagination").isJsonNull()) {
            PaginationOutput.validateJsonElement(jsonObj.get("pagination"));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ListProfilesWarehouseInSpaceAlphaOutput.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes 'ListProfilesWarehouseInSpaceAlphaOutput'
                // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ListProfilesWarehouseInSpaceAlphaOutput> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(ListProfilesWarehouseInSpaceAlphaOutput.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<ListProfilesWarehouseInSpaceAlphaOutput>() {
                        @Override
                        public void write(
                                JsonWriter out, ListProfilesWarehouseInSpaceAlphaOutput value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public ListProfilesWarehouseInSpaceAlphaOutput read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of ListProfilesWarehouseInSpaceAlphaOutput given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ListProfilesWarehouseInSpaceAlphaOutput
     * @throws IOException if the JSON string is invalid with respect to
     *     ListProfilesWarehouseInSpaceAlphaOutput
     */
    public static ListProfilesWarehouseInSpaceAlphaOutput fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, ListProfilesWarehouseInSpaceAlphaOutput.class);
    }

    /**
     * Convert an instance of ListProfilesWarehouseInSpaceAlphaOutput to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
