/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * The version of the OpenAPI document: 32.0.4
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;


import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** A simplified Destination filter that includes the if and actions for a DestinationFilterV1. */
@ApiModel(
        description =
                "A simplified Destination filter that includes the if and actions for a"
                        + " DestinationFilterV1.")
public class PreviewDestinationFilterV1 {
    public static final String SERIALIZED_NAME_IF = "if";

    @SerializedName(SERIALIZED_NAME_IF)
    private String _if;

    public static final String SERIALIZED_NAME_ACTIONS = "actions";

    @SerializedName(SERIALIZED_NAME_ACTIONS)
    private List<DestinationFilterActionV1> actions = new ArrayList<>();

    public PreviewDestinationFilterV1() {}

    public PreviewDestinationFilterV1 _if(String _if) {

        this._if = _if;
        return this;
    }

    /**
     * A FQL statement which determines if the provided filter&#39;s actions will apply to the
     * provided JSON payload. The literal string \&quot;all\&quot; will result in this filter to all
     * events. For guidance on using FQL, see the Segment documentation site.
     *
     * @return _if
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(
            required = true,
            value =
                    "A FQL statement which determines if the provided filter's actions will apply"
                        + " to the provided JSON payload. The literal string \"all\" will result"
                        + " in this filter to all events. For guidance on using FQL, see the"
                        + " Segment documentation site.")
    public String getIf() {
        return _if;
    }

    public void setIf(String _if) {
        this._if = _if;
    }

    public PreviewDestinationFilterV1 actions(List<DestinationFilterActionV1> actions) {

        this.actions = actions;
        return this;
    }

    public PreviewDestinationFilterV1 addActionsItem(DestinationFilterActionV1 actionsItem) {
        this.actions.add(actionsItem);
        return this;
    }

    /**
     * The filtering action to take on events that match the \&quot;if\&quot; statement. Action
     * types must be one of: \&quot;drop\&quot;, \&quot;allow_properties\&quot;,
     * \&quot;drop_properties\&quot; or \&quot;sample\&quot;.
     *
     * @return actions
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(
            required = true,
            value =
                    "The filtering action to take on events that match the \"if\" statement."
                            + " Action types must be one of: \"drop\", \"allow_properties\","
                            + " \"drop_properties\" or \"sample\".")
    public List<DestinationFilterActionV1> getActions() {
        return actions;
    }

    public void setActions(List<DestinationFilterActionV1> actions) {
        this.actions = actions;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PreviewDestinationFilterV1 previewDestinationFilterV1 = (PreviewDestinationFilterV1) o;
        return Objects.equals(this._if, previewDestinationFilterV1._if)
                && Objects.equals(this.actions, previewDestinationFilterV1.actions);
    }

    @Override
    public int hashCode() {
        return Objects.hash(_if, actions);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PreviewDestinationFilterV1 {\n");
        sb.append("    _if: ").append(toIndentedString(_if)).append("\n");
        sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("if");
        openapiFields.add("actions");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("if");
        openapiRequiredFields.add("actions");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to PreviewDestinationFilterV1
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!PreviewDestinationFilterV1.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in PreviewDestinationFilterV1 is not"
                                        + " found in the empty JSON string",
                                PreviewDestinationFilterV1.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!PreviewDestinationFilterV1.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `PreviewDestinationFilterV1` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : PreviewDestinationFilterV1.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonObj.toString()));
            }
        }
        if (!jsonObj.get("if").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `if` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("if").toString()));
        }
        // ensure the json data is an array
        if (!jsonObj.get("actions").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `actions` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("actions").toString()));
        }

        JsonArray jsonArrayactions = jsonObj.getAsJsonArray("actions");
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!PreviewDestinationFilterV1.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'PreviewDestinationFilterV1' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<PreviewDestinationFilterV1> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(PreviewDestinationFilterV1.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<PreviewDestinationFilterV1>() {
                        @Override
                        public void write(JsonWriter out, PreviewDestinationFilterV1 value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public PreviewDestinationFilterV1 read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of PreviewDestinationFilterV1 given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of PreviewDestinationFilterV1
     * @throws IOException if the JSON string is invalid with respect to PreviewDestinationFilterV1
     */
    public static PreviewDestinationFilterV1 fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, PreviewDestinationFilterV1.class);
    }

    /**
     * Convert an instance of PreviewDestinationFilterV1 to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
