/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 32.0.2
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.segment.publicapi.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.models.Schedule1;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.segment.publicapi.JSON;

/**
 * Replaces the advanced sync schedule for a Warehouse.
 */
@ApiModel(description = "Replaces the advanced sync schedule for a Warehouse.")

public class ReplaceAdvancedSyncScheduleForWarehouseV1Input {
  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_SCHEDULE = "schedule";
  @SerializedName(SERIALIZED_NAME_SCHEDULE)
  private Schedule1 schedule;

  public ReplaceAdvancedSyncScheduleForWarehouseV1Input() {
  }

  public ReplaceAdvancedSyncScheduleForWarehouseV1Input enabled(Boolean enabled) {
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Enable to turn on an advanced sync schedule for the Warehouse.
   * @return enabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Enable to turn on an advanced sync schedule for the Warehouse.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public ReplaceAdvancedSyncScheduleForWarehouseV1Input schedule(Schedule1 schedule) {
    
    this.schedule = schedule;
    return this;
  }

   /**
   * Get schedule
   * @return schedule
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Schedule1 getSchedule() {
    return schedule;
  }


  public void setSchedule(Schedule1 schedule) {
    this.schedule = schedule;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReplaceAdvancedSyncScheduleForWarehouseV1Input replaceAdvancedSyncScheduleForWarehouseV1Input = (ReplaceAdvancedSyncScheduleForWarehouseV1Input) o;
    return Objects.equals(this.enabled, replaceAdvancedSyncScheduleForWarehouseV1Input.enabled) &&
        Objects.equals(this.schedule, replaceAdvancedSyncScheduleForWarehouseV1Input.schedule);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, schedule);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReplaceAdvancedSyncScheduleForWarehouseV1Input {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enabled");
    openapiFields.add("schedule");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReplaceAdvancedSyncScheduleForWarehouseV1Input
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ReplaceAdvancedSyncScheduleForWarehouseV1Input.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReplaceAdvancedSyncScheduleForWarehouseV1Input is not found in the empty JSON string", ReplaceAdvancedSyncScheduleForWarehouseV1Input.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ReplaceAdvancedSyncScheduleForWarehouseV1Input.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReplaceAdvancedSyncScheduleForWarehouseV1Input` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReplaceAdvancedSyncScheduleForWarehouseV1Input.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReplaceAdvancedSyncScheduleForWarehouseV1Input' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReplaceAdvancedSyncScheduleForWarehouseV1Input> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReplaceAdvancedSyncScheduleForWarehouseV1Input.class));

       return (TypeAdapter<T>) new TypeAdapter<ReplaceAdvancedSyncScheduleForWarehouseV1Input>() {
           @Override
           public void write(JsonWriter out, ReplaceAdvancedSyncScheduleForWarehouseV1Input value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReplaceAdvancedSyncScheduleForWarehouseV1Input read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReplaceAdvancedSyncScheduleForWarehouseV1Input given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReplaceAdvancedSyncScheduleForWarehouseV1Input
  * @throws IOException if the JSON string is invalid with respect to ReplaceAdvancedSyncScheduleForWarehouseV1Input
  */
  public static ReplaceAdvancedSyncScheduleForWarehouseV1Input fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReplaceAdvancedSyncScheduleForWarehouseV1Input.class);
  }

 /**
  * Convert an instance of ReplaceAdvancedSyncScheduleForWarehouseV1Input to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

