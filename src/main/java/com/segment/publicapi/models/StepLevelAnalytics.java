/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** StepLevelAnalytics */
public class StepLevelAnalytics {
    public static final String SERIALIZED_NAME_FROM = "from";

    @SerializedName(SERIALIZED_NAME_FROM)
    private Key from;

    public static final String SERIALIZED_NAME_TO = "to";

    @SerializedName(SERIALIZED_NAME_TO)
    private Key to;

    public static final String SERIALIZED_NAME_ANALYTICS = "analytics";

    @SerializedName(SERIALIZED_NAME_ANALYTICS)
    private Analytics analytics;

    public StepLevelAnalytics() {}

    public StepLevelAnalytics from(Key from) {

        this.from = from;
        return this;
    }

    /**
     * Get from
     *
     * @return from
     */
    @javax.annotation.Nullable
    public Key getFrom() {
        return from;
    }

    public void setFrom(Key from) {
        this.from = from;
    }

    public StepLevelAnalytics to(Key to) {

        this.to = to;
        return this;
    }

    /**
     * Get to
     *
     * @return to
     */
    @javax.annotation.Nonnull
    public Key getTo() {
        return to;
    }

    public void setTo(Key to) {
        this.to = to;
    }

    public StepLevelAnalytics analytics(Analytics analytics) {

        this.analytics = analytics;
        return this;
    }

    /**
     * Get analytics
     *
     * @return analytics
     */
    @javax.annotation.Nonnull
    public Analytics getAnalytics() {
        return analytics;
    }

    public void setAnalytics(Analytics analytics) {
        this.analytics = analytics;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        StepLevelAnalytics stepLevelAnalytics = (StepLevelAnalytics) o;
        return Objects.equals(this.from, stepLevelAnalytics.from)
                && Objects.equals(this.to, stepLevelAnalytics.to)
                && Objects.equals(this.analytics, stepLevelAnalytics.analytics);
    }

    @Override
    public int hashCode() {
        return Objects.hash(from, to, analytics);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class StepLevelAnalytics {\n");
        sb.append("    from: ").append(toIndentedString(from)).append("\n");
        sb.append("    to: ").append(toIndentedString(to)).append("\n");
        sb.append("    analytics: ").append(toIndentedString(analytics)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("from");
        openapiFields.add("to");
        openapiFields.add("analytics");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("to");
        openapiRequiredFields.add("analytics");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to StepLevelAnalytics
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!StepLevelAnalytics.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in StepLevelAnalytics is not found in the"
                                        + " empty JSON string",
                                StepLevelAnalytics.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!StepLevelAnalytics.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `StepLevelAnalytics` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : StepLevelAnalytics.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        // validate the optional field `from`
        if (jsonObj.get("from") != null && !jsonObj.get("from").isJsonNull()) {
            Key.validateJsonElement(jsonObj.get("from"));
        }
        // validate the required field `to`
        Key.validateJsonElement(jsonObj.get("to"));
        // validate the required field `analytics`
        Analytics.validateJsonElement(jsonObj.get("analytics"));
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!StepLevelAnalytics.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'StepLevelAnalytics' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<StepLevelAnalytics> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(StepLevelAnalytics.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<StepLevelAnalytics>() {
                        @Override
                        public void write(JsonWriter out, StepLevelAnalytics value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public StepLevelAnalytics read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of StepLevelAnalytics given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of StepLevelAnalytics
     * @throws IOException if the JSON string is invalid with respect to StepLevelAnalytics
     */
    public static StepLevelAnalytics fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, StepLevelAnalytics.class);
    }

    /**
     * Convert an instance of StepLevelAnalytics to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
