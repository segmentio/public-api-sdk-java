/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;


import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/**
 * Represents an entry in the Space Warehouse Selective Sync schema for a Warehouse and Space pair.
 */
@ApiModel(
        description =
                "Represents an entry in the Space Warehouse Selective Sync schema for a Warehouse"
                        + " and Space pair.")
public class SpaceWarehouseSelectiveSyncItemAlpha {
    public static final String SERIALIZED_NAME_SPACE_ID = "spaceId";

    @SerializedName(SERIALIZED_NAME_SPACE_ID)
    private String spaceId;

    public static final String SERIALIZED_NAME_COLLECTION = "collection";

    @SerializedName(SERIALIZED_NAME_COLLECTION)
    private String collection;

    public static final String SERIALIZED_NAME_WAREHOUSE_ID = "warehouseId";

    @SerializedName(SERIALIZED_NAME_WAREHOUSE_ID)
    private String warehouseId;

    public static final String SERIALIZED_NAME_SOURCE = "source";

    @SerializedName(SERIALIZED_NAME_SOURCE)
    private String source;

    public static final String SERIALIZED_NAME_ENABLED = "enabled";

    @SerializedName(SERIALIZED_NAME_ENABLED)
    private Boolean enabled;

    public static final String SERIALIZED_NAME_PROPERTIES = "properties";

    @SerializedName(SERIALIZED_NAME_PROPERTIES)
    private Map<String, Object> properties = new HashMap<>();

    public SpaceWarehouseSelectiveSyncItemAlpha() {}

    public SpaceWarehouseSelectiveSyncItemAlpha spaceId(String spaceId) {

        this.spaceId = spaceId;
        return this;
    }

    /**
     * The space id attached to this Warehouse.
     *
     * @return spaceId
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "The space id attached to this Warehouse.")
    public String getSpaceId() {
        return spaceId;
    }

    public void setSpaceId(String spaceId) {
        this.spaceId = spaceId;
    }

    public SpaceWarehouseSelectiveSyncItemAlpha collection(String collection) {

        this.collection = collection;
        return this;
    }

    /**
     * The collection within the Source.
     *
     * @return collection
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "The collection within the Source.")
    public String getCollection() {
        return collection;
    }

    public void setCollection(String collection) {
        this.collection = collection;
    }

    public SpaceWarehouseSelectiveSyncItemAlpha warehouseId(String warehouseId) {

        this.warehouseId = warehouseId;
        return this;
    }

    /**
     * The id of the Warehouse this sync belongs to.
     *
     * @return warehouseId
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "The id of the Warehouse this sync belongs to.")
    public String getWarehouseId() {
        return warehouseId;
    }

    public void setWarehouseId(String warehouseId) {
        this.warehouseId = warehouseId;
    }

    public SpaceWarehouseSelectiveSyncItemAlpha source(String source) {

        this.source = source;
        return this;
    }

    /**
     * The Source of the collection in this Space Warehouse.
     *
     * @return source
     */
    @javax.annotation.Nullable
    @ApiModelProperty(value = "The Source of the collection in this Space Warehouse.")
    public String getSource() {
        return source;
    }

    public void setSource(String source) {
        this.source = source;
    }

    public SpaceWarehouseSelectiveSyncItemAlpha enabled(Boolean enabled) {

        this.enabled = enabled;
        return this;
    }

    /**
     * The Enabled flag ok telling whether the Collection is enabled or not.
     *
     * @return enabled
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(
            required = true,
            value = "The Enabled flag ok telling whether the Collection is enabled or not.")
    public Boolean getEnabled() {
        return enabled;
    }

    public void setEnabled(Boolean enabled) {
        this.enabled = enabled;
    }

    public SpaceWarehouseSelectiveSyncItemAlpha properties(Map<String, Object> properties) {

        this.properties = properties;
        return this;
    }

    public SpaceWarehouseSelectiveSyncItemAlpha putPropertiesItem(
            String key, Object propertiesItem) {
        this.properties.put(key, propertiesItem);
        return this;
    }

    /**
     * A map that contains the properties within the collection to which the Warehouse should sync.
     *
     * @return properties
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(
            required = true,
            value =
                    "A map that contains the properties within the collection to which the"
                            + " Warehouse should sync.")
    public Map<String, Object> getProperties() {
        return properties;
    }

    public void setProperties(Map<String, Object> properties) {
        this.properties = properties;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SpaceWarehouseSelectiveSyncItemAlpha spaceWarehouseSelectiveSyncItemAlpha =
                (SpaceWarehouseSelectiveSyncItemAlpha) o;
        return Objects.equals(this.spaceId, spaceWarehouseSelectiveSyncItemAlpha.spaceId)
                && Objects.equals(this.collection, spaceWarehouseSelectiveSyncItemAlpha.collection)
                && Objects.equals(
                        this.warehouseId, spaceWarehouseSelectiveSyncItemAlpha.warehouseId)
                && Objects.equals(this.source, spaceWarehouseSelectiveSyncItemAlpha.source)
                && Objects.equals(this.enabled, spaceWarehouseSelectiveSyncItemAlpha.enabled)
                && Objects.equals(this.properties, spaceWarehouseSelectiveSyncItemAlpha.properties);
    }

    @Override
    public int hashCode() {
        return Objects.hash(spaceId, collection, warehouseId, source, enabled, properties);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SpaceWarehouseSelectiveSyncItemAlpha {\n");
        sb.append("    spaceId: ").append(toIndentedString(spaceId)).append("\n");
        sb.append("    collection: ").append(toIndentedString(collection)).append("\n");
        sb.append("    warehouseId: ").append(toIndentedString(warehouseId)).append("\n");
        sb.append("    source: ").append(toIndentedString(source)).append("\n");
        sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
        sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("spaceId");
        openapiFields.add("collection");
        openapiFields.add("warehouseId");
        openapiFields.add("source");
        openapiFields.add("enabled");
        openapiFields.add("properties");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("spaceId");
        openapiRequiredFields.add("collection");
        openapiRequiredFields.add("warehouseId");
        openapiRequiredFields.add("enabled");
        openapiRequiredFields.add("properties");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to
     *     SpaceWarehouseSelectiveSyncItemAlpha
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!SpaceWarehouseSelectiveSyncItemAlpha.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in SpaceWarehouseSelectiveSyncItemAlpha"
                                        + " is not found in the empty JSON string",
                                SpaceWarehouseSelectiveSyncItemAlpha.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!SpaceWarehouseSelectiveSyncItemAlpha.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `SpaceWarehouseSelectiveSyncItemAlpha` properties. JSON:"
                                    + " %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : SpaceWarehouseSelectiveSyncItemAlpha.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonObj.toString()));
            }
        }
        if (!jsonObj.get("spaceId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `spaceId` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("spaceId").toString()));
        }
        if (!jsonObj.get("collection").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `collection` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("collection").toString()));
        }
        if (!jsonObj.get("warehouseId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `warehouseId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("warehouseId").toString()));
        }
        if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull())
                && !jsonObj.get("source").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `source` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("source").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!SpaceWarehouseSelectiveSyncItemAlpha.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'SpaceWarehouseSelectiveSyncItemAlpha'
                // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<SpaceWarehouseSelectiveSyncItemAlpha> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(SpaceWarehouseSelectiveSyncItemAlpha.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<SpaceWarehouseSelectiveSyncItemAlpha>() {
                        @Override
                        public void write(
                                JsonWriter out, SpaceWarehouseSelectiveSyncItemAlpha value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public SpaceWarehouseSelectiveSyncItemAlpha read(JsonReader in)
                                throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of SpaceWarehouseSelectiveSyncItemAlpha given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of SpaceWarehouseSelectiveSyncItemAlpha
     * @throws IOException if the JSON string is invalid with respect to
     *     SpaceWarehouseSelectiveSyncItemAlpha
     */
    public static SpaceWarehouseSelectiveSyncItemAlpha fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, SpaceWarehouseSelectiveSyncItemAlpha.class);
    }

    /**
     * Convert an instance of SpaceWarehouseSelectiveSyncItemAlpha to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
