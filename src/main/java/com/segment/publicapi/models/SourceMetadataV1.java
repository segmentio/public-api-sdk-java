/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** A website, server library, mobile SDK, or cloud application which can send data into Segment. */
public class SourceMetadataV1 {
    public static final String SERIALIZED_NAME_ID = "id";

    @SerializedName(SERIALIZED_NAME_ID)
    private String id;

    public static final String SERIALIZED_NAME_NAME = "name";

    @SerializedName(SERIALIZED_NAME_NAME)
    private String name;

    public static final String SERIALIZED_NAME_SLUG = "slug";

    @SerializedName(SERIALIZED_NAME_SLUG)
    private String slug;

    public static final String SERIALIZED_NAME_DESCRIPTION = "description";

    @SerializedName(SERIALIZED_NAME_DESCRIPTION)
    private String description;

    public static final String SERIALIZED_NAME_LOGOS = "logos";

    @SerializedName(SERIALIZED_NAME_LOGOS)
    private LogosBeta logos;

    public static final String SERIALIZED_NAME_OPTIONS = "options";

    @SerializedName(SERIALIZED_NAME_OPTIONS)
    private List<IntegrationOptionBeta> options = new ArrayList<>();

    public static final String SERIALIZED_NAME_CATEGORIES = "categories";

    @SerializedName(SERIALIZED_NAME_CATEGORIES)
    private List<String> categories = new ArrayList<>();

    public static final String SERIALIZED_NAME_IS_CLOUD_EVENT_SOURCE = "isCloudEventSource";

    @SerializedName(SERIALIZED_NAME_IS_CLOUD_EVENT_SOURCE)
    private Boolean isCloudEventSource;

    public SourceMetadataV1() {}

    public SourceMetadataV1 id(String id) {

        this.id = id;
        return this;
    }

    /**
     * The id for this Source metadata in the Segment catalog. Config API note: analogous to
     * &#x60;name&#x60;.
     *
     * @return id
     */
    @javax.annotation.Nonnull
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public SourceMetadataV1 name(String name) {

        this.name = name;
        return this;
    }

    /**
     * The user-friendly name of this Source. Config API note: equal to &#x60;displayName&#x60;.
     *
     * @return name
     */
    @javax.annotation.Nonnull
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public SourceMetadataV1 slug(String slug) {

        this.slug = slug;
        return this;
    }

    /**
     * The slug that identifies this Source in the Segment app. Config API note: equal to
     * &#x60;name&#x60;.
     *
     * @return slug
     */
    @javax.annotation.Nonnull
    public String getSlug() {
        return slug;
    }

    public void setSlug(String slug) {
        this.slug = slug;
    }

    public SourceMetadataV1 description(String description) {

        this.description = description;
        return this;
    }

    /**
     * The description of this Source.
     *
     * @return description
     */
    @javax.annotation.Nonnull
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public SourceMetadataV1 logos(LogosBeta logos) {

        this.logos = logos;
        return this;
    }

    /**
     * Get logos
     *
     * @return logos
     */
    @javax.annotation.Nonnull
    public LogosBeta getLogos() {
        return logos;
    }

    public void setLogos(LogosBeta logos) {
        this.logos = logos;
    }

    public SourceMetadataV1 options(List<IntegrationOptionBeta> options) {

        this.options = options;
        return this;
    }

    public SourceMetadataV1 addOptionsItem(IntegrationOptionBeta optionsItem) {
        if (this.options == null) {
            this.options = new ArrayList<>();
        }
        this.options.add(optionsItem);
        return this;
    }

    /**
     * Options for this Source.
     *
     * @return options
     */
    @javax.annotation.Nonnull
    public List<IntegrationOptionBeta> getOptions() {
        return options;
    }

    public void setOptions(List<IntegrationOptionBeta> options) {
        this.options = options;
    }

    public SourceMetadataV1 categories(List<String> categories) {

        this.categories = categories;
        return this;
    }

    public SourceMetadataV1 addCategoriesItem(String categoriesItem) {
        if (this.categories == null) {
            this.categories = new ArrayList<>();
        }
        this.categories.add(categoriesItem);
        return this;
    }

    /**
     * A list of categories this Source belongs to.
     *
     * @return categories
     */
    @javax.annotation.Nonnull
    public List<String> getCategories() {
        return categories;
    }

    public void setCategories(List<String> categories) {
        this.categories = categories;
    }

    public SourceMetadataV1 isCloudEventSource(Boolean isCloudEventSource) {

        this.isCloudEventSource = isCloudEventSource;
        return this;
    }

    /**
     * True if this is a Cloud Event Source.
     *
     * @return isCloudEventSource
     */
    @javax.annotation.Nonnull
    public Boolean getIsCloudEventSource() {
        return isCloudEventSource;
    }

    public void setIsCloudEventSource(Boolean isCloudEventSource) {
        this.isCloudEventSource = isCloudEventSource;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceMetadataV1 sourceMetadataV1 = (SourceMetadataV1) o;
        return Objects.equals(this.id, sourceMetadataV1.id)
                && Objects.equals(this.name, sourceMetadataV1.name)
                && Objects.equals(this.slug, sourceMetadataV1.slug)
                && Objects.equals(this.description, sourceMetadataV1.description)
                && Objects.equals(this.logos, sourceMetadataV1.logos)
                && Objects.equals(this.options, sourceMetadataV1.options)
                && Objects.equals(this.categories, sourceMetadataV1.categories)
                && Objects.equals(this.isCloudEventSource, sourceMetadataV1.isCloudEventSource);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                id, name, slug, description, logos, options, categories, isCloudEventSource);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SourceMetadataV1 {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    logos: ").append(toIndentedString(logos)).append("\n");
        sb.append("    options: ").append(toIndentedString(options)).append("\n");
        sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
        sb.append("    isCloudEventSource: ")
                .append(toIndentedString(isCloudEventSource))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("id");
        openapiFields.add("name");
        openapiFields.add("slug");
        openapiFields.add("description");
        openapiFields.add("logos");
        openapiFields.add("options");
        openapiFields.add("categories");
        openapiFields.add("isCloudEventSource");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("id");
        openapiRequiredFields.add("name");
        openapiRequiredFields.add("slug");
        openapiRequiredFields.add("description");
        openapiRequiredFields.add("logos");
        openapiRequiredFields.add("options");
        openapiRequiredFields.add("categories");
        openapiRequiredFields.add("isCloudEventSource");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to SourceMetadataV1
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!SourceMetadataV1.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in SourceMetadataV1 is not found in the"
                                        + " empty JSON string",
                                SourceMetadataV1.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!SourceMetadataV1.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `SourceMetadataV1` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : SourceMetadataV1.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("id").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `id` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("id").toString()));
        }
        if (!jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `name` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("name").toString()));
        }
        if (!jsonObj.get("slug").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `slug` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("slug").toString()));
        }
        if (!jsonObj.get("description").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `description` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("description").toString()));
        }
        // validate the required field `logos`
        LogosBeta.validateJsonElement(jsonObj.get("logos"));
        // ensure the json data is an array
        if (!jsonObj.get("options").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `options` to be an array in the JSON string but got"
                                    + " `%s`",
                            jsonObj.get("options").toString()));
        }

        JsonArray jsonArrayoptions = jsonObj.getAsJsonArray("options");
        // validate the required field `options` (array)
        for (int i = 0; i < jsonArrayoptions.size(); i++) {
            IntegrationOptionBeta.validateJsonElement(jsonArrayoptions.get(i));
        }
        ;
        // ensure the required json array is present
        if (jsonObj.get("categories") == null) {
            throw new IllegalArgumentException(
                    "Expected the field `linkedContent` to be an array in the JSON string but got"
                            + " `null`");
        } else if (!jsonObj.get("categories").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `categories` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("categories").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!SourceMetadataV1.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'SourceMetadataV1' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<SourceMetadataV1> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(SourceMetadataV1.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<SourceMetadataV1>() {
                        @Override
                        public void write(JsonWriter out, SourceMetadataV1 value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public SourceMetadataV1 read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of SourceMetadataV1 given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of SourceMetadataV1
     * @throws IOException if the JSON string is invalid with respect to SourceMetadataV1
     */
    public static SourceMetadataV1 fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, SourceMetadataV1.class);
    }

    /**
     * Convert an instance of SourceMetadataV1 to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
