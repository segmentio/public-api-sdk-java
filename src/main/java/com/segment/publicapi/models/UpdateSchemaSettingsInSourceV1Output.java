/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;


import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** Output of the Source with updated settings. */
@ApiModel(description = "Output of the Source with updated settings.")
public class UpdateSchemaSettingsInSourceV1Output {
    public static final String SERIALIZED_NAME_SOURCE_ID = "sourceId";

    @SerializedName(SERIALIZED_NAME_SOURCE_ID)
    private String sourceId;

    public static final String SERIALIZED_NAME_SETTINGS = "settings";

    @SerializedName(SERIALIZED_NAME_SETTINGS)
    private Settings1 settings;

    public UpdateSchemaSettingsInSourceV1Output() {}

    public UpdateSchemaSettingsInSourceV1Output sourceId(String sourceId) {

        this.sourceId = sourceId;
        return this;
    }

    /**
     * The id of the updated Source. Config API note: analogous to &#x60;parent&#x60; and
     * &#x60;name&#x60;.
     *
     * @return sourceId
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(
            required = true,
            value =
                    "The id of the updated Source.  Config API note: analogous to `parent` and"
                            + " `name`.")
    public String getSourceId() {
        return sourceId;
    }

    public void setSourceId(String sourceId) {
        this.sourceId = sourceId;
    }

    public UpdateSchemaSettingsInSourceV1Output settings(Settings1 settings) {

        this.settings = settings;
        return this;
    }

    /**
     * Get settings
     *
     * @return settings
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    public Settings1 getSettings() {
        return settings;
    }

    public void setSettings(Settings1 settings) {
        this.settings = settings;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateSchemaSettingsInSourceV1Output updateSchemaSettingsInSourceV1Output =
                (UpdateSchemaSettingsInSourceV1Output) o;
        return Objects.equals(this.sourceId, updateSchemaSettingsInSourceV1Output.sourceId)
                && Objects.equals(this.settings, updateSchemaSettingsInSourceV1Output.settings);
    }

    @Override
    public int hashCode() {
        return Objects.hash(sourceId, settings);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class UpdateSchemaSettingsInSourceV1Output {\n");
        sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
        sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("sourceId");
        openapiFields.add("settings");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("sourceId");
        openapiRequiredFields.add("settings");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to
     *     UpdateSchemaSettingsInSourceV1Output
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!UpdateSchemaSettingsInSourceV1Output.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in UpdateSchemaSettingsInSourceV1Output"
                                        + " is not found in the empty JSON string",
                                UpdateSchemaSettingsInSourceV1Output.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!UpdateSchemaSettingsInSourceV1Output.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `UpdateSchemaSettingsInSourceV1Output` properties. JSON:"
                                    + " %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : UpdateSchemaSettingsInSourceV1Output.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonObj.toString()));
            }
        }
        if (!jsonObj.get("sourceId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `sourceId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("sourceId").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!UpdateSchemaSettingsInSourceV1Output.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'UpdateSchemaSettingsInSourceV1Output'
                // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<UpdateSchemaSettingsInSourceV1Output> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(UpdateSchemaSettingsInSourceV1Output.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<UpdateSchemaSettingsInSourceV1Output>() {
                        @Override
                        public void write(
                                JsonWriter out, UpdateSchemaSettingsInSourceV1Output value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public UpdateSchemaSettingsInSourceV1Output read(JsonReader in)
                                throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of UpdateSchemaSettingsInSourceV1Output given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of UpdateSchemaSettingsInSourceV1Output
     * @throws IOException if the JSON string is invalid with respect to
     *     UpdateSchemaSettingsInSourceV1Output
     */
    public static UpdateSchemaSettingsInSourceV1Output fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, UpdateSchemaSettingsInSourceV1Output.class);
    }

    /**
     * Convert an instance of UpdateSchemaSettingsInSourceV1Output to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
