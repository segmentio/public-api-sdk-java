/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** Echo response. */
public class EchoAlphaOutput {
    /**
     * The HTTP method used for this round-trip. Currently, this endpoint supports only
     * &#x60;get&#x60; and &#x60;post&#x60; methods.
     */
    @JsonAdapter(MethodEnum.Adapter.class)
    public enum MethodEnum {
        GET("get"),

        POST("post");

        private String value;

        MethodEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static MethodEnum fromValue(String value) {
            for (MethodEnum b : MethodEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<MethodEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final MethodEnum enumeration)
                    throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public MethodEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return MethodEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_METHOD = "method";

    @SerializedName(SERIALIZED_NAME_METHOD)
    private MethodEnum method;

    public static final String SERIALIZED_NAME_MESSAGE = "message";

    @SerializedName(SERIALIZED_NAME_MESSAGE)
    private String message;

    public static final String SERIALIZED_NAME_HEADERS = "headers";

    @SerializedName(SERIALIZED_NAME_HEADERS)
    private Map<String, Object> headers = new HashMap<>();

    public EchoAlphaOutput() {}

    public EchoAlphaOutput method(MethodEnum method) {

        this.method = method;
        return this;
    }

    /**
     * The HTTP method used for this round-trip. Currently, this endpoint supports only
     * &#x60;get&#x60; and &#x60;post&#x60; methods.
     *
     * @return method
     */
    @javax.annotation.Nonnull
    public MethodEnum getMethod() {
        return method;
    }

    public void setMethod(MethodEnum method) {
        this.method = method;
    }

    public EchoAlphaOutput message(String message) {

        this.message = message;
        return this;
    }

    /**
     * The string passed in the &#x60;message&#x60; input field.
     *
     * @return message
     */
    @javax.annotation.Nonnull
    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public EchoAlphaOutput headers(Map<String, Object> headers) {

        this.headers = headers;
        return this;
    }

    public EchoAlphaOutput putHeadersItem(String key, Object headersItem) {
        if (this.headers == null) {
            this.headers = new HashMap<>();
        }
        this.headers.put(key, headersItem);
        return this;
    }

    /**
     * The request&#39;s HTTP headers.
     *
     * @return headers
     */
    @javax.annotation.Nonnull
    public Map<String, Object> getHeaders() {
        return headers;
    }

    public void setHeaders(Map<String, Object> headers) {
        this.headers = headers;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EchoAlphaOutput echoAlphaOutput = (EchoAlphaOutput) o;
        return Objects.equals(this.method, echoAlphaOutput.method)
                && Objects.equals(this.message, echoAlphaOutput.message)
                && Objects.equals(this.headers, echoAlphaOutput.headers);
    }

    @Override
    public int hashCode() {
        return Objects.hash(method, message, headers);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class EchoAlphaOutput {\n");
        sb.append("    method: ").append(toIndentedString(method)).append("\n");
        sb.append("    message: ").append(toIndentedString(message)).append("\n");
        sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("method");
        openapiFields.add("message");
        openapiFields.add("headers");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("method");
        openapiRequiredFields.add("message");
        openapiRequiredFields.add("headers");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to EchoAlphaOutput
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!EchoAlphaOutput.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in EchoAlphaOutput is not found in the"
                                        + " empty JSON string",
                                EchoAlphaOutput.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!EchoAlphaOutput.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `EchoAlphaOutput` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : EchoAlphaOutput.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("method").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `method` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("method").toString()));
        }
        if (!jsonObj.get("message").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `message` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("message").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!EchoAlphaOutput.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'EchoAlphaOutput' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<EchoAlphaOutput> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(EchoAlphaOutput.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<EchoAlphaOutput>() {
                        @Override
                        public void write(JsonWriter out, EchoAlphaOutput value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public EchoAlphaOutput read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of EchoAlphaOutput given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of EchoAlphaOutput
     * @throws IOException if the JSON string is invalid with respect to EchoAlphaOutput
     */
    public static EchoAlphaOutput fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, EchoAlphaOutput.class);
    }

    /**
     * Convert an instance of EchoAlphaOutput to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
