/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** A class that encapsulates the complete activation output with full details. */
public class ActivationOutput {
    public static final String SERIALIZED_NAME_ID = "id";

    @SerializedName(SERIALIZED_NAME_ID)
    private String id;

    public static final String SERIALIZED_NAME_ENABLED = "enabled";

    @SerializedName(SERIALIZED_NAME_ENABLED)
    private Boolean enabled;

    public static final String SERIALIZED_NAME_WORKSPACE_ID = "workspaceId";

    @SerializedName(SERIALIZED_NAME_WORKSPACE_ID)
    private String workspaceId;

    public static final String SERIALIZED_NAME_SPACE_ID = "spaceId";

    @SerializedName(SERIALIZED_NAME_SPACE_ID)
    private String spaceId;

    public static final String SERIALIZED_NAME_AUDIENCE_ID = "audienceId";

    @SerializedName(SERIALIZED_NAME_AUDIENCE_ID)
    private String audienceId;

    public static final String SERIALIZED_NAME_DESTINATION_CONNECTION_ID =
            "destinationConnectionId";

    @SerializedName(SERIALIZED_NAME_DESTINATION_CONNECTION_ID)
    private String destinationConnectionId;

    public static final String SERIALIZED_NAME_ACTIVATION_TYPE = "activationType";

    @SerializedName(SERIALIZED_NAME_ACTIVATION_TYPE)
    private String activationType;

    public static final String SERIALIZED_NAME_ACTIVATION_NAME = "activationName";

    @SerializedName(SERIALIZED_NAME_ACTIVATION_NAME)
    private String activationName;

    public static final String SERIALIZED_NAME_PERSONALIZATION = "personalization";

    @SerializedName(SERIALIZED_NAME_PERSONALIZATION)
    private PersonalizationInput personalization;

    public static final String SERIALIZED_NAME_DESTINATION_MAPPING = "destinationMapping";

    @SerializedName(SERIALIZED_NAME_DESTINATION_MAPPING)
    private DestinationSubscriptionConfiguration destinationMapping;

    public static final String SERIALIZED_NAME_PERFORM_FIRST_SYNC = "performFirstSync";

    @SerializedName(SERIALIZED_NAME_PERFORM_FIRST_SYNC)
    private Boolean performFirstSync;

    public ActivationOutput() {}

    public ActivationOutput id(String id) {

        this.id = id;
        return this;
    }

    /**
     * The activation id.
     *
     * @return id
     */
    @javax.annotation.Nonnull
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public ActivationOutput enabled(Boolean enabled) {

        this.enabled = enabled;
        return this;
    }

    /**
     * Activation Enabled Status.
     *
     * @return enabled
     */
    @javax.annotation.Nonnull
    public Boolean getEnabled() {
        return enabled;
    }

    public void setEnabled(Boolean enabled) {
        this.enabled = enabled;
    }

    public ActivationOutput workspaceId(String workspaceId) {

        this.workspaceId = workspaceId;
        return this;
    }

    /**
     * The WORKSPACE id.
     *
     * @return workspaceId
     */
    @javax.annotation.Nonnull
    public String getWorkspaceId() {
        return workspaceId;
    }

    public void setWorkspaceId(String workspaceId) {
        this.workspaceId = workspaceId;
    }

    public ActivationOutput spaceId(String spaceId) {

        this.spaceId = spaceId;
        return this;
    }

    /**
     * The space id.
     *
     * @return spaceId
     */
    @javax.annotation.Nonnull
    public String getSpaceId() {
        return spaceId;
    }

    public void setSpaceId(String spaceId) {
        this.spaceId = spaceId;
    }

    public ActivationOutput audienceId(String audienceId) {

        this.audienceId = audienceId;
        return this;
    }

    /**
     * The audience id.
     *
     * @return audienceId
     */
    @javax.annotation.Nonnull
    public String getAudienceId() {
        return audienceId;
    }

    public void setAudienceId(String audienceId) {
        this.audienceId = audienceId;
    }

    public ActivationOutput destinationConnectionId(String destinationConnectionId) {

        this.destinationConnectionId = destinationConnectionId;
        return this;
    }

    /**
     * The DESTINATION connection id (formerly integrationInstanceId).
     *
     * @return destinationConnectionId
     */
    @javax.annotation.Nonnull
    public String getDestinationConnectionId() {
        return destinationConnectionId;
    }

    public void setDestinationConnectionId(String destinationConnectionId) {
        this.destinationConnectionId = destinationConnectionId;
    }

    public ActivationOutput activationType(String activationType) {

        this.activationType = activationType;
        return this;
    }

    /**
     * Type of activation trigger.
     *
     * @return activationType
     */
    @javax.annotation.Nonnull
    public String getActivationType() {
        return activationType;
    }

    public void setActivationType(String activationType) {
        this.activationType = activationType;
    }

    public ActivationOutput activationName(String activationName) {

        this.activationName = activationName;
        return this;
    }

    /**
     * Name of the activation.
     *
     * @return activationName
     */
    @javax.annotation.Nonnull
    public String getActivationName() {
        return activationName;
    }

    public void setActivationName(String activationName) {
        this.activationName = activationName;
    }

    public ActivationOutput personalization(PersonalizationInput personalization) {

        this.personalization = personalization;
        return this;
    }

    /**
     * Get personalization
     *
     * @return personalization
     */
    @javax.annotation.Nonnull
    public PersonalizationInput getPersonalization() {
        return personalization;
    }

    public void setPersonalization(PersonalizationInput personalization) {
        this.personalization = personalization;
    }

    public ActivationOutput destinationMapping(
            DestinationSubscriptionConfiguration destinationMapping) {

        this.destinationMapping = destinationMapping;
        return this;
    }

    /**
     * Get destinationMapping
     *
     * @return destinationMapping
     */
    @javax.annotation.Nonnull
    public DestinationSubscriptionConfiguration getDestinationMapping() {
        return destinationMapping;
    }

    public void setDestinationMapping(DestinationSubscriptionConfiguration destinationMapping) {
        this.destinationMapping = destinationMapping;
    }

    public ActivationOutput performFirstSync(Boolean performFirstSync) {

        this.performFirstSync = performFirstSync;
        return this;
    }

    /**
     * Whether to perform the first sync so the activation events are generated on the first
     * audience sync.
     *
     * @return performFirstSync
     */
    @javax.annotation.Nullable
    public Boolean getPerformFirstSync() {
        return performFirstSync;
    }

    public void setPerformFirstSync(Boolean performFirstSync) {
        this.performFirstSync = performFirstSync;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ActivationOutput activationOutput = (ActivationOutput) o;
        return Objects.equals(this.id, activationOutput.id)
                && Objects.equals(this.enabled, activationOutput.enabled)
                && Objects.equals(this.workspaceId, activationOutput.workspaceId)
                && Objects.equals(this.spaceId, activationOutput.spaceId)
                && Objects.equals(this.audienceId, activationOutput.audienceId)
                && Objects.equals(
                        this.destinationConnectionId, activationOutput.destinationConnectionId)
                && Objects.equals(this.activationType, activationOutput.activationType)
                && Objects.equals(this.activationName, activationOutput.activationName)
                && Objects.equals(this.personalization, activationOutput.personalization)
                && Objects.equals(this.destinationMapping, activationOutput.destinationMapping)
                && Objects.equals(this.performFirstSync, activationOutput.performFirstSync);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                id,
                enabled,
                workspaceId,
                spaceId,
                audienceId,
                destinationConnectionId,
                activationType,
                activationName,
                personalization,
                destinationMapping,
                performFirstSync);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ActivationOutput {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
        sb.append("    workspaceId: ").append(toIndentedString(workspaceId)).append("\n");
        sb.append("    spaceId: ").append(toIndentedString(spaceId)).append("\n");
        sb.append("    audienceId: ").append(toIndentedString(audienceId)).append("\n");
        sb.append("    destinationConnectionId: ")
                .append(toIndentedString(destinationConnectionId))
                .append("\n");
        sb.append("    activationType: ").append(toIndentedString(activationType)).append("\n");
        sb.append("    activationName: ").append(toIndentedString(activationName)).append("\n");
        sb.append("    personalization: ").append(toIndentedString(personalization)).append("\n");
        sb.append("    destinationMapping: ")
                .append(toIndentedString(destinationMapping))
                .append("\n");
        sb.append("    performFirstSync: ").append(toIndentedString(performFirstSync)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("id");
        openapiFields.add("enabled");
        openapiFields.add("workspaceId");
        openapiFields.add("spaceId");
        openapiFields.add("audienceId");
        openapiFields.add("destinationConnectionId");
        openapiFields.add("activationType");
        openapiFields.add("activationName");
        openapiFields.add("personalization");
        openapiFields.add("destinationMapping");
        openapiFields.add("performFirstSync");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("id");
        openapiRequiredFields.add("enabled");
        openapiRequiredFields.add("workspaceId");
        openapiRequiredFields.add("spaceId");
        openapiRequiredFields.add("audienceId");
        openapiRequiredFields.add("destinationConnectionId");
        openapiRequiredFields.add("activationType");
        openapiRequiredFields.add("activationName");
        openapiRequiredFields.add("personalization");
        openapiRequiredFields.add("destinationMapping");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to ActivationOutput
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!ActivationOutput.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in ActivationOutput is not found in the"
                                        + " empty JSON string",
                                ActivationOutput.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!ActivationOutput.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `ActivationOutput` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : ActivationOutput.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("id").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `id` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("id").toString()));
        }
        if (!jsonObj.get("workspaceId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `workspaceId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("workspaceId").toString()));
        }
        if (!jsonObj.get("spaceId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `spaceId` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("spaceId").toString()));
        }
        if (!jsonObj.get("audienceId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `audienceId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("audienceId").toString()));
        }
        if (!jsonObj.get("destinationConnectionId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `destinationConnectionId` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("destinationConnectionId").toString()));
        }
        if (!jsonObj.get("activationType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `activationType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("activationType").toString()));
        }
        if (!jsonObj.get("activationName").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `activationName` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("activationName").toString()));
        }
        // validate the required field `personalization`
        PersonalizationInput.validateJsonElement(jsonObj.get("personalization"));
        // validate the required field `destinationMapping`
        DestinationSubscriptionConfiguration.validateJsonElement(jsonObj.get("destinationMapping"));
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ActivationOutput.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ActivationOutput' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ActivationOutput> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(ActivationOutput.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<ActivationOutput>() {
                        @Override
                        public void write(JsonWriter out, ActivationOutput value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public ActivationOutput read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of ActivationOutput given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ActivationOutput
     * @throws IOException if the JSON string is invalid with respect to ActivationOutput
     */
    public static ActivationOutput fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, ActivationOutput.class);
    }

    /**
     * Convert an instance of ActivationOutput to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
