/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * The version of the OpenAPI document: 32.0.4
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;


import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** A registered set of permissions for a subject, extending a role to a resource. */
@ApiModel(
        description =
                "A registered set of permissions for a subject, extending a role to a resource.")
public class PermissionV1 {
    public static final String SERIALIZED_NAME_ROLE_NAME = "roleName";

    @SerializedName(SERIALIZED_NAME_ROLE_NAME)
    private String roleName;

    public static final String SERIALIZED_NAME_ROLE_ID = "roleId";

    @SerializedName(SERIALIZED_NAME_ROLE_ID)
    private String roleId;

    public static final String SERIALIZED_NAME_RESOURCES = "resources";

    @SerializedName(SERIALIZED_NAME_RESOURCES)
    private List<PermissionResourceV1> resources = new ArrayList<>();

    public static final String SERIALIZED_NAME_LABELS = "labels";

    @SerializedName(SERIALIZED_NAME_LABELS)
    private List<AllowedLabelBeta> labels = null;

    public PermissionV1() {}

    public PermissionV1 roleName(String roleName) {

        this.roleName = roleName;
        return this;
    }

    /**
     * The name of the role associated with this permission.
     *
     * @return roleName
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(
            required = true,
            value = "The name of the role associated with this permission.")
    public String getRoleName() {
        return roleName;
    }

    public void setRoleName(String roleName) {
        this.roleName = roleName;
    }

    public PermissionV1 roleId(String roleId) {

        this.roleId = roleId;
        return this;
    }

    /**
     * The id of the role associated with this permission.
     *
     * @return roleId
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(
            required = true,
            value = "The id of the role associated with this permission.")
    public String getRoleId() {
        return roleId;
    }

    public void setRoleId(String roleId) {
        this.roleId = roleId;
    }

    public PermissionV1 resources(List<PermissionResourceV1> resources) {

        this.resources = resources;
        return this;
    }

    public PermissionV1 addResourcesItem(PermissionResourceV1 resourcesItem) {
        this.resources.add(resourcesItem);
        return this;
    }

    /**
     * The resources associated with this permission.
     *
     * @return resources
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "The resources associated with this permission.")
    public List<PermissionResourceV1> getResources() {
        return resources;
    }

    public void setResources(List<PermissionResourceV1> resources) {
        this.resources = resources;
    }

    public PermissionV1 labels(List<AllowedLabelBeta> labels) {

        this.labels = labels;
        return this;
    }

    public PermissionV1 addLabelsItem(AllowedLabelBeta labelsItem) {
        if (this.labels == null) {
            this.labels = new ArrayList<>();
        }
        this.labels.add(labelsItem);
        return this;
    }

    /**
     * The labels to attach to this permission.
     *
     * @return labels
     */
    @javax.annotation.Nullable
    @ApiModelProperty(value = "The labels to attach to this permission.")
    public List<AllowedLabelBeta> getLabels() {
        return labels;
    }

    public void setLabels(List<AllowedLabelBeta> labels) {
        this.labels = labels;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PermissionV1 permissionV1 = (PermissionV1) o;
        return Objects.equals(this.roleName, permissionV1.roleName)
                && Objects.equals(this.roleId, permissionV1.roleId)
                && Objects.equals(this.resources, permissionV1.resources)
                && Objects.equals(this.labels, permissionV1.labels);
    }

    @Override
    public int hashCode() {
        return Objects.hash(roleName, roleId, resources, labels);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PermissionV1 {\n");
        sb.append("    roleName: ").append(toIndentedString(roleName)).append("\n");
        sb.append("    roleId: ").append(toIndentedString(roleId)).append("\n");
        sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
        sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("roleName");
        openapiFields.add("roleId");
        openapiFields.add("resources");
        openapiFields.add("labels");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("roleName");
        openapiRequiredFields.add("roleId");
        openapiRequiredFields.add("resources");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to PermissionV1
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!PermissionV1.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in PermissionV1 is not found in the"
                                        + " empty JSON string",
                                PermissionV1.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!PermissionV1.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `PermissionV1` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : PermissionV1.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonObj.toString()));
            }
        }
        if (!jsonObj.get("roleName").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `roleName` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("roleName").toString()));
        }
        if (!jsonObj.get("roleId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `roleId` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("roleId").toString()));
        }
        // ensure the json data is an array
        if (!jsonObj.get("resources").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `resources` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("resources").toString()));
        }

        JsonArray jsonArrayresources = jsonObj.getAsJsonArray("resources");
        if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull()) {
            JsonArray jsonArraylabels = jsonObj.getAsJsonArray("labels");
            if (jsonArraylabels != null) {
                // ensure the json data is an array
                if (!jsonObj.get("labels").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `labels` to be an array in the JSON string"
                                            + " but got `%s`",
                                    jsonObj.get("labels").toString()));
                }
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!PermissionV1.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'PermissionV1' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<PermissionV1> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(PermissionV1.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<PermissionV1>() {
                        @Override
                        public void write(JsonWriter out, PermissionV1 value) throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public PermissionV1 read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of PermissionV1 given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of PermissionV1
     * @throws IOException if the JSON string is invalid with respect to PermissionV1
     */
    public static PermissionV1 fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, PermissionV1.class);
    }

    /**
     * Convert an instance of PermissionV1 to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
