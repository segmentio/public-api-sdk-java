/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

public class StatesInner extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(StatesInner.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!StatesInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'StatesInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<DestinationState> adapterDestinationState =
                    gson.getDelegateAdapter(this, TypeToken.get(DestinationState.class));
            final TypeAdapter<EventExitRule> adapterEventExitRule =
                    gson.getDelegateAdapter(this, TypeToken.get(EventExitRule.class));
            final TypeAdapter<AudienceExitRule> adapterAudienceExitRule =
                    gson.getDelegateAdapter(this, TypeToken.get(AudienceExitRule.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<StatesInner>() {
                        @Override
                        public void write(JsonWriter out, StatesInner value) throws IOException {
                            if (value == null || value.getActualInstance() == null) {
                                elementAdapter.write(out, null);
                                return;
                            }

                            // check if the actual instance is of the type `DestinationState`
                            if (value.getActualInstance() instanceof DestinationState) {
                                JsonElement element =
                                        adapterDestinationState.toJsonTree(
                                                (DestinationState) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            // check if the actual instance is of the type `EventExitRule`
                            if (value.getActualInstance() instanceof EventExitRule) {
                                JsonElement element =
                                        adapterEventExitRule.toJsonTree(
                                                (EventExitRule) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            // check if the actual instance is of the type `AudienceExitRule`
                            if (value.getActualInstance() instanceof AudienceExitRule) {
                                JsonElement element =
                                        adapterAudienceExitRule.toJsonTree(
                                                (AudienceExitRule) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            throw new IOException(
                                    "Failed to serialize as the type doesn't match anyOf schemae:"
                                            + " AudienceExitRule, DestinationState, EventExitRule");
                        }

                        @Override
                        public StatesInner read(JsonReader in) throws IOException {
                            Object deserialized = null;
                            JsonElement jsonElement = elementAdapter.read(in);

                            ArrayList<String> errorMessages = new ArrayList<>();
                            TypeAdapter actualAdapter = elementAdapter;

                            // deserialize DestinationState
                            try {
                                // validate the JSON object to see if any exception is thrown
                                DestinationState.validateJsonElement(jsonElement);
                                actualAdapter = adapterDestinationState;
                                StatesInner ret = new StatesInner();
                                ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                                return ret;
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for DestinationState failed with"
                                                        + " `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'DestinationState'",
                                        e);
                            }
                            // deserialize EventExitRule
                            try {
                                // validate the JSON object to see if any exception is thrown
                                EventExitRule.validateJsonElement(jsonElement);
                                actualAdapter = adapterEventExitRule;
                                StatesInner ret = new StatesInner();
                                ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                                return ret;
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for EventExitRule failed with"
                                                        + " `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'EventExitRule'",
                                        e);
                            }
                            // deserialize AudienceExitRule
                            try {
                                // validate the JSON object to see if any exception is thrown
                                AudienceExitRule.validateJsonElement(jsonElement);
                                actualAdapter = adapterAudienceExitRule;
                                StatesInner ret = new StatesInner();
                                ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                                return ret;
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for AudienceExitRule failed with"
                                                        + " `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'AudienceExitRule'",
                                        e);
                            }

                            throw new IOException(
                                    String.format(
                                            "Failed deserialization for StatesInner: no class"
                                                + " matches result, expected at least 1. Detailed"
                                                + " failure message for anyOf schemas: %s. JSON:"
                                                + " %s",
                                            errorMessages, jsonElement.toString()));
                        }
                    }.nullSafe();
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public StatesInner() {
        super("anyOf", Boolean.FALSE);
    }

    public StatesInner(AudienceExitRule o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public StatesInner(DestinationState o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public StatesInner(EventExitRule o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("DestinationState", DestinationState.class);
        schemas.put("EventExitRule", EventExitRule.class);
        schemas.put("AudienceExitRule", AudienceExitRule.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return StatesInner.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check the instance parameter is valid
     * against the anyOf child schemas: AudienceExitRule, DestinationState, EventExitRule
     *
     * <p>It could be an instance of the 'anyOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof DestinationState) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventExitRule) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AudienceExitRule) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException(
                "Invalid instance type. Must be AudienceExitRule, DestinationState, EventExitRule");
    }

    /**
     * Get the actual instance, which can be the following: AudienceExitRule, DestinationState,
     * EventExitRule
     *
     * @return The actual instance (AudienceExitRule, DestinationState, EventExitRule)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `DestinationState`. If the actual instance is not
     * `DestinationState`, the ClassCastException will be thrown.
     *
     * @return The actual instance of `DestinationState`
     * @throws ClassCastException if the instance is not `DestinationState`
     */
    public DestinationState getDestinationState() throws ClassCastException {
        return (DestinationState) super.getActualInstance();
    }

    /**
     * Get the actual instance of `EventExitRule`. If the actual instance is not `EventExitRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventExitRule`
     * @throws ClassCastException if the instance is not `EventExitRule`
     */
    public EventExitRule getEventExitRule() throws ClassCastException {
        return (EventExitRule) super.getActualInstance();
    }

    /**
     * Get the actual instance of `AudienceExitRule`. If the actual instance is not
     * `AudienceExitRule`, the ClassCastException will be thrown.
     *
     * @return The actual instance of `AudienceExitRule`
     * @throws ClassCastException if the instance is not `AudienceExitRule`
     */
    public AudienceExitRule getAudienceExitRule() throws ClassCastException {
        return (AudienceExitRule) super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to StatesInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate anyOf schemas one by one
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with DestinationState
        try {
            DestinationState.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for DestinationState failed with `%s`.",
                            e.getMessage()));
            // continue to the next one
        }
        // validate the json string with EventExitRule
        try {
            EventExitRule.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for EventExitRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AudienceExitRule
        try {
            AudienceExitRule.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for AudienceExitRule failed with `%s`.",
                            e.getMessage()));
            // continue to the next one
        }
        throw new IOException(
                String.format(
                        "The JSON string is invalid for StatesInner with anyOf schemas:"
                            + " AudienceExitRule, DestinationState, EventExitRule. no class match"
                            + " the result, expected at least 1. Detailed failure message for anyOf"
                            + " schemas: %s. JSON: %s",
                        errorMessages, jsonElement.toString()));
    }

    /**
     * Create an instance of StatesInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of StatesInner
     * @throws IOException if the JSON string is invalid with respect to StatesInner
     */
    public static StatesInner fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, StatesInner.class);
    }

    /**
     * Convert an instance of StatesInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
