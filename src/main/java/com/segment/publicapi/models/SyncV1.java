/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * Represents a sync between a Source and Warehouse. A sync occurs when data from a Source is loaded
 * into a Warehouse.
 */
public class SyncV1 {
    public static final String SERIALIZED_NAME_SOURCE_ID = "sourceId";

    @SerializedName(SERIALIZED_NAME_SOURCE_ID)
    private String sourceId;

    public static final String SERIALIZED_NAME_START = "start";

    @SerializedName(SERIALIZED_NAME_START)
    private String start;

    public static final String SERIALIZED_NAME_END = "end";

    @SerializedName(SERIALIZED_NAME_END)
    private String end;

    public static final String SERIALIZED_NAME_STATUS = "status";

    @SerializedName(SERIALIZED_NAME_STATUS)
    private String status;

    public static final String SERIALIZED_NAME_DURATION = "duration";

    @SerializedName(SERIALIZED_NAME_DURATION)
    private BigDecimal duration;

    public static final String SERIALIZED_NAME_HUMAN_DURATION = "humanDuration";

    @SerializedName(SERIALIZED_NAME_HUMAN_DURATION)
    private String humanDuration;

    public static final String SERIALIZED_NAME_COUNT = "count";

    @SerializedName(SERIALIZED_NAME_COUNT)
    private BigDecimal count;

    public static final String SERIALIZED_NAME_NOTICES = "notices";

    @SerializedName(SERIALIZED_NAME_NOTICES)
    private List<SyncNoticeV1> notices = new ArrayList<>();

    public SyncV1() {}

    public SyncV1 sourceId(String sourceId) {

        this.sourceId = sourceId;
        return this;
    }

    /**
     * The id of the Source loaded in the sync.
     *
     * @return sourceId
     */
    @javax.annotation.Nonnull
    public String getSourceId() {
        return sourceId;
    }

    public void setSourceId(String sourceId) {
        this.sourceId = sourceId;
    }

    public SyncV1 start(String start) {

        this.start = start;
        return this;
    }

    /**
     * The start time of the sync.
     *
     * @return start
     */
    @javax.annotation.Nonnull
    public String getStart() {
        return start;
    }

    public void setStart(String start) {
        this.start = start;
    }

    public SyncV1 end(String end) {

        this.end = end;
        return this;
    }

    /**
     * The time the sync completed. Returns null if unfinished.
     *
     * @return end
     */
    @javax.annotation.Nullable
    public String getEnd() {
        return end;
    }

    public void setEnd(String end) {
        this.end = end;
    }

    public SyncV1 status(String status) {

        this.status = status;
        return this;
    }

    /**
     * The status of the sync.
     *
     * @return status
     */
    @javax.annotation.Nonnull
    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public SyncV1 duration(BigDecimal duration) {

        this.duration = duration;
        return this;
    }

    /**
     * The duration of the sync in seconds. Returns the partial duration if the sync has not
     * finished yet.
     *
     * @return duration
     */
    @javax.annotation.Nonnull
    public BigDecimal getDuration() {
        return duration;
    }

    public void setDuration(BigDecimal duration) {
        this.duration = duration;
    }

    public SyncV1 humanDuration(String humanDuration) {

        this.humanDuration = humanDuration;
        return this;
    }

    /**
     * The human-readable counterpart of &#x60;duration&#x60;.
     *
     * @return humanDuration
     */
    @javax.annotation.Nonnull
    public String getHumanDuration() {
        return humanDuration;
    }

    public void setHumanDuration(String humanDuration) {
        this.humanDuration = humanDuration;
    }

    public SyncV1 count(BigDecimal count) {

        this.count = count;
        return this;
    }

    /**
     * The number of rows synced into the Warehouse.
     *
     * @return count
     */
    @javax.annotation.Nonnull
    public BigDecimal getCount() {
        return count;
    }

    public void setCount(BigDecimal count) {
        this.count = count;
    }

    public SyncV1 notices(List<SyncNoticeV1> notices) {

        this.notices = notices;
        return this;
    }

    public SyncV1 addNoticesItem(SyncNoticeV1 noticesItem) {
        if (this.notices == null) {
            this.notices = new ArrayList<>();
        }
        this.notices.add(noticesItem);
        return this;
    }

    /**
     * Notices that contain the events that occurred during the sync.
     *
     * @return notices
     */
    @javax.annotation.Nonnull
    public List<SyncNoticeV1> getNotices() {
        return notices;
    }

    public void setNotices(List<SyncNoticeV1> notices) {
        this.notices = notices;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SyncV1 syncV1 = (SyncV1) o;
        return Objects.equals(this.sourceId, syncV1.sourceId)
                && Objects.equals(this.start, syncV1.start)
                && Objects.equals(this.end, syncV1.end)
                && Objects.equals(this.status, syncV1.status)
                && Objects.equals(this.duration, syncV1.duration)
                && Objects.equals(this.humanDuration, syncV1.humanDuration)
                && Objects.equals(this.count, syncV1.count)
                && Objects.equals(this.notices, syncV1.notices);
    }

    @Override
    public int hashCode() {
        return Objects.hash(sourceId, start, end, status, duration, humanDuration, count, notices);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SyncV1 {\n");
        sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
        sb.append("    start: ").append(toIndentedString(start)).append("\n");
        sb.append("    end: ").append(toIndentedString(end)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
        sb.append("    humanDuration: ").append(toIndentedString(humanDuration)).append("\n");
        sb.append("    count: ").append(toIndentedString(count)).append("\n");
        sb.append("    notices: ").append(toIndentedString(notices)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("sourceId");
        openapiFields.add("start");
        openapiFields.add("end");
        openapiFields.add("status");
        openapiFields.add("duration");
        openapiFields.add("humanDuration");
        openapiFields.add("count");
        openapiFields.add("notices");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("sourceId");
        openapiRequiredFields.add("start");
        openapiRequiredFields.add("end");
        openapiRequiredFields.add("status");
        openapiRequiredFields.add("duration");
        openapiRequiredFields.add("humanDuration");
        openapiRequiredFields.add("count");
        openapiRequiredFields.add("notices");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to SyncV1
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!SyncV1.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in SyncV1 is not found in the empty JSON"
                                        + " string",
                                SyncV1.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!SyncV1.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the `SyncV1`"
                                        + " properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : SyncV1.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("sourceId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `sourceId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("sourceId").toString()));
        }
        if (!jsonObj.get("start").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `start` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("start").toString()));
        }
        if ((jsonObj.get("end") != null && !jsonObj.get("end").isJsonNull())
                && !jsonObj.get("end").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `end` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("end").toString()));
        }
        if (!jsonObj.get("status").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `status` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("status").toString()));
        }
        if (!jsonObj.get("humanDuration").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `humanDuration` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("humanDuration").toString()));
        }
        // ensure the json data is an array
        if (!jsonObj.get("notices").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `notices` to be an array in the JSON string but got"
                                    + " `%s`",
                            jsonObj.get("notices").toString()));
        }

        JsonArray jsonArraynotices = jsonObj.getAsJsonArray("notices");
        // validate the required field `notices` (array)
        for (int i = 0; i < jsonArraynotices.size(); i++) {
            SyncNoticeV1.validateJsonElement(jsonArraynotices.get(i));
        }
        ;
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!SyncV1.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'SyncV1' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<SyncV1> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(SyncV1.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<SyncV1>() {
                        @Override
                        public void write(JsonWriter out, SyncV1 value) throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public SyncV1 read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of SyncV1 given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of SyncV1
     * @throws IOException if the JSON string is invalid with respect to SyncV1
     */
    public static SyncV1 fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, SyncV1.class);
    }

    /**
     * Convert an instance of SyncV1 to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
