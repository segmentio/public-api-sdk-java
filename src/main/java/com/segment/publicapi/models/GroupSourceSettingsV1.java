/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** GroupSourceSettingsV1 */
public class GroupSourceSettingsV1 {
    public static final String SERIALIZED_NAME_ALLOW_UNPLANNED_TRAITS = "allowUnplannedTraits";

    @SerializedName(SERIALIZED_NAME_ALLOW_UNPLANNED_TRAITS)
    private Boolean allowUnplannedTraits;

    public static final String SERIALIZED_NAME_ALLOW_TRAITS_ON_VIOLATIONS =
            "allowTraitsOnViolations";

    @SerializedName(SERIALIZED_NAME_ALLOW_TRAITS_ON_VIOLATIONS)
    private Boolean allowTraitsOnViolations;

    /**
     * The common group event on violations. Config API note: equal to
     * &#x60;commonGroupEventOnViolations&#x60;.
     */
    @JsonAdapter(CommonEventOnViolationsEnum.Adapter.class)
    public enum CommonEventOnViolationsEnum {
        ALLOW("ALLOW"),

        BLOCK("BLOCK"),

        OMIT_TRAITS("OMIT_TRAITS");

        private String value;

        CommonEventOnViolationsEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static CommonEventOnViolationsEnum fromValue(String value) {
            for (CommonEventOnViolationsEnum b : CommonEventOnViolationsEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<CommonEventOnViolationsEnum> {
            @Override
            public void write(
                    final JsonWriter jsonWriter, final CommonEventOnViolationsEnum enumeration)
                    throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public CommonEventOnViolationsEnum read(final JsonReader jsonReader)
                    throws IOException {
                String value = jsonReader.nextString();
                return CommonEventOnViolationsEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_COMMON_EVENT_ON_VIOLATIONS =
            "commonEventOnViolations";

    @SerializedName(SERIALIZED_NAME_COMMON_EVENT_ON_VIOLATIONS)
    private CommonEventOnViolationsEnum commonEventOnViolations;

    public GroupSourceSettingsV1() {}

    public GroupSourceSettingsV1 allowUnplannedTraits(Boolean allowUnplannedTraits) {

        this.allowUnplannedTraits = allowUnplannedTraits;
        return this;
    }

    /**
     * Enable to allow unplanned group traits. Config API note: equal to
     * &#x60;allowUnplannedGroupTraits&#x60;.
     *
     * @return allowUnplannedTraits
     */
    @javax.annotation.Nullable
    public Boolean getAllowUnplannedTraits() {
        return allowUnplannedTraits;
    }

    public void setAllowUnplannedTraits(Boolean allowUnplannedTraits) {
        this.allowUnplannedTraits = allowUnplannedTraits;
    }

    public GroupSourceSettingsV1 allowTraitsOnViolations(Boolean allowTraitsOnViolations) {

        this.allowTraitsOnViolations = allowTraitsOnViolations;
        return this;
    }

    /**
     * Enable to allow group traits on violations. Config API note: equal to
     * &#x60;allowGroupTraitsOnViolations&#x60;.
     *
     * @return allowTraitsOnViolations
     */
    @javax.annotation.Nullable
    public Boolean getAllowTraitsOnViolations() {
        return allowTraitsOnViolations;
    }

    public void setAllowTraitsOnViolations(Boolean allowTraitsOnViolations) {
        this.allowTraitsOnViolations = allowTraitsOnViolations;
    }

    public GroupSourceSettingsV1 commonEventOnViolations(
            CommonEventOnViolationsEnum commonEventOnViolations) {

        this.commonEventOnViolations = commonEventOnViolations;
        return this;
    }

    /**
     * The common group event on violations. Config API note: equal to
     * &#x60;commonGroupEventOnViolations&#x60;.
     *
     * @return commonEventOnViolations
     */
    @javax.annotation.Nullable
    public CommonEventOnViolationsEnum getCommonEventOnViolations() {
        return commonEventOnViolations;
    }

    public void setCommonEventOnViolations(CommonEventOnViolationsEnum commonEventOnViolations) {
        this.commonEventOnViolations = commonEventOnViolations;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GroupSourceSettingsV1 groupSourceSettingsV1 = (GroupSourceSettingsV1) o;
        return Objects.equals(this.allowUnplannedTraits, groupSourceSettingsV1.allowUnplannedTraits)
                && Objects.equals(
                        this.allowTraitsOnViolations, groupSourceSettingsV1.allowTraitsOnViolations)
                && Objects.equals(
                        this.commonEventOnViolations,
                        groupSourceSettingsV1.commonEventOnViolations);
    }

    @Override
    public int hashCode() {
        return Objects.hash(allowUnplannedTraits, allowTraitsOnViolations, commonEventOnViolations);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GroupSourceSettingsV1 {\n");
        sb.append("    allowUnplannedTraits: ")
                .append(toIndentedString(allowUnplannedTraits))
                .append("\n");
        sb.append("    allowTraitsOnViolations: ")
                .append(toIndentedString(allowTraitsOnViolations))
                .append("\n");
        sb.append("    commonEventOnViolations: ")
                .append(toIndentedString(commonEventOnViolations))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("allowUnplannedTraits");
        openapiFields.add("allowTraitsOnViolations");
        openapiFields.add("commonEventOnViolations");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to GroupSourceSettingsV1
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GroupSourceSettingsV1.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in GroupSourceSettingsV1 is not found in"
                                        + " the empty JSON string",
                                GroupSourceSettingsV1.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GroupSourceSettingsV1.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `GroupSourceSettingsV1` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("commonEventOnViolations") != null
                        && !jsonObj.get("commonEventOnViolations").isJsonNull())
                && !jsonObj.get("commonEventOnViolations").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `commonEventOnViolations` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("commonEventOnViolations").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GroupSourceSettingsV1.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GroupSourceSettingsV1' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GroupSourceSettingsV1> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(GroupSourceSettingsV1.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<GroupSourceSettingsV1>() {
                        @Override
                        public void write(JsonWriter out, GroupSourceSettingsV1 value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public GroupSourceSettingsV1 read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of GroupSourceSettingsV1 given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GroupSourceSettingsV1
     * @throws IOException if the JSON string is invalid with respect to GroupSourceSettingsV1
     */
    public static GroupSourceSettingsV1 fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, GroupSourceSettingsV1.class);
    }

    /**
     * Convert an instance of GroupSourceSettingsV1 to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
