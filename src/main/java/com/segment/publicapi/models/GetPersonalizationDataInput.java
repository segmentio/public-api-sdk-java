/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** Input for the getEntityDataForProfile endpoint. */
public class GetPersonalizationDataInput {
    public static final String SERIALIZED_NAME_SPACE_ID = "spaceId";

    @SerializedName(SERIALIZED_NAME_SPACE_ID)
    private String spaceId;

    public static final String SERIALIZED_NAME_ENTITY_TYPE = "entityType";

    @SerializedName(SERIALIZED_NAME_ENTITY_TYPE)
    private String entityType;

    public static final String SERIALIZED_NAME_ENTITY_ID = "entityId";

    @SerializedName(SERIALIZED_NAME_ENTITY_ID)
    private String entityId;

    public static final String SERIALIZED_NAME_CHILD_ENTITY_TYPE = "childEntityType";

    @SerializedName(SERIALIZED_NAME_CHILD_ENTITY_TYPE)
    private String childEntityType;

    public GetPersonalizationDataInput() {}

    public GetPersonalizationDataInput spaceId(String spaceId) {

        this.spaceId = spaceId;
        return this;
    }

    /**
     * The space id.
     *
     * @return spaceId
     */
    @javax.annotation.Nonnull
    public String getSpaceId() {
        return spaceId;
    }

    public void setSpaceId(String spaceId) {
        this.spaceId = spaceId;
    }

    public GetPersonalizationDataInput entityType(String entityType) {

        this.entityType = entityType;
        return this;
    }

    /**
     * Entity type.
     *
     * @return entityType
     */
    @javax.annotation.Nonnull
    public String getEntityType() {
        return entityType;
    }

    public void setEntityType(String entityType) {
        this.entityType = entityType;
    }

    public GetPersonalizationDataInput entityId(String entityId) {

        this.entityId = entityId;
        return this;
    }

    /**
     * Entity id - if type is profile, should have the shape
     * \&quot;&lt;type&gt;:&lt;identifier&gt;\&quot;.
     *
     * @return entityId
     */
    @javax.annotation.Nonnull
    public String getEntityId() {
        return entityId;
    }

    public void setEntityId(String entityId) {
        this.entityId = entityId;
    }

    public GetPersonalizationDataInput childEntityType(String childEntityType) {

        this.childEntityType = childEntityType;
        return this;
    }

    /**
     * Child entity type.
     *
     * @return childEntityType
     */
    @javax.annotation.Nullable
    public String getChildEntityType() {
        return childEntityType;
    }

    public void setChildEntityType(String childEntityType) {
        this.childEntityType = childEntityType;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetPersonalizationDataInput getPersonalizationDataInput = (GetPersonalizationDataInput) o;
        return Objects.equals(this.spaceId, getPersonalizationDataInput.spaceId)
                && Objects.equals(this.entityType, getPersonalizationDataInput.entityType)
                && Objects.equals(this.entityId, getPersonalizationDataInput.entityId)
                && Objects.equals(
                        this.childEntityType, getPersonalizationDataInput.childEntityType);
    }

    @Override
    public int hashCode() {
        return Objects.hash(spaceId, entityType, entityId, childEntityType);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetPersonalizationDataInput {\n");
        sb.append("    spaceId: ").append(toIndentedString(spaceId)).append("\n");
        sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
        sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
        sb.append("    childEntityType: ").append(toIndentedString(childEntityType)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("spaceId");
        openapiFields.add("entityType");
        openapiFields.add("entityId");
        openapiFields.add("childEntityType");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("spaceId");
        openapiRequiredFields.add("entityType");
        openapiRequiredFields.add("entityId");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     GetPersonalizationDataInput
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetPersonalizationDataInput.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in GetPersonalizationDataInput is not"
                                        + " found in the empty JSON string",
                                GetPersonalizationDataInput.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetPersonalizationDataInput.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `GetPersonalizationDataInput` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : GetPersonalizationDataInput.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("spaceId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `spaceId` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("spaceId").toString()));
        }
        if (!jsonObj.get("entityType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `entityType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("entityType").toString()));
        }
        if (!jsonObj.get("entityId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `entityId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("entityId").toString()));
        }
        if ((jsonObj.get("childEntityType") != null && !jsonObj.get("childEntityType").isJsonNull())
                && !jsonObj.get("childEntityType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `childEntityType` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("childEntityType").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetPersonalizationDataInput.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetPersonalizationDataInput' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetPersonalizationDataInput> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(GetPersonalizationDataInput.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<GetPersonalizationDataInput>() {
                        @Override
                        public void write(JsonWriter out, GetPersonalizationDataInput value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public GetPersonalizationDataInput read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of GetPersonalizationDataInput given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetPersonalizationDataInput
     * @throws IOException if the JSON string is invalid with respect to GetPersonalizationDataInput
     */
    public static GetPersonalizationDataInput fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, GetPersonalizationDataInput.class);
    }

    /**
     * Convert an instance of GetPersonalizationDataInput to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
