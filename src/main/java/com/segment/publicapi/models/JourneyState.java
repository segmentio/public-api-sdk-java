/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

public class JourneyState extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(JourneyState.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!JourneyState.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'JourneyState' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<EventEntryState> adapterEventEntryState =
                    gson.getDelegateAdapter(this, TypeToken.get(EventEntryState.class));
            final TypeAdapter<AudienceEntryState> adapterAudienceEntryState =
                    gson.getDelegateAdapter(this, TypeToken.get(AudienceEntryState.class));
            final TypeAdapter<ExitState> adapterExitState =
                    gson.getDelegateAdapter(this, TypeToken.get(ExitState.class));
            final TypeAdapter<DestinationState> adapterDestinationState =
                    gson.getDelegateAdapter(this, TypeToken.get(DestinationState.class));
            final TypeAdapter<SimpleDelayState> adapterSimpleDelayState =
                    gson.getDelegateAdapter(this, TypeToken.get(SimpleDelayState.class));
            final TypeAdapter<EventSplitWithTimeoutState> adapterEventSplitWithTimeoutState =
                    gson.getDelegateAdapter(this, TypeToken.get(EventSplitWithTimeoutState.class));
            final TypeAdapter<ConditionSplitState> adapterConditionSplitState =
                    gson.getDelegateAdapter(this, TypeToken.get(ConditionSplitState.class));
            final TypeAdapter<RandomSplitState> adapterRandomSplitState =
                    gson.getDelegateAdapter(this, TypeToken.get(RandomSplitState.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<JourneyState>() {
                        @Override
                        public void write(JsonWriter out, JourneyState value) throws IOException {
                            if (value == null || value.getActualInstance() == null) {
                                elementAdapter.write(out, null);
                                return;
                            }

                            // check if the actual instance is of the type `EventEntryState`
                            if (value.getActualInstance() instanceof EventEntryState) {
                                JsonElement element =
                                        adapterEventEntryState.toJsonTree(
                                                (EventEntryState) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            // check if the actual instance is of the type `AudienceEntryState`
                            if (value.getActualInstance() instanceof AudienceEntryState) {
                                JsonElement element =
                                        adapterAudienceEntryState.toJsonTree(
                                                (AudienceEntryState) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            // check if the actual instance is of the type `ExitState`
                            if (value.getActualInstance() instanceof ExitState) {
                                JsonElement element =
                                        adapterExitState.toJsonTree(
                                                (ExitState) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            // check if the actual instance is of the type `DestinationState`
                            if (value.getActualInstance() instanceof DestinationState) {
                                JsonElement element =
                                        adapterDestinationState.toJsonTree(
                                                (DestinationState) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            // check if the actual instance is of the type `SimpleDelayState`
                            if (value.getActualInstance() instanceof SimpleDelayState) {
                                JsonElement element =
                                        adapterSimpleDelayState.toJsonTree(
                                                (SimpleDelayState) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            // check if the actual instance is of the type
                            // `EventSplitWithTimeoutState`
                            if (value.getActualInstance() instanceof EventSplitWithTimeoutState) {
                                JsonElement element =
                                        adapterEventSplitWithTimeoutState.toJsonTree(
                                                (EventSplitWithTimeoutState)
                                                        value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            // check if the actual instance is of the type `ConditionSplitState`
                            if (value.getActualInstance() instanceof ConditionSplitState) {
                                JsonElement element =
                                        adapterConditionSplitState.toJsonTree(
                                                (ConditionSplitState) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            // check if the actual instance is of the type `RandomSplitState`
                            if (value.getActualInstance() instanceof RandomSplitState) {
                                JsonElement element =
                                        adapterRandomSplitState.toJsonTree(
                                                (RandomSplitState) value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            throw new IOException(
                                    "Failed to serialize as the type doesn't match anyOf schemae:"
                                            + " AudienceEntryState, ConditionSplitState,"
                                            + " DestinationState, EventEntryState,"
                                            + " EventSplitWithTimeoutState, ExitState,"
                                            + " RandomSplitState, SimpleDelayState");
                        }

                        @Override
                        public JourneyState read(JsonReader in) throws IOException {
                            Object deserialized = null;
                            JsonElement jsonElement = elementAdapter.read(in);

                            ArrayList<String> errorMessages = new ArrayList<>();
                            TypeAdapter actualAdapter = elementAdapter;

                            // deserialize EventEntryState
                            try {
                                // validate the JSON object to see if any exception is thrown
                                EventEntryState.validateJsonElement(jsonElement);
                                actualAdapter = adapterEventEntryState;
                                JourneyState ret = new JourneyState();
                                ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                                return ret;
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for EventEntryState failed with"
                                                        + " `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'EventEntryState'",
                                        e);
                            }
                            // deserialize AudienceEntryState
                            try {
                                // validate the JSON object to see if any exception is thrown
                                AudienceEntryState.validateJsonElement(jsonElement);
                                actualAdapter = adapterAudienceEntryState;
                                JourneyState ret = new JourneyState();
                                ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                                return ret;
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for AudienceEntryState failed with"
                                                        + " `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'AudienceEntryState'",
                                        e);
                            }
                            // deserialize ExitState
                            try {
                                // validate the JSON object to see if any exception is thrown
                                ExitState.validateJsonElement(jsonElement);
                                actualAdapter = adapterExitState;
                                JourneyState ret = new JourneyState();
                                ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                                return ret;
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for ExitState failed with `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'ExitState'",
                                        e);
                            }
                            // deserialize DestinationState
                            try {
                                // validate the JSON object to see if any exception is thrown
                                DestinationState.validateJsonElement(jsonElement);
                                actualAdapter = adapterDestinationState;
                                JourneyState ret = new JourneyState();
                                ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                                return ret;
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for DestinationState failed with"
                                                        + " `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'DestinationState'",
                                        e);
                            }
                            // deserialize SimpleDelayState
                            try {
                                // validate the JSON object to see if any exception is thrown
                                SimpleDelayState.validateJsonElement(jsonElement);
                                actualAdapter = adapterSimpleDelayState;
                                JourneyState ret = new JourneyState();
                                ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                                return ret;
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for SimpleDelayState failed with"
                                                        + " `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'SimpleDelayState'",
                                        e);
                            }
                            // deserialize EventSplitWithTimeoutState
                            try {
                                // validate the JSON object to see if any exception is thrown
                                EventSplitWithTimeoutState.validateJsonElement(jsonElement);
                                actualAdapter = adapterEventSplitWithTimeoutState;
                                JourneyState ret = new JourneyState();
                                ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                                return ret;
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for EventSplitWithTimeoutState"
                                                        + " failed with `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema"
                                                + " 'EventSplitWithTimeoutState'",
                                        e);
                            }
                            // deserialize ConditionSplitState
                            try {
                                // validate the JSON object to see if any exception is thrown
                                ConditionSplitState.validateJsonElement(jsonElement);
                                actualAdapter = adapterConditionSplitState;
                                JourneyState ret = new JourneyState();
                                ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                                return ret;
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for ConditionSplitState failed"
                                                        + " with `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'ConditionSplitState'",
                                        e);
                            }
                            // deserialize RandomSplitState
                            try {
                                // validate the JSON object to see if any exception is thrown
                                RandomSplitState.validateJsonElement(jsonElement);
                                actualAdapter = adapterRandomSplitState;
                                JourneyState ret = new JourneyState();
                                ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                                return ret;
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for RandomSplitState failed with"
                                                        + " `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'RandomSplitState'",
                                        e);
                            }

                            throw new IOException(
                                    String.format(
                                            "Failed deserialization for JourneyState: no class"
                                                + " matches result, expected at least 1. Detailed"
                                                + " failure message for anyOf schemas: %s. JSON:"
                                                + " %s",
                                            errorMessages, jsonElement.toString()));
                        }
                    }.nullSafe();
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public JourneyState() {
        super("anyOf", Boolean.FALSE);
    }

    public JourneyState(AudienceEntryState o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public JourneyState(ConditionSplitState o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public JourneyState(DestinationState o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public JourneyState(EventEntryState o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public JourneyState(EventSplitWithTimeoutState o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public JourneyState(ExitState o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public JourneyState(RandomSplitState o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public JourneyState(SimpleDelayState o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("EventEntryState", EventEntryState.class);
        schemas.put("AudienceEntryState", AudienceEntryState.class);
        schemas.put("ExitState", ExitState.class);
        schemas.put("DestinationState", DestinationState.class);
        schemas.put("SimpleDelayState", SimpleDelayState.class);
        schemas.put("EventSplitWithTimeoutState", EventSplitWithTimeoutState.class);
        schemas.put("ConditionSplitState", ConditionSplitState.class);
        schemas.put("RandomSplitState", RandomSplitState.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return JourneyState.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check the instance parameter is valid
     * against the anyOf child schemas: AudienceEntryState, ConditionSplitState, DestinationState,
     * EventEntryState, EventSplitWithTimeoutState, ExitState, RandomSplitState, SimpleDelayState
     *
     * <p>It could be an instance of the 'anyOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof EventEntryState) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AudienceEntryState) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ExitState) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DestinationState) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SimpleDelayState) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventSplitWithTimeoutState) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ConditionSplitState) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RandomSplitState) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException(
                "Invalid instance type. Must be AudienceEntryState, ConditionSplitState,"
                    + " DestinationState, EventEntryState, EventSplitWithTimeoutState, ExitState,"
                    + " RandomSplitState, SimpleDelayState");
    }

    /**
     * Get the actual instance, which can be the following: AudienceEntryState, ConditionSplitState,
     * DestinationState, EventEntryState, EventSplitWithTimeoutState, ExitState, RandomSplitState,
     * SimpleDelayState
     *
     * @return The actual instance (AudienceEntryState, ConditionSplitState, DestinationState,
     *     EventEntryState, EventSplitWithTimeoutState, ExitState, RandomSplitState,
     *     SimpleDelayState)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `EventEntryState`. If the actual instance is not
     * `EventEntryState`, the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventEntryState`
     * @throws ClassCastException if the instance is not `EventEntryState`
     */
    public EventEntryState getEventEntryState() throws ClassCastException {
        return (EventEntryState) super.getActualInstance();
    }

    /**
     * Get the actual instance of `AudienceEntryState`. If the actual instance is not
     * `AudienceEntryState`, the ClassCastException will be thrown.
     *
     * @return The actual instance of `AudienceEntryState`
     * @throws ClassCastException if the instance is not `AudienceEntryState`
     */
    public AudienceEntryState getAudienceEntryState() throws ClassCastException {
        return (AudienceEntryState) super.getActualInstance();
    }

    /**
     * Get the actual instance of `ExitState`. If the actual instance is not `ExitState`, the
     * ClassCastException will be thrown.
     *
     * @return The actual instance of `ExitState`
     * @throws ClassCastException if the instance is not `ExitState`
     */
    public ExitState getExitState() throws ClassCastException {
        return (ExitState) super.getActualInstance();
    }

    /**
     * Get the actual instance of `DestinationState`. If the actual instance is not
     * `DestinationState`, the ClassCastException will be thrown.
     *
     * @return The actual instance of `DestinationState`
     * @throws ClassCastException if the instance is not `DestinationState`
     */
    public DestinationState getDestinationState() throws ClassCastException {
        return (DestinationState) super.getActualInstance();
    }

    /**
     * Get the actual instance of `SimpleDelayState`. If the actual instance is not
     * `SimpleDelayState`, the ClassCastException will be thrown.
     *
     * @return The actual instance of `SimpleDelayState`
     * @throws ClassCastException if the instance is not `SimpleDelayState`
     */
    public SimpleDelayState getSimpleDelayState() throws ClassCastException {
        return (SimpleDelayState) super.getActualInstance();
    }

    /**
     * Get the actual instance of `EventSplitWithTimeoutState`. If the actual instance is not
     * `EventSplitWithTimeoutState`, the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventSplitWithTimeoutState`
     * @throws ClassCastException if the instance is not `EventSplitWithTimeoutState`
     */
    public EventSplitWithTimeoutState getEventSplitWithTimeoutState() throws ClassCastException {
        return (EventSplitWithTimeoutState) super.getActualInstance();
    }

    /**
     * Get the actual instance of `ConditionSplitState`. If the actual instance is not
     * `ConditionSplitState`, the ClassCastException will be thrown.
     *
     * @return The actual instance of `ConditionSplitState`
     * @throws ClassCastException if the instance is not `ConditionSplitState`
     */
    public ConditionSplitState getConditionSplitState() throws ClassCastException {
        return (ConditionSplitState) super.getActualInstance();
    }

    /**
     * Get the actual instance of `RandomSplitState`. If the actual instance is not
     * `RandomSplitState`, the ClassCastException will be thrown.
     *
     * @return The actual instance of `RandomSplitState`
     * @throws ClassCastException if the instance is not `RandomSplitState`
     */
    public RandomSplitState getRandomSplitState() throws ClassCastException {
        return (RandomSplitState) super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to JourneyState
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate anyOf schemas one by one
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with EventEntryState
        try {
            EventEntryState.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for EventEntryState failed with `%s`.",
                            e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AudienceEntryState
        try {
            AudienceEntryState.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for AudienceEntryState failed with `%s`.",
                            e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ExitState
        try {
            ExitState.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for ExitState failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DestinationState
        try {
            DestinationState.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for DestinationState failed with `%s`.",
                            e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SimpleDelayState
        try {
            SimpleDelayState.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for SimpleDelayState failed with `%s`.",
                            e.getMessage()));
            // continue to the next one
        }
        // validate the json string with EventSplitWithTimeoutState
        try {
            EventSplitWithTimeoutState.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for EventSplitWithTimeoutState failed with `%s`.",
                            e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ConditionSplitState
        try {
            ConditionSplitState.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for ConditionSplitState failed with `%s`.",
                            e.getMessage()));
            // continue to the next one
        }
        // validate the json string with RandomSplitState
        try {
            RandomSplitState.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for RandomSplitState failed with `%s`.",
                            e.getMessage()));
            // continue to the next one
        }
        throw new IOException(
                String.format(
                        "The JSON string is invalid for JourneyState with anyOf schemas:"
                            + " AudienceEntryState, ConditionSplitState, DestinationState,"
                            + " EventEntryState, EventSplitWithTimeoutState, ExitState,"
                            + " RandomSplitState, SimpleDelayState. no class match the result,"
                            + " expected at least 1. Detailed failure message for anyOf schemas:"
                            + " %s. JSON: %s",
                        errorMessages, jsonElement.toString()));
    }

    /**
     * Create an instance of JourneyState given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of JourneyState
     * @throws IOException if the JSON string is invalid with respect to JourneyState
     */
    public static JourneyState fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, JourneyState.class);
    }

    /**
     * Convert an instance of JourneyState to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
