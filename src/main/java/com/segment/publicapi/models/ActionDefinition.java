/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** ActionDefinition */
public class ActionDefinition {
    public static final String SERIALIZED_NAME_ID = "id";

    @SerializedName(SERIALIZED_NAME_ID)
    private String id;

    public static final String SERIALIZED_NAME_USE_DEFAULT_MAPPINGS = "useDefaultMappings";

    @SerializedName(SERIALIZED_NAME_USE_DEFAULT_MAPPINGS)
    private Boolean useDefaultMappings;

    public static final String SERIALIZED_NAME_MAPPINGS = "mappings";

    @SerializedName(SERIALIZED_NAME_MAPPINGS)
    private Map<String, Object> mappings = new HashMap<>();

    public static final String SERIALIZED_NAME_ACTION_ID = "actionId";

    @SerializedName(SERIALIZED_NAME_ACTION_ID)
    private String actionId;

    public static final String SERIALIZED_NAME_ENABLED = "enabled";

    @SerializedName(SERIALIZED_NAME_ENABLED)
    private Boolean enabled;

    public static final String SERIALIZED_NAME_NAME = "name";

    @SerializedName(SERIALIZED_NAME_NAME)
    private String name;

    public ActionDefinition() {}

    public ActionDefinition id(String id) {

        this.id = id;
        return this;
    }

    /**
     * Get id
     *
     * @return id
     */
    @javax.annotation.Nullable
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public ActionDefinition useDefaultMappings(Boolean useDefaultMappings) {

        this.useDefaultMappings = useDefaultMappings;
        return this;
    }

    /**
     * Get useDefaultMappings
     *
     * @return useDefaultMappings
     */
    @javax.annotation.Nullable
    public Boolean getUseDefaultMappings() {
        return useDefaultMappings;
    }

    public void setUseDefaultMappings(Boolean useDefaultMappings) {
        this.useDefaultMappings = useDefaultMappings;
    }

    public ActionDefinition mappings(Map<String, Object> mappings) {

        this.mappings = mappings;
        return this;
    }

    public ActionDefinition putMappingsItem(String key, Object mappingsItem) {
        if (this.mappings == null) {
            this.mappings = new HashMap<>();
        }
        this.mappings.put(key, mappingsItem);
        return this;
    }

    /**
     * Get mappings
     *
     * @return mappings
     */
    @javax.annotation.Nonnull
    public Map<String, Object> getMappings() {
        return mappings;
    }

    public void setMappings(Map<String, Object> mappings) {
        this.mappings = mappings;
    }

    public ActionDefinition actionId(String actionId) {

        this.actionId = actionId;
        return this;
    }

    /**
     * Get actionId
     *
     * @return actionId
     */
    @javax.annotation.Nonnull
    public String getActionId() {
        return actionId;
    }

    public void setActionId(String actionId) {
        this.actionId = actionId;
    }

    public ActionDefinition enabled(Boolean enabled) {

        this.enabled = enabled;
        return this;
    }

    /**
     * Get enabled
     *
     * @return enabled
     */
    @javax.annotation.Nullable
    public Boolean getEnabled() {
        return enabled;
    }

    public void setEnabled(Boolean enabled) {
        this.enabled = enabled;
    }

    public ActionDefinition name(String name) {

        this.name = name;
        return this;
    }

    /**
     * Get name
     *
     * @return name
     */
    @javax.annotation.Nullable
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ActionDefinition actionDefinition = (ActionDefinition) o;
        return Objects.equals(this.id, actionDefinition.id)
                && Objects.equals(this.useDefaultMappings, actionDefinition.useDefaultMappings)
                && Objects.equals(this.mappings, actionDefinition.mappings)
                && Objects.equals(this.actionId, actionDefinition.actionId)
                && Objects.equals(this.enabled, actionDefinition.enabled)
                && Objects.equals(this.name, actionDefinition.name);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, useDefaultMappings, mappings, actionId, enabled, name);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ActionDefinition {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    useDefaultMappings: ")
                .append(toIndentedString(useDefaultMappings))
                .append("\n");
        sb.append("    mappings: ").append(toIndentedString(mappings)).append("\n");
        sb.append("    actionId: ").append(toIndentedString(actionId)).append("\n");
        sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("id");
        openapiFields.add("useDefaultMappings");
        openapiFields.add("mappings");
        openapiFields.add("actionId");
        openapiFields.add("enabled");
        openapiFields.add("name");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("mappings");
        openapiRequiredFields.add("actionId");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to ActionDefinition
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!ActionDefinition.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in ActionDefinition is not found in the"
                                        + " empty JSON string",
                                ActionDefinition.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!ActionDefinition.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `ActionDefinition` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : ActionDefinition.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull())
                && !jsonObj.get("id").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `id` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("id").toString()));
        }
        if (!jsonObj.get("actionId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `actionId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("actionId").toString()));
        }
        if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull())
                && !jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `name` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("name").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ActionDefinition.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ActionDefinition' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ActionDefinition> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(ActionDefinition.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<ActionDefinition>() {
                        @Override
                        public void write(JsonWriter out, ActionDefinition value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public ActionDefinition read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of ActionDefinition given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ActionDefinition
     * @throws IOException if the JSON string is invalid with respect to ActionDefinition
     */
    public static ActionDefinition fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, ActionDefinition.class);
    }

    /**
     * Convert an instance of ActionDefinition to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
