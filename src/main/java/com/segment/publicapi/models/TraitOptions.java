/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** TraitOptions */
public class TraitOptions {
    public static final String SERIALIZED_NAME_INCLUDE_HISTORICAL_DATA = "includeHistoricalData";

    @SerializedName(SERIALIZED_NAME_INCLUDE_HISTORICAL_DATA)
    private Boolean includeHistoricalData;

    public static final String SERIALIZED_NAME_INCLUDE_ANONYMOUS_USERS = "includeAnonymousUsers";

    @SerializedName(SERIALIZED_NAME_INCLUDE_ANONYMOUS_USERS)
    private Boolean includeAnonymousUsers;

    public TraitOptions() {}

    public TraitOptions includeHistoricalData(Boolean includeHistoricalData) {

        this.includeHistoricalData = includeHistoricalData;
        return this;
    }

    /**
     * Determines whether data prior to the computed trait being created is included when
     * determining the computed trait value. Note that including historical data may be needed in
     * order to properly handle the definition specified. In these cases, Segment will automatically
     * handle including historical data and the response will return the includeHistoricalData
     * parameter as true.
     *
     * @return includeHistoricalData
     */
    @javax.annotation.Nullable
    public Boolean getIncludeHistoricalData() {
        return includeHistoricalData;
    }

    public void setIncludeHistoricalData(Boolean includeHistoricalData) {
        this.includeHistoricalData = includeHistoricalData;
    }

    public TraitOptions includeAnonymousUsers(Boolean includeAnonymousUsers) {

        this.includeAnonymousUsers = includeAnonymousUsers;
        return this;
    }

    /**
     * Determines whether anonymous users should be included when determining the computed trait
     * value.
     *
     * @return includeAnonymousUsers
     */
    @javax.annotation.Nullable
    public Boolean getIncludeAnonymousUsers() {
        return includeAnonymousUsers;
    }

    public void setIncludeAnonymousUsers(Boolean includeAnonymousUsers) {
        this.includeAnonymousUsers = includeAnonymousUsers;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TraitOptions traitOptions = (TraitOptions) o;
        return Objects.equals(this.includeHistoricalData, traitOptions.includeHistoricalData)
                && Objects.equals(this.includeAnonymousUsers, traitOptions.includeAnonymousUsers);
    }

    @Override
    public int hashCode() {
        return Objects.hash(includeHistoricalData, includeAnonymousUsers);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TraitOptions {\n");
        sb.append("    includeHistoricalData: ")
                .append(toIndentedString(includeHistoricalData))
                .append("\n");
        sb.append("    includeAnonymousUsers: ")
                .append(toIndentedString(includeAnonymousUsers))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("includeHistoricalData");
        openapiFields.add("includeAnonymousUsers");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to TraitOptions
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!TraitOptions.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in TraitOptions is not found in the empty"
                                        + " JSON string",
                                TraitOptions.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!TraitOptions.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `TraitOptions` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!TraitOptions.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'TraitOptions' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<TraitOptions> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(TraitOptions.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<TraitOptions>() {
                        @Override
                        public void write(JsonWriter out, TraitOptions value) throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public TraitOptions read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of TraitOptions given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of TraitOptions
     * @throws IOException if the JSON string is invalid with respect to TraitOptions
     */
    public static TraitOptions fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, TraitOptions.class);
    }

    /**
     * Convert an instance of TraitOptions to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
