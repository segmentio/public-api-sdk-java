/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * The version of the OpenAPI document: 33.0.0
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;


import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/**
 * Input of the Destination filter to preview. For guidance on using FQL, see the Segment
 * documentation site.
 */
@ApiModel(
        description =
                "Input of the Destination filter to preview. For guidance on using FQL, see the"
                        + " Segment documentation site.")
public class PreviewDestinationFilterV1Input {
    public static final String SERIALIZED_NAME_FILTER = "filter";

    @SerializedName(SERIALIZED_NAME_FILTER)
    private Filter filter;

    public static final String SERIALIZED_NAME_PAYLOAD = "payload";

    @SerializedName(SERIALIZED_NAME_PAYLOAD)
    private Map<String, Object> payload = new HashMap<>();

    public PreviewDestinationFilterV1Input() {}

    public PreviewDestinationFilterV1Input filter(Filter filter) {

        this.filter = filter;
        return this;
    }

    /**
     * Get filter
     *
     * @return filter
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    public Filter getFilter() {
        return filter;
    }

    public void setFilter(Filter filter) {
        this.filter = filter;
    }

    public PreviewDestinationFilterV1Input payload(Map<String, Object> payload) {

        this.payload = payload;
        return this;
    }

    public PreviewDestinationFilterV1Input putPayloadItem(String key, Object payloadItem) {
        this.payload.put(key, payloadItem);
        return this;
    }

    /**
     * The JSON payload to apply the filter to.
     *
     * @return payload
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "The JSON payload to apply the filter to.")
    public Map<String, Object> getPayload() {
        return payload;
    }

    public void setPayload(Map<String, Object> payload) {
        this.payload = payload;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PreviewDestinationFilterV1Input previewDestinationFilterV1Input =
                (PreviewDestinationFilterV1Input) o;
        return Objects.equals(this.filter, previewDestinationFilterV1Input.filter)
                && Objects.equals(this.payload, previewDestinationFilterV1Input.payload);
    }

    @Override
    public int hashCode() {
        return Objects.hash(filter, payload);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PreviewDestinationFilterV1Input {\n");
        sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
        sb.append("    payload: ").append(toIndentedString(payload)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("filter");
        openapiFields.add("payload");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("filter");
        openapiRequiredFields.add("payload");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to
     *     PreviewDestinationFilterV1Input
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!PreviewDestinationFilterV1Input.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in PreviewDestinationFilterV1Input is not"
                                        + " found in the empty JSON string",
                                PreviewDestinationFilterV1Input.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!PreviewDestinationFilterV1Input.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `PreviewDestinationFilterV1Input` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : PreviewDestinationFilterV1Input.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonObj.toString()));
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!PreviewDestinationFilterV1Input.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'PreviewDestinationFilterV1Input' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<PreviewDestinationFilterV1Input> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(PreviewDestinationFilterV1Input.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<PreviewDestinationFilterV1Input>() {
                        @Override
                        public void write(JsonWriter out, PreviewDestinationFilterV1Input value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public PreviewDestinationFilterV1Input read(JsonReader in)
                                throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of PreviewDestinationFilterV1Input given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of PreviewDestinationFilterV1Input
     * @throws IOException if the JSON string is invalid with respect to
     *     PreviewDestinationFilterV1Input
     */
    public static PreviewDestinationFilterV1Input fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, PreviewDestinationFilterV1Input.class);
    }

    /**
     * Convert an instance of PreviewDestinationFilterV1Input to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
