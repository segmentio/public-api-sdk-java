/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * The version of the OpenAPI document: 32.0.4
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;


import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/**
 * SourceEventVolume represents a time series of event volume for a Workspace broken down by the
 * dimensions which the customer specifies (optional parameters).
 */
@ApiModel(
        description =
                "SourceEventVolume represents a time series of event volume for a Workspace broken"
                        + " down by the dimensions which the customer specifies (optional"
                        + " parameters).")
public class SourceEventVolumeV1 {
    public static final String SERIALIZED_NAME_SOURCE = "source";

    @SerializedName(SERIALIZED_NAME_SOURCE)
    private Source source;

    public static final String SERIALIZED_NAME_EVENT_NAME = "eventName";

    @SerializedName(SERIALIZED_NAME_EVENT_NAME)
    private String eventName;

    public static final String SERIALIZED_NAME_EVENT_TYPE = "eventType";

    @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
    private String eventType;

    public static final String SERIALIZED_NAME_TOTAL = "total";

    @SerializedName(SERIALIZED_NAME_TOTAL)
    private BigDecimal total;

    public static final String SERIALIZED_NAME_SERIES = "series";

    @SerializedName(SERIALIZED_NAME_SERIES)
    private List<SourceEventVolumeDatapointV1> series = new ArrayList<>();

    public SourceEventVolumeV1() {}

    public SourceEventVolumeV1 source(Source source) {

        this.source = source;
        return this;
    }

    /**
     * Get source
     *
     * @return source
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    public Source getSource() {
        return source;
    }

    public void setSource(Source source) {
        this.source = source;
    }

    public SourceEventVolumeV1 eventName(String eventName) {

        this.eventName = eventName;
        return this;
    }

    /**
     * The name of the event, if applicable.
     *
     * @return eventName
     */
    @javax.annotation.Nullable
    @ApiModelProperty(value = "The name of the event, if applicable.")
    public String getEventName() {
        return eventName;
    }

    public void setEventName(String eventName) {
        this.eventName = eventName;
    }

    public SourceEventVolumeV1 eventType(String eventType) {

        this.eventType = eventType;
        return this;
    }

    /**
     * The event type, if applicable.
     *
     * @return eventType
     */
    @javax.annotation.Nullable
    @ApiModelProperty(value = "The event type, if applicable.")
    public String getEventType() {
        return eventType;
    }

    public void setEventType(String eventType) {
        this.eventType = eventType;
    }

    public SourceEventVolumeV1 total(BigDecimal total) {

        this.total = total;
        return this;
    }

    /**
     * The total count for all events in the requested time frame.
     *
     * @return total
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(
            required = true,
            value = "The total count for all events in the requested time frame.")
    public BigDecimal getTotal() {
        return total;
    }

    public void setTotal(BigDecimal total) {
        this.total = total;
    }

    public SourceEventVolumeV1 series(List<SourceEventVolumeDatapointV1> series) {

        this.series = series;
        return this;
    }

    public SourceEventVolumeV1 addSeriesItem(SourceEventVolumeDatapointV1 seriesItem) {
        this.series.add(seriesItem);
        return this;
    }

    /**
     * A list of the event counts broken down by the requested granularity.
     *
     * @return series
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(
            required = true,
            value = "A list of the event counts broken down by the requested granularity.")
    public List<SourceEventVolumeDatapointV1> getSeries() {
        return series;
    }

    public void setSeries(List<SourceEventVolumeDatapointV1> series) {
        this.series = series;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceEventVolumeV1 sourceEventVolumeV1 = (SourceEventVolumeV1) o;
        return Objects.equals(this.source, sourceEventVolumeV1.source)
                && Objects.equals(this.eventName, sourceEventVolumeV1.eventName)
                && Objects.equals(this.eventType, sourceEventVolumeV1.eventType)
                && Objects.equals(this.total, sourceEventVolumeV1.total)
                && Objects.equals(this.series, sourceEventVolumeV1.series);
    }

    @Override
    public int hashCode() {
        return Objects.hash(source, eventName, eventType, total, series);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SourceEventVolumeV1 {\n");
        sb.append("    source: ").append(toIndentedString(source)).append("\n");
        sb.append("    eventName: ").append(toIndentedString(eventName)).append("\n");
        sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
        sb.append("    total: ").append(toIndentedString(total)).append("\n");
        sb.append("    series: ").append(toIndentedString(series)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("source");
        openapiFields.add("eventName");
        openapiFields.add("eventType");
        openapiFields.add("total");
        openapiFields.add("series");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("source");
        openapiRequiredFields.add("total");
        openapiRequiredFields.add("series");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to SourceEventVolumeV1
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!SourceEventVolumeV1.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in SourceEventVolumeV1 is not found in"
                                        + " the empty JSON string",
                                SourceEventVolumeV1.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!SourceEventVolumeV1.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `SourceEventVolumeV1` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : SourceEventVolumeV1.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonObj.toString()));
            }
        }
        if ((jsonObj.get("eventName") != null && !jsonObj.get("eventName").isJsonNull())
                && !jsonObj.get("eventName").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `eventName` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("eventName").toString()));
        }
        if ((jsonObj.get("eventType") != null && !jsonObj.get("eventType").isJsonNull())
                && !jsonObj.get("eventType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `eventType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("eventType").toString()));
        }
        // ensure the json data is an array
        if (!jsonObj.get("series").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `series` to be an array in the JSON string but got"
                                    + " `%s`",
                            jsonObj.get("series").toString()));
        }

        JsonArray jsonArrayseries = jsonObj.getAsJsonArray("series");
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!SourceEventVolumeV1.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'SourceEventVolumeV1' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<SourceEventVolumeV1> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(SourceEventVolumeV1.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<SourceEventVolumeV1>() {
                        @Override
                        public void write(JsonWriter out, SourceEventVolumeV1 value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public SourceEventVolumeV1 read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of SourceEventVolumeV1 given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of SourceEventVolumeV1
     * @throws IOException if the JSON string is invalid with respect to SourceEventVolumeV1
     */
    public static SourceEventVolumeV1 fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, SourceEventVolumeV1.class);
    }

    /**
     * Convert an instance of SourceEventVolumeV1 to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
