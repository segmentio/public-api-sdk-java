/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** Input to create an audience preview. */
public class CreateAudiencePreviewAlphaInput {
    public static final String SERIALIZED_NAME_DEFINITION = "definition";

    @SerializedName(SERIALIZED_NAME_DEFINITION)
    private AudienceDefinitionWithoutType definition;

    /** Discriminator denoting the audience&#39;s product type. Possible values: USERS, ACCOUNTS. */
    @JsonAdapter(AudienceTypeEnum.Adapter.class)
    public enum AudienceTypeEnum {
        ACCOUNTS("ACCOUNTS"),

        USERS("USERS");

        private String value;

        AudienceTypeEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static AudienceTypeEnum fromValue(String value) {
            for (AudienceTypeEnum b : AudienceTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<AudienceTypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final AudienceTypeEnum enumeration)
                    throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public AudienceTypeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return AudienceTypeEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_AUDIENCE_TYPE = "audienceType";

    @SerializedName(SERIALIZED_NAME_AUDIENCE_TYPE)
    private AudienceTypeEnum audienceType;

    public static final String SERIALIZED_NAME_OPTIONS = "options";

    @SerializedName(SERIALIZED_NAME_OPTIONS)
    private CreateAudiencePreviewOptions options;

    public CreateAudiencePreviewAlphaInput() {}

    public CreateAudiencePreviewAlphaInput definition(AudienceDefinitionWithoutType definition) {

        this.definition = definition;
        return this;
    }

    /**
     * Get definition
     *
     * @return definition
     */
    @javax.annotation.Nonnull
    public AudienceDefinitionWithoutType getDefinition() {
        return definition;
    }

    public void setDefinition(AudienceDefinitionWithoutType definition) {
        this.definition = definition;
    }

    public CreateAudiencePreviewAlphaInput audienceType(AudienceTypeEnum audienceType) {

        this.audienceType = audienceType;
        return this;
    }

    /**
     * Discriminator denoting the audience&#39;s product type. Possible values: USERS, ACCOUNTS.
     *
     * @return audienceType
     */
    @javax.annotation.Nonnull
    public AudienceTypeEnum getAudienceType() {
        return audienceType;
    }

    public void setAudienceType(AudienceTypeEnum audienceType) {
        this.audienceType = audienceType;
    }

    public CreateAudiencePreviewAlphaInput options(CreateAudiencePreviewOptions options) {

        this.options = options;
        return this;
    }

    /**
     * Get options
     *
     * @return options
     */
    @javax.annotation.Nullable
    public CreateAudiencePreviewOptions getOptions() {
        return options;
    }

    public void setOptions(CreateAudiencePreviewOptions options) {
        this.options = options;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateAudiencePreviewAlphaInput createAudiencePreviewAlphaInput =
                (CreateAudiencePreviewAlphaInput) o;
        return Objects.equals(this.definition, createAudiencePreviewAlphaInput.definition)
                && Objects.equals(this.audienceType, createAudiencePreviewAlphaInput.audienceType)
                && Objects.equals(this.options, createAudiencePreviewAlphaInput.options);
    }

    @Override
    public int hashCode() {
        return Objects.hash(definition, audienceType, options);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CreateAudiencePreviewAlphaInput {\n");
        sb.append("    definition: ").append(toIndentedString(definition)).append("\n");
        sb.append("    audienceType: ").append(toIndentedString(audienceType)).append("\n");
        sb.append("    options: ").append(toIndentedString(options)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("definition");
        openapiFields.add("audienceType");
        openapiFields.add("options");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("definition");
        openapiRequiredFields.add("audienceType");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     CreateAudiencePreviewAlphaInput
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!CreateAudiencePreviewAlphaInput.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in CreateAudiencePreviewAlphaInput is not"
                                        + " found in the empty JSON string",
                                CreateAudiencePreviewAlphaInput.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!CreateAudiencePreviewAlphaInput.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `CreateAudiencePreviewAlphaInput` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : CreateAudiencePreviewAlphaInput.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        // validate the required field `definition`
        AudienceDefinitionWithoutType.validateJsonElement(jsonObj.get("definition"));
        if (!jsonObj.get("audienceType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `audienceType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("audienceType").toString()));
        }
        // validate the optional field `options`
        if (jsonObj.get("options") != null && !jsonObj.get("options").isJsonNull()) {
            CreateAudiencePreviewOptions.validateJsonElement(jsonObj.get("options"));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CreateAudiencePreviewAlphaInput.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CreateAudiencePreviewAlphaInput' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CreateAudiencePreviewAlphaInput> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(CreateAudiencePreviewAlphaInput.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<CreateAudiencePreviewAlphaInput>() {
                        @Override
                        public void write(JsonWriter out, CreateAudiencePreviewAlphaInput value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public CreateAudiencePreviewAlphaInput read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of CreateAudiencePreviewAlphaInput given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CreateAudiencePreviewAlphaInput
     * @throws IOException if the JSON string is invalid with respect to
     *     CreateAudiencePreviewAlphaInput
     */
    public static CreateAudiencePreviewAlphaInput fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CreateAudiencePreviewAlphaInput.class);
    }

    /**
     * Convert an instance of CreateAudiencePreviewAlphaInput to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
