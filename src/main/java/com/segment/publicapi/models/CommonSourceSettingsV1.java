/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * The version of the OpenAPI document: 32.0.4
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;


import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** CommonSourceSettingsV1 */
public class CommonSourceSettingsV1 {
    public static final String SERIALIZED_NAME_TRACK = "track";

    @SerializedName(SERIALIZED_NAME_TRACK)
    private Track track;

    public static final String SERIALIZED_NAME_IDENTIFY = "identify";

    @SerializedName(SERIALIZED_NAME_IDENTIFY)
    private Identify identify;

    public static final String SERIALIZED_NAME_GROUP = "group";

    @SerializedName(SERIALIZED_NAME_GROUP)
    private Group group;

    public static final String SERIALIZED_NAME_FORWARDING_VIOLATIONS_TO = "forwardingViolationsTo";

    @SerializedName(SERIALIZED_NAME_FORWARDING_VIOLATIONS_TO)
    private String forwardingViolationsTo;

    public static final String SERIALIZED_NAME_FORWARDING_BLOCKED_EVENTS_TO =
            "forwardingBlockedEventsTo";

    @SerializedName(SERIALIZED_NAME_FORWARDING_BLOCKED_EVENTS_TO)
    private String forwardingBlockedEventsTo;

    public CommonSourceSettingsV1() {}

    public CommonSourceSettingsV1 track(Track track) {

        this.track = track;
        return this;
    }

    /**
     * Get track
     *
     * @return track
     */
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    public Track getTrack() {
        return track;
    }

    public void setTrack(Track track) {
        this.track = track;
    }

    public CommonSourceSettingsV1 identify(Identify identify) {

        this.identify = identify;
        return this;
    }

    /**
     * Get identify
     *
     * @return identify
     */
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    public Identify getIdentify() {
        return identify;
    }

    public void setIdentify(Identify identify) {
        this.identify = identify;
    }

    public CommonSourceSettingsV1 group(Group group) {

        this.group = group;
        return this;
    }

    /**
     * Get group
     *
     * @return group
     */
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    public Group getGroup() {
        return group;
    }

    public void setGroup(Group group) {
        this.group = group;
    }

    public CommonSourceSettingsV1 forwardingViolationsTo(String forwardingViolationsTo) {

        this.forwardingViolationsTo = forwardingViolationsTo;
        return this;
    }

    /**
     * SourceId to forward violations to.
     *
     * @return forwardingViolationsTo
     */
    @javax.annotation.Nullable
    @ApiModelProperty(value = "SourceId to forward violations to.")
    public String getForwardingViolationsTo() {
        return forwardingViolationsTo;
    }

    public void setForwardingViolationsTo(String forwardingViolationsTo) {
        this.forwardingViolationsTo = forwardingViolationsTo;
    }

    public CommonSourceSettingsV1 forwardingBlockedEventsTo(String forwardingBlockedEventsTo) {

        this.forwardingBlockedEventsTo = forwardingBlockedEventsTo;
        return this;
    }

    /**
     * SourceId to forward blocked events to.
     *
     * @return forwardingBlockedEventsTo
     */
    @javax.annotation.Nullable
    @ApiModelProperty(value = "SourceId to forward blocked events to.")
    public String getForwardingBlockedEventsTo() {
        return forwardingBlockedEventsTo;
    }

    public void setForwardingBlockedEventsTo(String forwardingBlockedEventsTo) {
        this.forwardingBlockedEventsTo = forwardingBlockedEventsTo;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CommonSourceSettingsV1 commonSourceSettingsV1 = (CommonSourceSettingsV1) o;
        return Objects.equals(this.track, commonSourceSettingsV1.track)
                && Objects.equals(this.identify, commonSourceSettingsV1.identify)
                && Objects.equals(this.group, commonSourceSettingsV1.group)
                && Objects.equals(
                        this.forwardingViolationsTo, commonSourceSettingsV1.forwardingViolationsTo)
                && Objects.equals(
                        this.forwardingBlockedEventsTo,
                        commonSourceSettingsV1.forwardingBlockedEventsTo);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                track, identify, group, forwardingViolationsTo, forwardingBlockedEventsTo);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CommonSourceSettingsV1 {\n");
        sb.append("    track: ").append(toIndentedString(track)).append("\n");
        sb.append("    identify: ").append(toIndentedString(identify)).append("\n");
        sb.append("    group: ").append(toIndentedString(group)).append("\n");
        sb.append("    forwardingViolationsTo: ")
                .append(toIndentedString(forwardingViolationsTo))
                .append("\n");
        sb.append("    forwardingBlockedEventsTo: ")
                .append(toIndentedString(forwardingBlockedEventsTo))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("track");
        openapiFields.add("identify");
        openapiFields.add("group");
        openapiFields.add("forwardingViolationsTo");
        openapiFields.add("forwardingBlockedEventsTo");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to CommonSourceSettingsV1
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!CommonSourceSettingsV1.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in CommonSourceSettingsV1 is not found in"
                                        + " the empty JSON string",
                                CommonSourceSettingsV1.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!CommonSourceSettingsV1.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `CommonSourceSettingsV1` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }
        if ((jsonObj.get("forwardingViolationsTo") != null
                        && !jsonObj.get("forwardingViolationsTo").isJsonNull())
                && !jsonObj.get("forwardingViolationsTo").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `forwardingViolationsTo` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("forwardingViolationsTo").toString()));
        }
        if ((jsonObj.get("forwardingBlockedEventsTo") != null
                        && !jsonObj.get("forwardingBlockedEventsTo").isJsonNull())
                && !jsonObj.get("forwardingBlockedEventsTo").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `forwardingBlockedEventsTo` to be a primitive type"
                                    + " in the JSON string but got `%s`",
                            jsonObj.get("forwardingBlockedEventsTo").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CommonSourceSettingsV1.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CommonSourceSettingsV1' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CommonSourceSettingsV1> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(CommonSourceSettingsV1.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<CommonSourceSettingsV1>() {
                        @Override
                        public void write(JsonWriter out, CommonSourceSettingsV1 value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public CommonSourceSettingsV1 read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of CommonSourceSettingsV1 given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CommonSourceSettingsV1
     * @throws IOException if the JSON string is invalid with respect to CommonSourceSettingsV1
     */
    public static CommonSourceSettingsV1 fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CommonSourceSettingsV1.class);
    }

    /**
     * Convert an instance of CommonSourceSettingsV1 to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
