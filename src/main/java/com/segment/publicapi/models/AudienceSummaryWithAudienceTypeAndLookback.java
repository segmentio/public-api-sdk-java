/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** AudienceSummaryWithAudienceTypeAndLookback */
public class AudienceSummaryWithAudienceTypeAndLookback {
    public static final String SERIALIZED_NAME_COMPUTE_CADENCE = "computeCadence";

    @SerializedName(SERIALIZED_NAME_COMPUTE_CADENCE)
    private AudienceComputeCadence computeCadence;

    public static final String SERIALIZED_NAME_SIZE = "size";

    @SerializedName(SERIALIZED_NAME_SIZE)
    private AudienceSize size;

    public static final String SERIALIZED_NAME_OPTIONS = "options";

    @SerializedName(SERIALIZED_NAME_OPTIONS)
    private AudienceOptionsWithLookback options;

    public static final String SERIALIZED_NAME_SCHEDULES = "schedules";

    @SerializedName(SERIALIZED_NAME_SCHEDULES)
    private List<AudienceSchedule> schedules;

    public static final String SERIALIZED_NAME_ID = "id";

    @SerializedName(SERIALIZED_NAME_ID)
    private String id;

    public static final String SERIALIZED_NAME_SPACE_ID = "spaceId";

    @SerializedName(SERIALIZED_NAME_SPACE_ID)
    private String spaceId;

    public static final String SERIALIZED_NAME_NAME = "name";

    @SerializedName(SERIALIZED_NAME_NAME)
    private String name;

    public static final String SERIALIZED_NAME_DESCRIPTION = "description";

    @SerializedName(SERIALIZED_NAME_DESCRIPTION)
    private String description;

    public static final String SERIALIZED_NAME_KEY = "key";

    @SerializedName(SERIALIZED_NAME_KEY)
    private String key;

    public static final String SERIALIZED_NAME_ENABLED = "enabled";

    @SerializedName(SERIALIZED_NAME_ENABLED)
    private Boolean enabled;

    public static final String SERIALIZED_NAME_DEFINITION = "definition";

    @SerializedName(SERIALIZED_NAME_DEFINITION)
    private AudienceDefinition definition;

    public static final String SERIALIZED_NAME_STATUS = "status";

    @SerializedName(SERIALIZED_NAME_STATUS)
    private String status;

    public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";

    @SerializedName(SERIALIZED_NAME_CREATED_BY)
    private String createdBy;

    public static final String SERIALIZED_NAME_UPDATED_BY = "updatedBy";

    @SerializedName(SERIALIZED_NAME_UPDATED_BY)
    private String updatedBy;

    public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";

    @SerializedName(SERIALIZED_NAME_CREATED_AT)
    private String createdAt;

    public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";

    @SerializedName(SERIALIZED_NAME_UPDATED_AT)
    private String updatedAt;

    /** Discriminator denoting the audience&#39;s product type. */
    @JsonAdapter(AudienceTypeEnum.Adapter.class)
    public enum AudienceTypeEnum {
        ACCOUNTS("ACCOUNTS"),

        LINKED("LINKED"),

        USERS("USERS");

        private String value;

        AudienceTypeEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static AudienceTypeEnum fromValue(String value) {
            for (AudienceTypeEnum b : AudienceTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<AudienceTypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final AudienceTypeEnum enumeration)
                    throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public AudienceTypeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return AudienceTypeEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_AUDIENCE_TYPE = "audienceType";

    @SerializedName(SERIALIZED_NAME_AUDIENCE_TYPE)
    private AudienceTypeEnum audienceType;

    public AudienceSummaryWithAudienceTypeAndLookback() {}

    public AudienceSummaryWithAudienceTypeAndLookback computeCadence(
            AudienceComputeCadence computeCadence) {

        this.computeCadence = computeCadence;
        return this;
    }

    /**
     * Get computeCadence
     *
     * @return computeCadence
     */
    @javax.annotation.Nonnull
    public AudienceComputeCadence getComputeCadence() {
        return computeCadence;
    }

    public void setComputeCadence(AudienceComputeCadence computeCadence) {
        this.computeCadence = computeCadence;
    }

    public AudienceSummaryWithAudienceTypeAndLookback size(AudienceSize size) {

        this.size = size;
        return this;
    }

    /**
     * Get size
     *
     * @return size
     */
    @javax.annotation.Nullable
    public AudienceSize getSize() {
        return size;
    }

    public void setSize(AudienceSize size) {
        this.size = size;
    }

    public AudienceSummaryWithAudienceTypeAndLookback options(AudienceOptionsWithLookback options) {

        this.options = options;
        return this;
    }

    /**
     * Get options
     *
     * @return options
     */
    @javax.annotation.Nullable
    public AudienceOptionsWithLookback getOptions() {
        return options;
    }

    public void setOptions(AudienceOptionsWithLookback options) {
        this.options = options;
    }

    public AudienceSummaryWithAudienceTypeAndLookback schedules(List<AudienceSchedule> schedules) {

        this.schedules = schedules;
        return this;
    }

    public AudienceSummaryWithAudienceTypeAndLookback addSchedulesItem(
            AudienceSchedule schedulesItem) {
        if (this.schedules == null) {
            this.schedules = new ArrayList<>();
        }
        this.schedules.add(schedulesItem);
        return this;
    }

    /**
     * List of schedules for the audience.
     *
     * @return schedules
     */
    @javax.annotation.Nullable
    public List<AudienceSchedule> getSchedules() {
        return schedules;
    }

    public void setSchedules(List<AudienceSchedule> schedules) {
        this.schedules = schedules;
    }

    public AudienceSummaryWithAudienceTypeAndLookback id(String id) {

        this.id = id;
        return this;
    }

    /**
     * Audience id.
     *
     * @return id
     */
    @javax.annotation.Nonnull
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public AudienceSummaryWithAudienceTypeAndLookback spaceId(String spaceId) {

        this.spaceId = spaceId;
        return this;
    }

    /**
     * Space id for the audience.
     *
     * @return spaceId
     */
    @javax.annotation.Nonnull
    public String getSpaceId() {
        return spaceId;
    }

    public void setSpaceId(String spaceId) {
        this.spaceId = spaceId;
    }

    public AudienceSummaryWithAudienceTypeAndLookback name(String name) {

        this.name = name;
        return this;
    }

    /**
     * Name of the audience.
     *
     * @return name
     */
    @javax.annotation.Nonnull
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public AudienceSummaryWithAudienceTypeAndLookback description(String description) {

        this.description = description;
        return this;
    }

    /**
     * Description of the audience.
     *
     * @return description
     */
    @javax.annotation.Nullable
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public AudienceSummaryWithAudienceTypeAndLookback key(String key) {

        this.key = key;
        return this;
    }

    /**
     * Key for the audience.
     *
     * @return key
     */
    @javax.annotation.Nonnull
    public String getKey() {
        return key;
    }

    public void setKey(String key) {
        this.key = key;
    }

    public AudienceSummaryWithAudienceTypeAndLookback enabled(Boolean enabled) {

        this.enabled = enabled;
        return this;
    }

    /**
     * Enabled/disabled status for the audience.
     *
     * @return enabled
     */
    @javax.annotation.Nonnull
    public Boolean getEnabled() {
        return enabled;
    }

    public void setEnabled(Boolean enabled) {
        this.enabled = enabled;
    }

    public AudienceSummaryWithAudienceTypeAndLookback definition(AudienceDefinition definition) {

        this.definition = definition;
        return this;
    }

    /**
     * Get definition
     *
     * @return definition
     */
    @javax.annotation.Nullable
    public AudienceDefinition getDefinition() {
        return definition;
    }

    public void setDefinition(AudienceDefinition definition) {
        this.definition = definition;
    }

    public AudienceSummaryWithAudienceTypeAndLookback status(String status) {

        this.status = status;
        return this;
    }

    /**
     * Status for the audience. Possible values: Backfilling, Computing, Failed, Live, Awaiting
     * Destinations, Disabled.
     *
     * @return status
     */
    @javax.annotation.Nullable
    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public AudienceSummaryWithAudienceTypeAndLookback createdBy(String createdBy) {

        this.createdBy = createdBy;
        return this;
    }

    /**
     * User id who created the audience.
     *
     * @return createdBy
     */
    @javax.annotation.Nonnull
    public String getCreatedBy() {
        return createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    public AudienceSummaryWithAudienceTypeAndLookback updatedBy(String updatedBy) {

        this.updatedBy = updatedBy;
        return this;
    }

    /**
     * User id who last updated the audience.
     *
     * @return updatedBy
     */
    @javax.annotation.Nonnull
    public String getUpdatedBy() {
        return updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    public AudienceSummaryWithAudienceTypeAndLookback createdAt(String createdAt) {

        this.createdAt = createdAt;
        return this;
    }

    /**
     * Date the audience was created.
     *
     * @return createdAt
     */
    @javax.annotation.Nonnull
    public String getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(String createdAt) {
        this.createdAt = createdAt;
    }

    public AudienceSummaryWithAudienceTypeAndLookback updatedAt(String updatedAt) {

        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Date the audience was last updated.
     *
     * @return updatedAt
     */
    @javax.annotation.Nonnull
    public String getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
    }

    public AudienceSummaryWithAudienceTypeAndLookback audienceType(AudienceTypeEnum audienceType) {

        this.audienceType = audienceType;
        return this;
    }

    /**
     * Discriminator denoting the audience&#39;s product type.
     *
     * @return audienceType
     */
    @javax.annotation.Nonnull
    public AudienceTypeEnum getAudienceType() {
        return audienceType;
    }

    public void setAudienceType(AudienceTypeEnum audienceType) {
        this.audienceType = audienceType;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AudienceSummaryWithAudienceTypeAndLookback audienceSummaryWithAudienceTypeAndLookback =
                (AudienceSummaryWithAudienceTypeAndLookback) o;
        return Objects.equals(
                        this.computeCadence,
                        audienceSummaryWithAudienceTypeAndLookback.computeCadence)
                && Objects.equals(this.size, audienceSummaryWithAudienceTypeAndLookback.size)
                && Objects.equals(this.options, audienceSummaryWithAudienceTypeAndLookback.options)
                && Objects.equals(
                        this.schedules, audienceSummaryWithAudienceTypeAndLookback.schedules)
                && Objects.equals(this.id, audienceSummaryWithAudienceTypeAndLookback.id)
                && Objects.equals(this.spaceId, audienceSummaryWithAudienceTypeAndLookback.spaceId)
                && Objects.equals(this.name, audienceSummaryWithAudienceTypeAndLookback.name)
                && Objects.equals(
                        this.description, audienceSummaryWithAudienceTypeAndLookback.description)
                && Objects.equals(this.key, audienceSummaryWithAudienceTypeAndLookback.key)
                && Objects.equals(this.enabled, audienceSummaryWithAudienceTypeAndLookback.enabled)
                && Objects.equals(
                        this.definition, audienceSummaryWithAudienceTypeAndLookback.definition)
                && Objects.equals(this.status, audienceSummaryWithAudienceTypeAndLookback.status)
                && Objects.equals(
                        this.createdBy, audienceSummaryWithAudienceTypeAndLookback.createdBy)
                && Objects.equals(
                        this.updatedBy, audienceSummaryWithAudienceTypeAndLookback.updatedBy)
                && Objects.equals(
                        this.createdAt, audienceSummaryWithAudienceTypeAndLookback.createdAt)
                && Objects.equals(
                        this.updatedAt, audienceSummaryWithAudienceTypeAndLookback.updatedAt)
                && Objects.equals(
                        this.audienceType, audienceSummaryWithAudienceTypeAndLookback.audienceType);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                computeCadence,
                size,
                options,
                schedules,
                id,
                spaceId,
                name,
                description,
                key,
                enabled,
                definition,
                status,
                createdBy,
                updatedBy,
                createdAt,
                updatedAt,
                audienceType);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AudienceSummaryWithAudienceTypeAndLookback {\n");
        sb.append("    computeCadence: ").append(toIndentedString(computeCadence)).append("\n");
        sb.append("    size: ").append(toIndentedString(size)).append("\n");
        sb.append("    options: ").append(toIndentedString(options)).append("\n");
        sb.append("    schedules: ").append(toIndentedString(schedules)).append("\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    spaceId: ").append(toIndentedString(spaceId)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    key: ").append(toIndentedString(key)).append("\n");
        sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
        sb.append("    definition: ").append(toIndentedString(definition)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
        sb.append("    updatedBy: ").append(toIndentedString(updatedBy)).append("\n");
        sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
        sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
        sb.append("    audienceType: ").append(toIndentedString(audienceType)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("computeCadence");
        openapiFields.add("size");
        openapiFields.add("options");
        openapiFields.add("schedules");
        openapiFields.add("id");
        openapiFields.add("spaceId");
        openapiFields.add("name");
        openapiFields.add("description");
        openapiFields.add("key");
        openapiFields.add("enabled");
        openapiFields.add("definition");
        openapiFields.add("status");
        openapiFields.add("createdBy");
        openapiFields.add("updatedBy");
        openapiFields.add("createdAt");
        openapiFields.add("updatedAt");
        openapiFields.add("audienceType");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("computeCadence");
        openapiRequiredFields.add("id");
        openapiRequiredFields.add("spaceId");
        openapiRequiredFields.add("name");
        openapiRequiredFields.add("key");
        openapiRequiredFields.add("enabled");
        openapiRequiredFields.add("definition");
        openapiRequiredFields.add("createdBy");
        openapiRequiredFields.add("updatedBy");
        openapiRequiredFields.add("createdAt");
        openapiRequiredFields.add("updatedAt");
        openapiRequiredFields.add("audienceType");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     AudienceSummaryWithAudienceTypeAndLookback
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!AudienceSummaryWithAudienceTypeAndLookback.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " AudienceSummaryWithAudienceTypeAndLookback is not found in"
                                    + " the empty JSON string",
                                AudienceSummaryWithAudienceTypeAndLookback.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!AudienceSummaryWithAudienceTypeAndLookback.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `AudienceSummaryWithAudienceTypeAndLookback` properties."
                                    + " JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField :
                AudienceSummaryWithAudienceTypeAndLookback.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        // validate the required field `computeCadence`
        AudienceComputeCadence.validateJsonElement(jsonObj.get("computeCadence"));
        // validate the optional field `size`
        if (jsonObj.get("size") != null && !jsonObj.get("size").isJsonNull()) {
            AudienceSize.validateJsonElement(jsonObj.get("size"));
        }
        // validate the optional field `options`
        if (jsonObj.get("options") != null && !jsonObj.get("options").isJsonNull()) {
            AudienceOptionsWithLookback.validateJsonElement(jsonObj.get("options"));
        }
        if (jsonObj.get("schedules") != null && !jsonObj.get("schedules").isJsonNull()) {
            JsonArray jsonArrayschedules = jsonObj.getAsJsonArray("schedules");
            if (jsonArrayschedules != null) {
                // ensure the json data is an array
                if (!jsonObj.get("schedules").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `schedules` to be an array in the JSON"
                                            + " string but got `%s`",
                                    jsonObj.get("schedules").toString()));
                }

                // validate the optional field `schedules` (array)
                for (int i = 0; i < jsonArrayschedules.size(); i++) {
                    AudienceSchedule.validateJsonElement(jsonArrayschedules.get(i));
                }
                ;
            }
        }
        if (!jsonObj.get("id").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `id` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("id").toString()));
        }
        if (!jsonObj.get("spaceId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `spaceId` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("spaceId").toString()));
        }
        if (!jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `name` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("name").toString()));
        }
        if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull())
                && !jsonObj.get("description").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `description` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("description").toString()));
        }
        if (!jsonObj.get("key").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `key` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("key").toString()));
        }
        // validate the required field `definition`
        AudienceDefinition.validateJsonElement(jsonObj.get("definition"));
        if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull())
                && !jsonObj.get("status").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `status` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("status").toString()));
        }
        if (!jsonObj.get("createdBy").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `createdBy` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("createdBy").toString()));
        }
        if (!jsonObj.get("updatedBy").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `updatedBy` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("updatedBy").toString()));
        }
        if (!jsonObj.get("createdAt").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `createdAt` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("createdAt").toString()));
        }
        if (!jsonObj.get("updatedAt").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `updatedAt` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("updatedAt").toString()));
        }
        if (!jsonObj.get("audienceType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `audienceType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("audienceType").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!AudienceSummaryWithAudienceTypeAndLookback.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'AudienceSummaryWithAudienceTypeAndLookback' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AudienceSummaryWithAudienceTypeAndLookback> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(AudienceSummaryWithAudienceTypeAndLookback.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<AudienceSummaryWithAudienceTypeAndLookback>() {
                        @Override
                        public void write(
                                JsonWriter out, AudienceSummaryWithAudienceTypeAndLookback value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public AudienceSummaryWithAudienceTypeAndLookback read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of AudienceSummaryWithAudienceTypeAndLookback given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of AudienceSummaryWithAudienceTypeAndLookback
     * @throws IOException if the JSON string is invalid with respect to
     *     AudienceSummaryWithAudienceTypeAndLookback
     */
    public static AudienceSummaryWithAudienceTypeAndLookback fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, AudienceSummaryWithAudienceTypeAndLookback.class);
    }

    /**
     * Convert an instance of AudienceSummaryWithAudienceTypeAndLookback to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
