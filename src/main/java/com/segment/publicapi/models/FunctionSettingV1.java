/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * The version of the OpenAPI document: 33.0.0
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;


import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** FunctionSettingV1 */
public class FunctionSettingV1 {
    public static final String SERIALIZED_NAME_NAME = "name";

    @SerializedName(SERIALIZED_NAME_NAME)
    private String name;

    public static final String SERIALIZED_NAME_LABEL = "label";

    @SerializedName(SERIALIZED_NAME_LABEL)
    private String label;

    public static final String SERIALIZED_NAME_DESCRIPTION = "description";

    @SerializedName(SERIALIZED_NAME_DESCRIPTION)
    private String description;

    /** The Function type. */
    @JsonAdapter(TypeEnum.Adapter.class)
    public enum TypeEnum {
        ARRAY("ARRAY"),

        BOOLEAN("BOOLEAN"),

        STRING("STRING"),

        TEXT_MAP("TEXT_MAP");

        private String value;

        TypeEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static TypeEnum fromValue(String value) {
            for (TypeEnum b : TypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<TypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final TypeEnum enumeration)
                    throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public TypeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return TypeEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_TYPE = "type";

    @SerializedName(SERIALIZED_NAME_TYPE)
    private TypeEnum type;

    public static final String SERIALIZED_NAME_REQUIRED = "required";

    @SerializedName(SERIALIZED_NAME_REQUIRED)
    private Boolean required;

    public static final String SERIALIZED_NAME_SENSITIVE = "sensitive";

    @SerializedName(SERIALIZED_NAME_SENSITIVE)
    private Boolean sensitive;

    public FunctionSettingV1() {}

    public FunctionSettingV1 name(String name) {

        this.name = name;
        return this;
    }

    /**
     * The name of this Function.
     *
     * @return name
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "The name of this Function.")
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public FunctionSettingV1 label(String label) {

        this.label = label;
        return this;
    }

    /**
     * The label for this Function.
     *
     * @return label
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "The label for this Function.")
    public String getLabel() {
        return label;
    }

    public void setLabel(String label) {
        this.label = label;
    }

    public FunctionSettingV1 description(String description) {

        this.description = description;
        return this;
    }

    /**
     * A description of this Function.
     *
     * @return description
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "A description of this Function.")
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public FunctionSettingV1 type(TypeEnum type) {

        this.type = type;
        return this;
    }

    /**
     * The Function type.
     *
     * @return type
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "The Function type.")
    public TypeEnum getType() {
        return type;
    }

    public void setType(TypeEnum type) {
        this.type = type;
    }

    public FunctionSettingV1 required(Boolean required) {

        this.required = required;
        return this;
    }

    /**
     * Whether this Function is required.
     *
     * @return required
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Whether this Function is required.")
    public Boolean getRequired() {
        return required;
    }

    public void setRequired(Boolean required) {
        this.required = required;
    }

    public FunctionSettingV1 sensitive(Boolean sensitive) {

        this.sensitive = sensitive;
        return this;
    }

    /**
     * Whether this Function contains sensitive information.
     *
     * @return sensitive
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(
            required = true,
            value = "Whether this Function contains sensitive information.")
    public Boolean getSensitive() {
        return sensitive;
    }

    public void setSensitive(Boolean sensitive) {
        this.sensitive = sensitive;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FunctionSettingV1 functionSettingV1 = (FunctionSettingV1) o;
        return Objects.equals(this.name, functionSettingV1.name)
                && Objects.equals(this.label, functionSettingV1.label)
                && Objects.equals(this.description, functionSettingV1.description)
                && Objects.equals(this.type, functionSettingV1.type)
                && Objects.equals(this.required, functionSettingV1.required)
                && Objects.equals(this.sensitive, functionSettingV1.sensitive);
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, label, description, type, required, sensitive);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class FunctionSettingV1 {\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    label: ").append(toIndentedString(label)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    required: ").append(toIndentedString(required)).append("\n");
        sb.append("    sensitive: ").append(toIndentedString(sensitive)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("name");
        openapiFields.add("label");
        openapiFields.add("description");
        openapiFields.add("type");
        openapiFields.add("required");
        openapiFields.add("sensitive");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("name");
        openapiRequiredFields.add("label");
        openapiRequiredFields.add("description");
        openapiRequiredFields.add("type");
        openapiRequiredFields.add("required");
        openapiRequiredFields.add("sensitive");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to FunctionSettingV1
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!FunctionSettingV1.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in FunctionSettingV1 is not found in the"
                                        + " empty JSON string",
                                FunctionSettingV1.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!FunctionSettingV1.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `FunctionSettingV1` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : FunctionSettingV1.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonObj.toString()));
            }
        }
        if (!jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `name` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("name").toString()));
        }
        if (!jsonObj.get("label").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `label` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("label").toString()));
        }
        if (!jsonObj.get("description").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `description` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("description").toString()));
        }
        if (!jsonObj.get("type").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `type` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("type").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!FunctionSettingV1.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'FunctionSettingV1' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<FunctionSettingV1> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(FunctionSettingV1.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<FunctionSettingV1>() {
                        @Override
                        public void write(JsonWriter out, FunctionSettingV1 value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public FunctionSettingV1 read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of FunctionSettingV1 given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of FunctionSettingV1
     * @throws IOException if the JSON string is invalid with respect to FunctionSettingV1
     */
    public static FunctionSettingV1 fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, FunctionSettingV1.class);
    }

    /**
     * Convert an instance of FunctionSettingV1 to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
