/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;


import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/**
 * SourceEventVolumeDatapoint represents an individual timestamp/event count pair corresponding to a
 * window of time designated by the granularity.
 */
@ApiModel(
        description =
                "SourceEventVolumeDatapoint represents an individual timestamp/event count pair"
                        + " corresponding to a window of time designated by the granularity.")
public class SourceEventVolumeDatapointV1 {
    public static final String SERIALIZED_NAME_TIME = "time";

    @SerializedName(SERIALIZED_NAME_TIME)
    private String time;

    public static final String SERIALIZED_NAME_COUNT = "count";

    @SerializedName(SERIALIZED_NAME_COUNT)
    private BigDecimal count;

    public SourceEventVolumeDatapointV1() {}

    public SourceEventVolumeDatapointV1 time(String time) {

        this.time = time;
        return this;
    }

    /**
     * The timestamp that corresponds to the beginning of the window given by the requested
     * granularity.
     *
     * @return time
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(
            required = true,
            value =
                    "The timestamp that corresponds to the beginning of the window given by the"
                            + " requested granularity.")
    public String getTime() {
        return time;
    }

    public void setTime(String time) {
        this.time = time;
    }

    public SourceEventVolumeDatapointV1 count(BigDecimal count) {

        this.count = count;
        return this;
    }

    /**
     * The number of valid events Segment received in the given window, after the events completed
     * the validation process.
     *
     * @return count
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(
            required = true,
            value =
                    "The number of valid events Segment received in the given window, after the"
                            + " events completed the validation process.")
    public BigDecimal getCount() {
        return count;
    }

    public void setCount(BigDecimal count) {
        this.count = count;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceEventVolumeDatapointV1 sourceEventVolumeDatapointV1 =
                (SourceEventVolumeDatapointV1) o;
        return Objects.equals(this.time, sourceEventVolumeDatapointV1.time)
                && Objects.equals(this.count, sourceEventVolumeDatapointV1.count);
    }

    @Override
    public int hashCode() {
        return Objects.hash(time, count);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SourceEventVolumeDatapointV1 {\n");
        sb.append("    time: ").append(toIndentedString(time)).append("\n");
        sb.append("    count: ").append(toIndentedString(count)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("time");
        openapiFields.add("count");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("time");
        openapiRequiredFields.add("count");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to
     *     SourceEventVolumeDatapointV1
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!SourceEventVolumeDatapointV1.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in SourceEventVolumeDatapointV1 is not"
                                        + " found in the empty JSON string",
                                SourceEventVolumeDatapointV1.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!SourceEventVolumeDatapointV1.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `SourceEventVolumeDatapointV1` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : SourceEventVolumeDatapointV1.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonObj.toString()));
            }
        }
        if (!jsonObj.get("time").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `time` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("time").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!SourceEventVolumeDatapointV1.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'SourceEventVolumeDatapointV1' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<SourceEventVolumeDatapointV1> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(SourceEventVolumeDatapointV1.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<SourceEventVolumeDatapointV1>() {
                        @Override
                        public void write(JsonWriter out, SourceEventVolumeDatapointV1 value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public SourceEventVolumeDatapointV1 read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of SourceEventVolumeDatapointV1 given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of SourceEventVolumeDatapointV1
     * @throws IOException if the JSON string is invalid with respect to
     *     SourceEventVolumeDatapointV1
     */
    public static SourceEventVolumeDatapointV1 fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, SourceEventVolumeDatapointV1.class);
    }

    /**
     * Convert an instance of SourceEventVolumeDatapointV1 to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
