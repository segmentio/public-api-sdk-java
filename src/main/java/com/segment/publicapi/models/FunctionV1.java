/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 32.0.2
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.segment.publicapi.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.models.FunctionSettingV1;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.segment.publicapi.JSON;

/**
 * Represents a Function.
 */
@ApiModel(description = "Represents a Function.")

public class FunctionV1 {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  /**
   * The Function type.  Config API note: equal to &#x60;type&#x60;.
   */
  @JsonAdapter(ResourceTypeEnum.Adapter.class)
  public enum ResourceTypeEnum {
    DESTINATION("DESTINATION"),
    
    SOURCE("SOURCE");

    private String value;

    ResourceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResourceTypeEnum fromValue(String value) {
      for (ResourceTypeEnum b : ResourceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResourceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResourceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResourceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResourceTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private ResourceTypeEnum resourceType;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private String createdBy;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_DEPLOYED_AT = "deployedAt";
  @SerializedName(SERIALIZED_NAME_DEPLOYED_AT)
  private String deployedAt;

  public static final String SERIALIZED_NAME_SETTINGS = "settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  private List<FunctionSettingV1> settings = null;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_LOGO_URL = "logoUrl";
  @SerializedName(SERIALIZED_NAME_LOGO_URL)
  private String logoUrl;

  public static final String SERIALIZED_NAME_PREVIEW_WEBHOOK_URL = "previewWebhookUrl";
  @SerializedName(SERIALIZED_NAME_PREVIEW_WEBHOOK_URL)
  private String previewWebhookUrl;

  public static final String SERIALIZED_NAME_BATCH_MAX_COUNT = "batchMaxCount";
  @SerializedName(SERIALIZED_NAME_BATCH_MAX_COUNT)
  private BigDecimal batchMaxCount;

  public static final String SERIALIZED_NAME_CATALOG_ID = "catalogId";
  @SerializedName(SERIALIZED_NAME_CATALOG_ID)
  private String catalogId;

  public static final String SERIALIZED_NAME_IS_LATEST_VERSION = "isLatestVersion";
  @SerializedName(SERIALIZED_NAME_IS_LATEST_VERSION)
  private Boolean isLatestVersion;

  public FunctionV1() {
  }

  public FunctionV1 id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * An identifier for this Function.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An identifier for this Function.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public FunctionV1 resourceType(ResourceTypeEnum resourceType) {
    
    this.resourceType = resourceType;
    return this;
  }

   /**
   * The Function type.  Config API note: equal to &#x60;type&#x60;.
   * @return resourceType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Function type.  Config API note: equal to `type`.")

  public ResourceTypeEnum getResourceType() {
    return resourceType;
  }


  public void setResourceType(ResourceTypeEnum resourceType) {
    this.resourceType = resourceType;
  }


  public FunctionV1 createdAt(String createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * The time this Function was created.
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The time this Function was created.")

  public String getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public FunctionV1 createdBy(String createdBy) {
    
    this.createdBy = createdBy;
    return this;
  }

   /**
   * The id of the user who created this Function.
   * @return createdBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The id of the user who created this Function.")

  public String getCreatedBy() {
    return createdBy;
  }


  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }


  public FunctionV1 code(String code) {
    
    this.code = code;
    return this;
  }

   /**
   * The Function code.
   * @return code
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Function code.")

  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    this.code = code;
  }


  public FunctionV1 deployedAt(String deployedAt) {
    
    this.deployedAt = deployedAt;
    return this;
  }

   /**
   * The time of this Function&#39;s last deployment.
   * @return deployedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The time of this Function's last deployment.")

  public String getDeployedAt() {
    return deployedAt;
  }


  public void setDeployedAt(String deployedAt) {
    this.deployedAt = deployedAt;
  }


  public FunctionV1 settings(List<FunctionSettingV1> settings) {
    
    this.settings = settings;
    return this;
  }

  public FunctionV1 addSettingsItem(FunctionSettingV1 settingsItem) {
    if (this.settings == null) {
      this.settings = new ArrayList<>();
    }
    this.settings.add(settingsItem);
    return this;
  }

   /**
   * The list of settings for this Function.
   * @return settings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The list of settings for this Function.")

  public List<FunctionSettingV1> getSettings() {
    return settings;
  }


  public void setSettings(List<FunctionSettingV1> settings) {
    this.settings = settings;
  }


  public FunctionV1 displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * A display name for this Function.
   * @return displayName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A display name for this Function.")

  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public FunctionV1 description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * A description for this Function.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Function.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public FunctionV1 logoUrl(String logoUrl) {
    
    this.logoUrl = logoUrl;
    return this;
  }

   /**
   * The URL of the logo for this Function.
   * @return logoUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The URL of the logo for this Function.")

  public String getLogoUrl() {
    return logoUrl;
  }


  public void setLogoUrl(String logoUrl) {
    this.logoUrl = logoUrl;
  }


  public FunctionV1 previewWebhookUrl(String previewWebhookUrl) {
    
    this.previewWebhookUrl = previewWebhookUrl;
    return this;
  }

   /**
   * The preview webhook URL for this Function.
   * @return previewWebhookUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The preview webhook URL for this Function.")

  public String getPreviewWebhookUrl() {
    return previewWebhookUrl;
  }


  public void setPreviewWebhookUrl(String previewWebhookUrl) {
    this.previewWebhookUrl = previewWebhookUrl;
  }


  public FunctionV1 batchMaxCount(BigDecimal batchMaxCount) {
    
    this.batchMaxCount = batchMaxCount;
    return this;
  }

   /**
   * The max count of the batch for this Function.
   * @return batchMaxCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The max count of the batch for this Function.")

  public BigDecimal getBatchMaxCount() {
    return batchMaxCount;
  }


  public void setBatchMaxCount(BigDecimal batchMaxCount) {
    this.batchMaxCount = batchMaxCount;
  }


  public FunctionV1 catalogId(String catalogId) {
    
    this.catalogId = catalogId;
    return this;
  }

   /**
   * The catalog id of this Function.
   * @return catalogId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The catalog id of this Function.")

  public String getCatalogId() {
    return catalogId;
  }


  public void setCatalogId(String catalogId) {
    this.catalogId = catalogId;
  }


  public FunctionV1 isLatestVersion(Boolean isLatestVersion) {
    
    this.isLatestVersion = isLatestVersion;
    return this;
  }

   /**
   * Whether the deployment of this Function is the latest version.
   * @return isLatestVersion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the deployment of this Function is the latest version.")

  public Boolean getIsLatestVersion() {
    return isLatestVersion;
  }


  public void setIsLatestVersion(Boolean isLatestVersion) {
    this.isLatestVersion = isLatestVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FunctionV1 functionV1 = (FunctionV1) o;
    return Objects.equals(this.id, functionV1.id) &&
        Objects.equals(this.resourceType, functionV1.resourceType) &&
        Objects.equals(this.createdAt, functionV1.createdAt) &&
        Objects.equals(this.createdBy, functionV1.createdBy) &&
        Objects.equals(this.code, functionV1.code) &&
        Objects.equals(this.deployedAt, functionV1.deployedAt) &&
        Objects.equals(this.settings, functionV1.settings) &&
        Objects.equals(this.displayName, functionV1.displayName) &&
        Objects.equals(this.description, functionV1.description) &&
        Objects.equals(this.logoUrl, functionV1.logoUrl) &&
        Objects.equals(this.previewWebhookUrl, functionV1.previewWebhookUrl) &&
        Objects.equals(this.batchMaxCount, functionV1.batchMaxCount) &&
        Objects.equals(this.catalogId, functionV1.catalogId) &&
        Objects.equals(this.isLatestVersion, functionV1.isLatestVersion);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, resourceType, createdAt, createdBy, code, deployedAt, settings, displayName, description, logoUrl, previewWebhookUrl, batchMaxCount, catalogId, isLatestVersion);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FunctionV1 {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    deployedAt: ").append(toIndentedString(deployedAt)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    logoUrl: ").append(toIndentedString(logoUrl)).append("\n");
    sb.append("    previewWebhookUrl: ").append(toIndentedString(previewWebhookUrl)).append("\n");
    sb.append("    batchMaxCount: ").append(toIndentedString(batchMaxCount)).append("\n");
    sb.append("    catalogId: ").append(toIndentedString(catalogId)).append("\n");
    sb.append("    isLatestVersion: ").append(toIndentedString(isLatestVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("resourceType");
    openapiFields.add("createdAt");
    openapiFields.add("createdBy");
    openapiFields.add("code");
    openapiFields.add("deployedAt");
    openapiFields.add("settings");
    openapiFields.add("displayName");
    openapiFields.add("description");
    openapiFields.add("logoUrl");
    openapiFields.add("previewWebhookUrl");
    openapiFields.add("batchMaxCount");
    openapiFields.add("catalogId");
    openapiFields.add("isLatestVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FunctionV1
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FunctionV1.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FunctionV1 is not found in the empty JSON string", FunctionV1.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!FunctionV1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FunctionV1` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("resourceType") != null && !jsonObj.get("resourceType").isJsonNull()) && !jsonObj.get("resourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceType").toString()));
      }
      if ((jsonObj.get("createdAt") != null && !jsonObj.get("createdAt").isJsonNull()) && !jsonObj.get("createdAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdAt").toString()));
      }
      if ((jsonObj.get("createdBy") != null && !jsonObj.get("createdBy").isJsonNull()) && !jsonObj.get("createdBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdBy").toString()));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("deployedAt") != null && !jsonObj.get("deployedAt").isJsonNull()) && !jsonObj.get("deployedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deployedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deployedAt").toString()));
      }
      if (jsonObj.get("settings") != null && !jsonObj.get("settings").isJsonNull()) {
        JsonArray jsonArraysettings = jsonObj.getAsJsonArray("settings");
        if (jsonArraysettings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("settings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `settings` to be an array in the JSON string but got `%s`", jsonObj.get("settings").toString()));
          }
        }
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("logoUrl") != null && !jsonObj.get("logoUrl").isJsonNull()) && !jsonObj.get("logoUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logoUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logoUrl").toString()));
      }
      if ((jsonObj.get("previewWebhookUrl") != null && !jsonObj.get("previewWebhookUrl").isJsonNull()) && !jsonObj.get("previewWebhookUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `previewWebhookUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("previewWebhookUrl").toString()));
      }
      if ((jsonObj.get("catalogId") != null && !jsonObj.get("catalogId").isJsonNull()) && !jsonObj.get("catalogId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `catalogId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("catalogId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FunctionV1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FunctionV1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FunctionV1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FunctionV1.class));

       return (TypeAdapter<T>) new TypeAdapter<FunctionV1>() {
           @Override
           public void write(JsonWriter out, FunctionV1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FunctionV1 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FunctionV1 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FunctionV1
  * @throws IOException if the JSON string is invalid with respect to FunctionV1
  */
  public static FunctionV1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FunctionV1.class);
  }

 /**
  * Convert an instance of FunctionV1 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

