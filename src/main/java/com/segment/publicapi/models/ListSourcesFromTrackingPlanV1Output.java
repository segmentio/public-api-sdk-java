/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 32.0.2
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.segment.publicapi.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.models.Pagination;
import com.segment.publicapi.models.SourceV1;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.segment.publicapi.JSON;

/**
 * Lists all Sources associated with a Tracking Plan.
 */
@ApiModel(description = "Lists all Sources associated with a Tracking Plan.")

public class ListSourcesFromTrackingPlanV1Output {
  public static final String SERIALIZED_NAME_SOURCES = "sources";
  @SerializedName(SERIALIZED_NAME_SOURCES)
  private List<SourceV1> sources = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAGINATION = "pagination";
  @SerializedName(SERIALIZED_NAME_PAGINATION)
  private Pagination pagination;

  public ListSourcesFromTrackingPlanV1Output() {
  }

  public ListSourcesFromTrackingPlanV1Output sources(List<SourceV1> sources) {
    
    this.sources = sources;
    return this;
  }

  public ListSourcesFromTrackingPlanV1Output addSourcesItem(SourceV1 sourcesItem) {
    this.sources.add(sourcesItem);
    return this;
  }

   /**
   * A paginated list of Sources associated with the Tracking Plan.
   * @return sources
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A paginated list of Sources associated with the Tracking Plan.")

  public List<SourceV1> getSources() {
    return sources;
  }


  public void setSources(List<SourceV1> sources) {
    this.sources = sources;
  }


  public ListSourcesFromTrackingPlanV1Output pagination(Pagination pagination) {
    
    this.pagination = pagination;
    return this;
  }

   /**
   * Get pagination
   * @return pagination
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Pagination getPagination() {
    return pagination;
  }


  public void setPagination(Pagination pagination) {
    this.pagination = pagination;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListSourcesFromTrackingPlanV1Output listSourcesFromTrackingPlanV1Output = (ListSourcesFromTrackingPlanV1Output) o;
    return Objects.equals(this.sources, listSourcesFromTrackingPlanV1Output.sources) &&
        Objects.equals(this.pagination, listSourcesFromTrackingPlanV1Output.pagination);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sources, pagination);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListSourcesFromTrackingPlanV1Output {\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    pagination: ").append(toIndentedString(pagination)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sources");
    openapiFields.add("pagination");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("sources");
    openapiRequiredFields.add("pagination");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ListSourcesFromTrackingPlanV1Output
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ListSourcesFromTrackingPlanV1Output.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListSourcesFromTrackingPlanV1Output is not found in the empty JSON string", ListSourcesFromTrackingPlanV1Output.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ListSourcesFromTrackingPlanV1Output.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListSourcesFromTrackingPlanV1Output` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ListSourcesFromTrackingPlanV1Output.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("sources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sources` to be an array in the JSON string but got `%s`", jsonObj.get("sources").toString()));
      }

      JsonArray jsonArraysources = jsonObj.getAsJsonArray("sources");
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListSourcesFromTrackingPlanV1Output.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListSourcesFromTrackingPlanV1Output' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListSourcesFromTrackingPlanV1Output> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListSourcesFromTrackingPlanV1Output.class));

       return (TypeAdapter<T>) new TypeAdapter<ListSourcesFromTrackingPlanV1Output>() {
           @Override
           public void write(JsonWriter out, ListSourcesFromTrackingPlanV1Output value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListSourcesFromTrackingPlanV1Output read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ListSourcesFromTrackingPlanV1Output given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ListSourcesFromTrackingPlanV1Output
  * @throws IOException if the JSON string is invalid with respect to ListSourcesFromTrackingPlanV1Output
  */
  public static ListSourcesFromTrackingPlanV1Output fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListSourcesFromTrackingPlanV1Output.class);
  }

 /**
  * Convert an instance of ListSourcesFromTrackingPlanV1Output to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

