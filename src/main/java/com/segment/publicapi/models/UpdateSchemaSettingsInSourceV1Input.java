/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** Input to update a Source&#39;s settings. */
public class UpdateSchemaSettingsInSourceV1Input {
    public static final String SERIALIZED_NAME_TRACK = "track";

    @SerializedName(SERIALIZED_NAME_TRACK)
    private TrackSourceSettingsV1 track;

    public static final String SERIALIZED_NAME_IDENTIFY = "identify";

    @SerializedName(SERIALIZED_NAME_IDENTIFY)
    private IdentifySourceSettingsV1 identify;

    public static final String SERIALIZED_NAME_GROUP = "group";

    @SerializedName(SERIALIZED_NAME_GROUP)
    private GroupSourceSettingsV1 group;

    public static final String SERIALIZED_NAME_FORWARDING_VIOLATIONS_TO = "forwardingViolationsTo";

    @SerializedName(SERIALIZED_NAME_FORWARDING_VIOLATIONS_TO)
    private String forwardingViolationsTo;

    public static final String SERIALIZED_NAME_FORWARDING_BLOCKED_EVENTS_TO =
            "forwardingBlockedEventsTo";

    @SerializedName(SERIALIZED_NAME_FORWARDING_BLOCKED_EVENTS_TO)
    private String forwardingBlockedEventsTo;

    public UpdateSchemaSettingsInSourceV1Input() {}

    public UpdateSchemaSettingsInSourceV1Input track(TrackSourceSettingsV1 track) {

        this.track = track;
        return this;
    }

    /**
     * Get track
     *
     * @return track
     */
    @javax.annotation.Nullable
    public TrackSourceSettingsV1 getTrack() {
        return track;
    }

    public void setTrack(TrackSourceSettingsV1 track) {
        this.track = track;
    }

    public UpdateSchemaSettingsInSourceV1Input identify(IdentifySourceSettingsV1 identify) {

        this.identify = identify;
        return this;
    }

    /**
     * Get identify
     *
     * @return identify
     */
    @javax.annotation.Nullable
    public IdentifySourceSettingsV1 getIdentify() {
        return identify;
    }

    public void setIdentify(IdentifySourceSettingsV1 identify) {
        this.identify = identify;
    }

    public UpdateSchemaSettingsInSourceV1Input group(GroupSourceSettingsV1 group) {

        this.group = group;
        return this;
    }

    /**
     * Get group
     *
     * @return group
     */
    @javax.annotation.Nullable
    public GroupSourceSettingsV1 getGroup() {
        return group;
    }

    public void setGroup(GroupSourceSettingsV1 group) {
        this.group = group;
    }

    public UpdateSchemaSettingsInSourceV1Input forwardingViolationsTo(
            String forwardingViolationsTo) {

        this.forwardingViolationsTo = forwardingViolationsTo;
        return this;
    }

    /**
     * Source id to forward violations to.
     *
     * @return forwardingViolationsTo
     */
    @javax.annotation.Nullable
    public String getForwardingViolationsTo() {
        return forwardingViolationsTo;
    }

    public void setForwardingViolationsTo(String forwardingViolationsTo) {
        this.forwardingViolationsTo = forwardingViolationsTo;
    }

    public UpdateSchemaSettingsInSourceV1Input forwardingBlockedEventsTo(
            String forwardingBlockedEventsTo) {

        this.forwardingBlockedEventsTo = forwardingBlockedEventsTo;
        return this;
    }

    /**
     * Source id to forward blocked events to.
     *
     * @return forwardingBlockedEventsTo
     */
    @javax.annotation.Nullable
    public String getForwardingBlockedEventsTo() {
        return forwardingBlockedEventsTo;
    }

    public void setForwardingBlockedEventsTo(String forwardingBlockedEventsTo) {
        this.forwardingBlockedEventsTo = forwardingBlockedEventsTo;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateSchemaSettingsInSourceV1Input updateSchemaSettingsInSourceV1Input =
                (UpdateSchemaSettingsInSourceV1Input) o;
        return Objects.equals(this.track, updateSchemaSettingsInSourceV1Input.track)
                && Objects.equals(this.identify, updateSchemaSettingsInSourceV1Input.identify)
                && Objects.equals(this.group, updateSchemaSettingsInSourceV1Input.group)
                && Objects.equals(
                        this.forwardingViolationsTo,
                        updateSchemaSettingsInSourceV1Input.forwardingViolationsTo)
                && Objects.equals(
                        this.forwardingBlockedEventsTo,
                        updateSchemaSettingsInSourceV1Input.forwardingBlockedEventsTo);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                track, identify, group, forwardingViolationsTo, forwardingBlockedEventsTo);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class UpdateSchemaSettingsInSourceV1Input {\n");
        sb.append("    track: ").append(toIndentedString(track)).append("\n");
        sb.append("    identify: ").append(toIndentedString(identify)).append("\n");
        sb.append("    group: ").append(toIndentedString(group)).append("\n");
        sb.append("    forwardingViolationsTo: ")
                .append(toIndentedString(forwardingViolationsTo))
                .append("\n");
        sb.append("    forwardingBlockedEventsTo: ")
                .append(toIndentedString(forwardingBlockedEventsTo))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("track");
        openapiFields.add("identify");
        openapiFields.add("group");
        openapiFields.add("forwardingViolationsTo");
        openapiFields.add("forwardingBlockedEventsTo");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     UpdateSchemaSettingsInSourceV1Input
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!UpdateSchemaSettingsInSourceV1Input.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in UpdateSchemaSettingsInSourceV1Input is"
                                        + " not found in the empty JSON string",
                                UpdateSchemaSettingsInSourceV1Input.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!UpdateSchemaSettingsInSourceV1Input.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `UpdateSchemaSettingsInSourceV1Input` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        // validate the optional field `track`
        if (jsonObj.get("track") != null && !jsonObj.get("track").isJsonNull()) {
            TrackSourceSettingsV1.validateJsonElement(jsonObj.get("track"));
        }
        // validate the optional field `identify`
        if (jsonObj.get("identify") != null && !jsonObj.get("identify").isJsonNull()) {
            IdentifySourceSettingsV1.validateJsonElement(jsonObj.get("identify"));
        }
        // validate the optional field `group`
        if (jsonObj.get("group") != null && !jsonObj.get("group").isJsonNull()) {
            GroupSourceSettingsV1.validateJsonElement(jsonObj.get("group"));
        }
        if ((jsonObj.get("forwardingViolationsTo") != null
                        && !jsonObj.get("forwardingViolationsTo").isJsonNull())
                && !jsonObj.get("forwardingViolationsTo").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `forwardingViolationsTo` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("forwardingViolationsTo").toString()));
        }
        if ((jsonObj.get("forwardingBlockedEventsTo") != null
                        && !jsonObj.get("forwardingBlockedEventsTo").isJsonNull())
                && !jsonObj.get("forwardingBlockedEventsTo").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `forwardingBlockedEventsTo` to be a primitive type"
                                    + " in the JSON string but got `%s`",
                            jsonObj.get("forwardingBlockedEventsTo").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!UpdateSchemaSettingsInSourceV1Input.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'UpdateSchemaSettingsInSourceV1Input' and
                // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<UpdateSchemaSettingsInSourceV1Input> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(UpdateSchemaSettingsInSourceV1Input.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<UpdateSchemaSettingsInSourceV1Input>() {
                        @Override
                        public void write(JsonWriter out, UpdateSchemaSettingsInSourceV1Input value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public UpdateSchemaSettingsInSourceV1Input read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of UpdateSchemaSettingsInSourceV1Input given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of UpdateSchemaSettingsInSourceV1Input
     * @throws IOException if the JSON string is invalid with respect to
     *     UpdateSchemaSettingsInSourceV1Input
     */
    public static UpdateSchemaSettingsInSourceV1Input fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, UpdateSchemaSettingsInSourceV1Input.class);
    }

    /**
     * Convert an instance of UpdateSchemaSettingsInSourceV1Input to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
