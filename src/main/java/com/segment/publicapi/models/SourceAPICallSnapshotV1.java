/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** A snapshot of the number of API calls for a given Source in a Workspace. */
public class SourceAPICallSnapshotV1 {
    public static final String SERIALIZED_NAME_SOURCE_ID = "sourceId";

    @SerializedName(SERIALIZED_NAME_SOURCE_ID)
    private String sourceId;

    public static final String SERIALIZED_NAME_API_CALLS = "apiCalls";

    @SerializedName(SERIALIZED_NAME_API_CALLS)
    private String apiCalls;

    public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";

    @SerializedName(SERIALIZED_NAME_TIMESTAMP)
    private String timestamp;

    public SourceAPICallSnapshotV1() {}

    public SourceAPICallSnapshotV1 sourceId(String sourceId) {

        this.sourceId = sourceId;
        return this;
    }

    /**
     * The Source id.
     *
     * @return sourceId
     */
    @javax.annotation.Nonnull
    public String getSourceId() {
        return sourceId;
    }

    public void setSourceId(String sourceId) {
        this.sourceId = sourceId;
    }

    public SourceAPICallSnapshotV1 apiCalls(String apiCalls) {

        this.apiCalls = apiCalls;
        return this;
    }

    /**
     * A bigint of the number of API calls in this snapshot.
     *
     * @return apiCalls
     */
    @javax.annotation.Nonnull
    public String getApiCalls() {
        return apiCalls;
    }

    public void setApiCalls(String apiCalls) {
        this.apiCalls = apiCalls;
    }

    public SourceAPICallSnapshotV1 timestamp(String timestamp) {

        this.timestamp = timestamp;
        return this;
    }

    /**
     * Timestamp of this snapshot within the billing cycle in the ISO-8601 format.
     *
     * @return timestamp
     */
    @javax.annotation.Nonnull
    public String getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(String timestamp) {
        this.timestamp = timestamp;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SourceAPICallSnapshotV1 sourceAPICallSnapshotV1 = (SourceAPICallSnapshotV1) o;
        return Objects.equals(this.sourceId, sourceAPICallSnapshotV1.sourceId)
                && Objects.equals(this.apiCalls, sourceAPICallSnapshotV1.apiCalls)
                && Objects.equals(this.timestamp, sourceAPICallSnapshotV1.timestamp);
    }

    @Override
    public int hashCode() {
        return Objects.hash(sourceId, apiCalls, timestamp);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SourceAPICallSnapshotV1 {\n");
        sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
        sb.append("    apiCalls: ").append(toIndentedString(apiCalls)).append("\n");
        sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("sourceId");
        openapiFields.add("apiCalls");
        openapiFields.add("timestamp");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("sourceId");
        openapiRequiredFields.add("apiCalls");
        openapiRequiredFields.add("timestamp");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to SourceAPICallSnapshotV1
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!SourceAPICallSnapshotV1.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in SourceAPICallSnapshotV1 is not found"
                                        + " in the empty JSON string",
                                SourceAPICallSnapshotV1.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!SourceAPICallSnapshotV1.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `SourceAPICallSnapshotV1` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : SourceAPICallSnapshotV1.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("sourceId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `sourceId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("sourceId").toString()));
        }
        if (!jsonObj.get("apiCalls").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `apiCalls` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("apiCalls").toString()));
        }
        if (!jsonObj.get("timestamp").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `timestamp` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("timestamp").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!SourceAPICallSnapshotV1.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'SourceAPICallSnapshotV1' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<SourceAPICallSnapshotV1> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(SourceAPICallSnapshotV1.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<SourceAPICallSnapshotV1>() {
                        @Override
                        public void write(JsonWriter out, SourceAPICallSnapshotV1 value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public SourceAPICallSnapshotV1 read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of SourceAPICallSnapshotV1 given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of SourceAPICallSnapshotV1
     * @throws IOException if the JSON string is invalid with respect to SourceAPICallSnapshotV1
     */
    public static SourceAPICallSnapshotV1 fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, SourceAPICallSnapshotV1.class);
    }

    /**
     * Convert an instance of SourceAPICallSnapshotV1 to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
