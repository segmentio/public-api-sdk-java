/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;


import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** Returns a Destination catalog item. */
@ApiModel(description = "Returns a Destination catalog item.")
public class GetDestinationMetadataV1Output {
    public static final String SERIALIZED_NAME_DESTINATION_METADATA = "destinationMetadata";

    @SerializedName(SERIALIZED_NAME_DESTINATION_METADATA)
    private DestinationMetadata destinationMetadata;

    public GetDestinationMetadataV1Output() {}

    public GetDestinationMetadataV1Output destinationMetadata(
            DestinationMetadata destinationMetadata) {

        this.destinationMetadata = destinationMetadata;
        return this;
    }

    /**
     * Get destinationMetadata
     *
     * @return destinationMetadata
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    public DestinationMetadata getDestinationMetadata() {
        return destinationMetadata;
    }

    public void setDestinationMetadata(DestinationMetadata destinationMetadata) {
        this.destinationMetadata = destinationMetadata;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetDestinationMetadataV1Output getDestinationMetadataV1Output =
                (GetDestinationMetadataV1Output) o;
        return Objects.equals(
                this.destinationMetadata, getDestinationMetadataV1Output.destinationMetadata);
    }

    @Override
    public int hashCode() {
        return Objects.hash(destinationMetadata);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetDestinationMetadataV1Output {\n");
        sb.append("    destinationMetadata: ")
                .append(toIndentedString(destinationMetadata))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("destinationMetadata");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("destinationMetadata");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to
     *     GetDestinationMetadataV1Output
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!GetDestinationMetadataV1Output.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in GetDestinationMetadataV1Output is not"
                                        + " found in the empty JSON string",
                                GetDestinationMetadataV1Output.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!GetDestinationMetadataV1Output.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `GetDestinationMetadataV1Output` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : GetDestinationMetadataV1Output.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonObj.toString()));
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetDestinationMetadataV1Output.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetDestinationMetadataV1Output' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetDestinationMetadataV1Output> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(GetDestinationMetadataV1Output.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<GetDestinationMetadataV1Output>() {
                        @Override
                        public void write(JsonWriter out, GetDestinationMetadataV1Output value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public GetDestinationMetadataV1Output read(JsonReader in)
                                throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of GetDestinationMetadataV1Output given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetDestinationMetadataV1Output
     * @throws IOException if the JSON string is invalid with respect to
     *     GetDestinationMetadataV1Output
     */
    public static GetDestinationMetadataV1Output fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, GetDestinationMetadataV1Output.class);
    }

    /**
     * Convert an instance of GetDestinationMetadataV1Output to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
