/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * The version of the OpenAPI document: 32.0.5
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;


import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** Defines a permission to apply to the user in an invite. */
@ApiModel(description = "Defines a permission to apply to the user in an invite.")
public class InvitePermissionV1 {
    public static final String SERIALIZED_NAME_ROLE_ID = "roleId";

    @SerializedName(SERIALIZED_NAME_ROLE_ID)
    private String roleId;

    public static final String SERIALIZED_NAME_RESOURCES = "resources";

    @SerializedName(SERIALIZED_NAME_RESOURCES)
    private List<ResourceV1> resources = null;

    public static final String SERIALIZED_NAME_LABELS = "labels";

    @SerializedName(SERIALIZED_NAME_LABELS)
    private List<AllowedLabelBeta> labels = null;

    public InvitePermissionV1() {}

    public InvitePermissionV1 roleId(String roleId) {

        this.roleId = roleId;
        return this;
    }

    /**
     * The id of the role.
     *
     * @return roleId
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "The id of the role.")
    public String getRoleId() {
        return roleId;
    }

    public void setRoleId(String roleId) {
        this.roleId = roleId;
    }

    public InvitePermissionV1 resources(List<ResourceV1> resources) {

        this.resources = resources;
        return this;
    }

    public InvitePermissionV1 addResourcesItem(ResourceV1 resourcesItem) {
        if (this.resources == null) {
            this.resources = new ArrayList<>();
        }
        this.resources.add(resourcesItem);
        return this;
    }

    /**
     * The resources to grant the invited users access to.
     *
     * @return resources
     */
    @javax.annotation.Nullable
    @ApiModelProperty(value = "The resources to grant the invited users access to.")
    public List<ResourceV1> getResources() {
        return resources;
    }

    public void setResources(List<ResourceV1> resources) {
        this.resources = resources;
    }

    public InvitePermissionV1 labels(List<AllowedLabelBeta> labels) {

        this.labels = labels;
        return this;
    }

    public InvitePermissionV1 addLabelsItem(AllowedLabelBeta labelsItem) {
        if (this.labels == null) {
            this.labels = new ArrayList<>();
        }
        this.labels.add(labelsItem);
        return this;
    }

    /**
     * The labels that determine which resources to grant users access to.
     *
     * @return labels
     */
    @javax.annotation.Nullable
    @ApiModelProperty(value = "The labels that determine which resources to grant users access to.")
    public List<AllowedLabelBeta> getLabels() {
        return labels;
    }

    public void setLabels(List<AllowedLabelBeta> labels) {
        this.labels = labels;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InvitePermissionV1 invitePermissionV1 = (InvitePermissionV1) o;
        return Objects.equals(this.roleId, invitePermissionV1.roleId)
                && Objects.equals(this.resources, invitePermissionV1.resources)
                && Objects.equals(this.labels, invitePermissionV1.labels);
    }

    @Override
    public int hashCode() {
        return Objects.hash(roleId, resources, labels);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class InvitePermissionV1 {\n");
        sb.append("    roleId: ").append(toIndentedString(roleId)).append("\n");
        sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
        sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("roleId");
        openapiFields.add("resources");
        openapiFields.add("labels");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("roleId");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to InvitePermissionV1
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!InvitePermissionV1.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in InvitePermissionV1 is not found in the"
                                        + " empty JSON string",
                                InvitePermissionV1.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!InvitePermissionV1.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `InvitePermissionV1` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : InvitePermissionV1.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonObj.toString()));
            }
        }
        if (!jsonObj.get("roleId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `roleId` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("roleId").toString()));
        }
        if (jsonObj.get("resources") != null && !jsonObj.get("resources").isJsonNull()) {
            JsonArray jsonArrayresources = jsonObj.getAsJsonArray("resources");
            if (jsonArrayresources != null) {
                // ensure the json data is an array
                if (!jsonObj.get("resources").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `resources` to be an array in the JSON"
                                            + " string but got `%s`",
                                    jsonObj.get("resources").toString()));
                }
            }
        }
        if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull()) {
            JsonArray jsonArraylabels = jsonObj.getAsJsonArray("labels");
            if (jsonArraylabels != null) {
                // ensure the json data is an array
                if (!jsonObj.get("labels").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `labels` to be an array in the JSON string"
                                            + " but got `%s`",
                                    jsonObj.get("labels").toString()));
                }
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!InvitePermissionV1.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'InvitePermissionV1' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<InvitePermissionV1> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(InvitePermissionV1.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<InvitePermissionV1>() {
                        @Override
                        public void write(JsonWriter out, InvitePermissionV1 value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public InvitePermissionV1 read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of InvitePermissionV1 given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of InvitePermissionV1
     * @throws IOException if the JSON string is invalid with respect to InvitePermissionV1
     */
    public static InvitePermissionV1 fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, InvitePermissionV1.class);
    }

    /**
     * Convert an instance of InvitePermissionV1 to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
