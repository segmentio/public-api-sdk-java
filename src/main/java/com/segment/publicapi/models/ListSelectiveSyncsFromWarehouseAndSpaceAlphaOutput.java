/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;


import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** Results containing the Selective Sync configuration for a Space Warehouse Connection. */
@ApiModel(
        description =
                "Results containing the Selective Sync configuration for a Space Warehouse"
                        + " Connection.")
public class ListSelectiveSyncsFromWarehouseAndSpaceAlphaOutput {
    public static final String SERIALIZED_NAME_ITEMS = "items";

    @SerializedName(SERIALIZED_NAME_ITEMS)
    private List<SpaceWarehouseSelectiveSyncItemAlpha> items = new ArrayList<>();

    public static final String SERIALIZED_NAME_ENABLE_EVENT_TABLES = "enableEventTables";

    @SerializedName(SERIALIZED_NAME_ENABLE_EVENT_TABLES)
    private Boolean enableEventTables;

    public static final String SERIALIZED_NAME_PAGINATION = "pagination";

    @SerializedName(SERIALIZED_NAME_PAGINATION)
    private Pagination pagination;

    public ListSelectiveSyncsFromWarehouseAndSpaceAlphaOutput() {}

    public ListSelectiveSyncsFromWarehouseAndSpaceAlphaOutput items(
            List<SpaceWarehouseSelectiveSyncItemAlpha> items) {

        this.items = items;
        return this;
    }

    public ListSelectiveSyncsFromWarehouseAndSpaceAlphaOutput addItemsItem(
            SpaceWarehouseSelectiveSyncItemAlpha itemsItem) {
        this.items.add(itemsItem);
        return this;
    }

    /**
     * Represents a list of collections and properties synced to the Warehouse.
     *
     * @return items
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(
            required = true,
            value = "Represents a list of collections and properties synced to the Warehouse.")
    public List<SpaceWarehouseSelectiveSyncItemAlpha> getItems() {
        return items;
    }

    public void setItems(List<SpaceWarehouseSelectiveSyncItemAlpha> items) {
        this.items = items;
    }

    public ListSelectiveSyncsFromWarehouseAndSpaceAlphaOutput enableEventTables(
            Boolean enableEventTables) {

        this.enableEventTables = enableEventTables;
        return this;
    }

    /**
     * A flag that represent if all event Tables are enable or disable.
     *
     * @return enableEventTables
     */
    @javax.annotation.Nullable
    @ApiModelProperty(value = "A flag that represent if all event Tables are enable or disable.")
    public Boolean getEnableEventTables() {
        return enableEventTables;
    }

    public void setEnableEventTables(Boolean enableEventTables) {
        this.enableEventTables = enableEventTables;
    }

    public ListSelectiveSyncsFromWarehouseAndSpaceAlphaOutput pagination(Pagination pagination) {

        this.pagination = pagination;
        return this;
    }

    /**
     * Get pagination
     *
     * @return pagination
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    public Pagination getPagination() {
        return pagination;
    }

    public void setPagination(Pagination pagination) {
        this.pagination = pagination;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListSelectiveSyncsFromWarehouseAndSpaceAlphaOutput
                listSelectiveSyncsFromWarehouseAndSpaceAlphaOutput =
                        (ListSelectiveSyncsFromWarehouseAndSpaceAlphaOutput) o;
        return Objects.equals(this.items, listSelectiveSyncsFromWarehouseAndSpaceAlphaOutput.items)
                && Objects.equals(
                        this.enableEventTables,
                        listSelectiveSyncsFromWarehouseAndSpaceAlphaOutput.enableEventTables)
                && Objects.equals(
                        this.pagination,
                        listSelectiveSyncsFromWarehouseAndSpaceAlphaOutput.pagination);
    }

    @Override
    public int hashCode() {
        return Objects.hash(items, enableEventTables, pagination);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ListSelectiveSyncsFromWarehouseAndSpaceAlphaOutput {\n");
        sb.append("    items: ").append(toIndentedString(items)).append("\n");
        sb.append("    enableEventTables: ")
                .append(toIndentedString(enableEventTables))
                .append("\n");
        sb.append("    pagination: ").append(toIndentedString(pagination)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("items");
        openapiFields.add("enableEventTables");
        openapiFields.add("pagination");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("items");
        openapiRequiredFields.add("pagination");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to
     *     ListSelectiveSyncsFromWarehouseAndSpaceAlphaOutput
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!ListSelectiveSyncsFromWarehouseAndSpaceAlphaOutput.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " ListSelectiveSyncsFromWarehouseAndSpaceAlphaOutput is not"
                                    + " found in the empty JSON string",
                                ListSelectiveSyncsFromWarehouseAndSpaceAlphaOutput
                                        .openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!ListSelectiveSyncsFromWarehouseAndSpaceAlphaOutput.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `ListSelectiveSyncsFromWarehouseAndSpaceAlphaOutput`"
                                        + " properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField :
                ListSelectiveSyncsFromWarehouseAndSpaceAlphaOutput.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonObj.toString()));
            }
        }
        // ensure the json data is an array
        if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `items` to be an array in the JSON string but got"
                                    + " `%s`",
                            jsonObj.get("items").toString()));
        }

        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ListSelectiveSyncsFromWarehouseAndSpaceAlphaOutput.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'ListSelectiveSyncsFromWarehouseAndSpaceAlphaOutput' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ListSelectiveSyncsFromWarehouseAndSpaceAlphaOutput> thisAdapter =
                    gson.getDelegateAdapter(
                            this,
                            TypeToken.get(
                                    ListSelectiveSyncsFromWarehouseAndSpaceAlphaOutput.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<ListSelectiveSyncsFromWarehouseAndSpaceAlphaOutput>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                ListSelectiveSyncsFromWarehouseAndSpaceAlphaOutput value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public ListSelectiveSyncsFromWarehouseAndSpaceAlphaOutput read(
                                JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of ListSelectiveSyncsFromWarehouseAndSpaceAlphaOutput given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ListSelectiveSyncsFromWarehouseAndSpaceAlphaOutput
     * @throws IOException if the JSON string is invalid with respect to
     *     ListSelectiveSyncsFromWarehouseAndSpaceAlphaOutput
     */
    public static ListSelectiveSyncsFromWarehouseAndSpaceAlphaOutput fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, ListSelectiveSyncsFromWarehouseAndSpaceAlphaOutput.class);
    }

    /**
     * Convert an instance of ListSelectiveSyncsFromWarehouseAndSpaceAlphaOutput to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
