/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** Object representing the extract phase + details. */
public class SyncExtractPhase {
    public static final String SERIALIZED_NAME_ADDED_COUNT = "addedCount";

    @SerializedName(SERIALIZED_NAME_ADDED_COUNT)
    private String addedCount;

    public static final String SERIALIZED_NAME_UPDATED_COUNT = "updatedCount";

    @SerializedName(SERIALIZED_NAME_UPDATED_COUNT)
    private String updatedCount;

    public static final String SERIALIZED_NAME_DELETED_COUNT = "deletedCount";

    @SerializedName(SERIALIZED_NAME_DELETED_COUNT)
    private String deletedCount;

    public static final String SERIALIZED_NAME_EXTRACT_COUNT = "extractCount";

    @SerializedName(SERIALIZED_NAME_EXTRACT_COUNT)
    private String extractCount;

    public static final String SERIALIZED_NAME_ERROR_CODE = "errorCode";

    @SerializedName(SERIALIZED_NAME_ERROR_CODE)
    private String errorCode;

    public static final String SERIALIZED_NAME_STARTED_AT = "startedAt";

    @SerializedName(SERIALIZED_NAME_STARTED_AT)
    private String startedAt;

    public static final String SERIALIZED_NAME_FINISHED_AT = "finishedAt";

    @SerializedName(SERIALIZED_NAME_FINISHED_AT)
    private String finishedAt;

    public SyncExtractPhase() {}

    public SyncExtractPhase addedCount(String addedCount) {

        this.addedCount = addedCount;
        return this;
    }

    /**
     * Counts the subset of records with status&#x3D;new, which indicates records that were
     * created/inserted/added.
     *
     * @return addedCount
     */
    @javax.annotation.Nonnull
    public String getAddedCount() {
        return addedCount;
    }

    public void setAddedCount(String addedCount) {
        this.addedCount = addedCount;
    }

    public SyncExtractPhase updatedCount(String updatedCount) {

        this.updatedCount = updatedCount;
        return this;
    }

    /**
     * Counts the subset of records with status&#x3D;updated, which indicates records that were
     * modified/updated.
     *
     * @return updatedCount
     */
    @javax.annotation.Nonnull
    public String getUpdatedCount() {
        return updatedCount;
    }

    public void setUpdatedCount(String updatedCount) {
        this.updatedCount = updatedCount;
    }

    public SyncExtractPhase deletedCount(String deletedCount) {

        this.deletedCount = deletedCount;
        return this;
    }

    /**
     * Counts the subset of records with status&#x3D;deleted, which indicates records that were
     * deleted/removed.
     *
     * @return deletedCount
     */
    @javax.annotation.Nonnull
    public String getDeletedCount() {
        return deletedCount;
    }

    public void setDeletedCount(String deletedCount) {
        this.deletedCount = deletedCount;
    }

    public SyncExtractPhase extractCount(String extractCount) {

        this.extractCount = extractCount;
        return this;
    }

    /**
     * Counts the total number of records/rows handled by extract, across all statuses.
     *
     * @return extractCount
     */
    @javax.annotation.Nonnull
    public String getExtractCount() {
        return extractCount;
    }

    public void setExtractCount(String extractCount) {
        this.extractCount = extractCount;
    }

    public SyncExtractPhase errorCode(String errorCode) {

        this.errorCode = errorCode;
        return this;
    }

    /**
     * Error code indicates a fatal sync error code, if applicable.
     *
     * @return errorCode
     */
    @javax.annotation.Nonnull
    public String getErrorCode() {
        return errorCode;
    }

    public void setErrorCode(String errorCode) {
        this.errorCode = errorCode;
    }

    public SyncExtractPhase startedAt(String startedAt) {

        this.startedAt = startedAt;
        return this;
    }

    /**
     * Time that the extract phase started.
     *
     * @return startedAt
     */
    @javax.annotation.Nonnull
    public String getStartedAt() {
        return startedAt;
    }

    public void setStartedAt(String startedAt) {
        this.startedAt = startedAt;
    }

    public SyncExtractPhase finishedAt(String finishedAt) {

        this.finishedAt = finishedAt;
        return this;
    }

    /**
     * Time that the extract phase finished.
     *
     * @return finishedAt
     */
    @javax.annotation.Nonnull
    public String getFinishedAt() {
        return finishedAt;
    }

    public void setFinishedAt(String finishedAt) {
        this.finishedAt = finishedAt;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SyncExtractPhase syncExtractPhase = (SyncExtractPhase) o;
        return Objects.equals(this.addedCount, syncExtractPhase.addedCount)
                && Objects.equals(this.updatedCount, syncExtractPhase.updatedCount)
                && Objects.equals(this.deletedCount, syncExtractPhase.deletedCount)
                && Objects.equals(this.extractCount, syncExtractPhase.extractCount)
                && Objects.equals(this.errorCode, syncExtractPhase.errorCode)
                && Objects.equals(this.startedAt, syncExtractPhase.startedAt)
                && Objects.equals(this.finishedAt, syncExtractPhase.finishedAt);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                addedCount,
                updatedCount,
                deletedCount,
                extractCount,
                errorCode,
                startedAt,
                finishedAt);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SyncExtractPhase {\n");
        sb.append("    addedCount: ").append(toIndentedString(addedCount)).append("\n");
        sb.append("    updatedCount: ").append(toIndentedString(updatedCount)).append("\n");
        sb.append("    deletedCount: ").append(toIndentedString(deletedCount)).append("\n");
        sb.append("    extractCount: ").append(toIndentedString(extractCount)).append("\n");
        sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
        sb.append("    startedAt: ").append(toIndentedString(startedAt)).append("\n");
        sb.append("    finishedAt: ").append(toIndentedString(finishedAt)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("addedCount");
        openapiFields.add("updatedCount");
        openapiFields.add("deletedCount");
        openapiFields.add("extractCount");
        openapiFields.add("errorCode");
        openapiFields.add("startedAt");
        openapiFields.add("finishedAt");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("addedCount");
        openapiRequiredFields.add("updatedCount");
        openapiRequiredFields.add("deletedCount");
        openapiRequiredFields.add("extractCount");
        openapiRequiredFields.add("errorCode");
        openapiRequiredFields.add("startedAt");
        openapiRequiredFields.add("finishedAt");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to SyncExtractPhase
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!SyncExtractPhase.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in SyncExtractPhase is not found in the"
                                        + " empty JSON string",
                                SyncExtractPhase.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!SyncExtractPhase.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `SyncExtractPhase` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : SyncExtractPhase.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("addedCount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `addedCount` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("addedCount").toString()));
        }
        if (!jsonObj.get("updatedCount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `updatedCount` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("updatedCount").toString()));
        }
        if (!jsonObj.get("deletedCount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `deletedCount` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("deletedCount").toString()));
        }
        if (!jsonObj.get("extractCount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `extractCount` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("extractCount").toString()));
        }
        if (!jsonObj.get("errorCode").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `errorCode` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("errorCode").toString()));
        }
        if (!jsonObj.get("startedAt").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `startedAt` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("startedAt").toString()));
        }
        if (!jsonObj.get("finishedAt").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `finishedAt` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("finishedAt").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!SyncExtractPhase.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'SyncExtractPhase' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<SyncExtractPhase> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(SyncExtractPhase.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<SyncExtractPhase>() {
                        @Override
                        public void write(JsonWriter out, SyncExtractPhase value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public SyncExtractPhase read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of SyncExtractPhase given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of SyncExtractPhase
     * @throws IOException if the JSON string is invalid with respect to SyncExtractPhase
     */
    public static SyncExtractPhase fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, SyncExtractPhase.class);
    }

    /**
     * Convert an instance of SyncExtractPhase to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
