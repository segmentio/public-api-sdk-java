/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** EventExitRule */
public class EventExitRule {
    /** Gets or Sets exitType */
    @JsonAdapter(ExitTypeEnum.Adapter.class)
    public enum ExitTypeEnum {
        EVENT_PERFORMED("EVENT_PERFORMED");

        private String value;

        ExitTypeEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static ExitTypeEnum fromValue(String value) {
            for (ExitTypeEnum b : ExitTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<ExitTypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final ExitTypeEnum enumeration)
                    throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public ExitTypeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return ExitTypeEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_EXIT_TYPE = "exitType";

    @SerializedName(SERIALIZED_NAME_EXIT_TYPE)
    private ExitTypeEnum exitType;

    public static final String SERIALIZED_NAME_CONDITION = "condition";

    @SerializedName(SERIALIZED_NAME_CONDITION)
    private String condition;

    /** Gets or Sets type */
    @JsonAdapter(TypeEnum.Adapter.class)
    public enum TypeEnum {
        EXIT_RULE("EXIT_RULE");

        private String value;

        TypeEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static TypeEnum fromValue(String value) {
            for (TypeEnum b : TypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<TypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final TypeEnum enumeration)
                    throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public TypeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return TypeEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_TYPE = "type";

    @SerializedName(SERIALIZED_NAME_TYPE)
    private TypeEnum type;

    public static final String SERIALIZED_NAME_ENABLED = "enabled";

    @SerializedName(SERIALIZED_NAME_ENABLED)
    private Boolean enabled;

    public static final String SERIALIZED_NAME_CONCURRENCY_ENABLED = "concurrencyEnabled";

    @SerializedName(SERIALIZED_NAME_CONCURRENCY_ENABLED)
    private Boolean concurrencyEnabled;

    public static final String SERIALIZED_NAME_CONNECTED_DESTINATIONS = "connectedDestinations";

    @SerializedName(SERIALIZED_NAME_CONNECTED_DESTINATIONS)
    private List<String> connectedDestinations;

    public static final String SERIALIZED_NAME_KEY = "key";

    @SerializedName(SERIALIZED_NAME_KEY)
    private Key key;

    public EventExitRule() {}

    public EventExitRule exitType(ExitTypeEnum exitType) {

        this.exitType = exitType;
        return this;
    }

    /**
     * Get exitType
     *
     * @return exitType
     */
    @javax.annotation.Nonnull
    public ExitTypeEnum getExitType() {
        return exitType;
    }

    public void setExitType(ExitTypeEnum exitType) {
        this.exitType = exitType;
    }

    public EventExitRule condition(String condition) {

        this.condition = condition;
        return this;
    }

    /**
     * Get condition
     *
     * @return condition
     */
    @javax.annotation.Nonnull
    public String getCondition() {
        return condition;
    }

    public void setCondition(String condition) {
        this.condition = condition;
    }

    public EventExitRule type(TypeEnum type) {

        this.type = type;
        return this;
    }

    /**
     * Get type
     *
     * @return type
     */
    @javax.annotation.Nonnull
    public TypeEnum getType() {
        return type;
    }

    public void setType(TypeEnum type) {
        this.type = type;
    }

    public EventExitRule enabled(Boolean enabled) {

        this.enabled = enabled;
        return this;
    }

    /**
     * Get enabled
     *
     * @return enabled
     */
    @javax.annotation.Nonnull
    public Boolean getEnabled() {
        return enabled;
    }

    public void setEnabled(Boolean enabled) {
        this.enabled = enabled;
    }

    public EventExitRule concurrencyEnabled(Boolean concurrencyEnabled) {

        this.concurrencyEnabled = concurrencyEnabled;
        return this;
    }

    /**
     * Get concurrencyEnabled
     *
     * @return concurrencyEnabled
     */
    @javax.annotation.Nonnull
    public Boolean getConcurrencyEnabled() {
        return concurrencyEnabled;
    }

    public void setConcurrencyEnabled(Boolean concurrencyEnabled) {
        this.concurrencyEnabled = concurrencyEnabled;
    }

    public EventExitRule connectedDestinations(List<String> connectedDestinations) {

        this.connectedDestinations = connectedDestinations;
        return this;
    }

    public EventExitRule addConnectedDestinationsItem(String connectedDestinationsItem) {
        if (this.connectedDestinations == null) {
            this.connectedDestinations = new ArrayList<>();
        }
        this.connectedDestinations.add(connectedDestinationsItem);
        return this;
    }

    /**
     * Get connectedDestinations
     *
     * @return connectedDestinations
     */
    @javax.annotation.Nullable
    public List<String> getConnectedDestinations() {
        return connectedDestinations;
    }

    public void setConnectedDestinations(List<String> connectedDestinations) {
        this.connectedDestinations = connectedDestinations;
    }

    public EventExitRule key(Key key) {

        this.key = key;
        return this;
    }

    /**
     * Get key
     *
     * @return key
     */
    @javax.annotation.Nonnull
    public Key getKey() {
        return key;
    }

    public void setKey(Key key) {
        this.key = key;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EventExitRule eventExitRule = (EventExitRule) o;
        return Objects.equals(this.exitType, eventExitRule.exitType)
                && Objects.equals(this.condition, eventExitRule.condition)
                && Objects.equals(this.type, eventExitRule.type)
                && Objects.equals(this.enabled, eventExitRule.enabled)
                && Objects.equals(this.concurrencyEnabled, eventExitRule.concurrencyEnabled)
                && Objects.equals(this.connectedDestinations, eventExitRule.connectedDestinations)
                && Objects.equals(this.key, eventExitRule.key);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                exitType, condition, type, enabled, concurrencyEnabled, connectedDestinations, key);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class EventExitRule {\n");
        sb.append("    exitType: ").append(toIndentedString(exitType)).append("\n");
        sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
        sb.append("    concurrencyEnabled: ")
                .append(toIndentedString(concurrencyEnabled))
                .append("\n");
        sb.append("    connectedDestinations: ")
                .append(toIndentedString(connectedDestinations))
                .append("\n");
        sb.append("    key: ").append(toIndentedString(key)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("exitType");
        openapiFields.add("condition");
        openapiFields.add("type");
        openapiFields.add("enabled");
        openapiFields.add("concurrencyEnabled");
        openapiFields.add("connectedDestinations");
        openapiFields.add("key");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("exitType");
        openapiRequiredFields.add("condition");
        openapiRequiredFields.add("type");
        openapiRequiredFields.add("enabled");
        openapiRequiredFields.add("concurrencyEnabled");
        openapiRequiredFields.add("key");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to EventExitRule
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!EventExitRule.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in EventExitRule is not found in the"
                                        + " empty JSON string",
                                EventExitRule.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!EventExitRule.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `EventExitRule` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : EventExitRule.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("exitType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `exitType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("exitType").toString()));
        }
        if (!jsonObj.get("condition").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `condition` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("condition").toString()));
        }
        if (!jsonObj.get("type").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `type` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("type").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("connectedDestinations") != null
                && !jsonObj.get("connectedDestinations").isJsonNull()
                && !jsonObj.get("connectedDestinations").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `connectedDestinations` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("connectedDestinations").toString()));
        }
        // validate the required field `key`
        Key.validateJsonElement(jsonObj.get("key"));
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!EventExitRule.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'EventExitRule' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<EventExitRule> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(EventExitRule.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<EventExitRule>() {
                        @Override
                        public void write(JsonWriter out, EventExitRule value) throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public EventExitRule read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of EventExitRule given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of EventExitRule
     * @throws IOException if the JSON string is invalid with respect to EventExitRule
     */
    public static EventExitRule fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, EventExitRule.class);
    }

    /**
     * Convert an instance of EventExitRule to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
