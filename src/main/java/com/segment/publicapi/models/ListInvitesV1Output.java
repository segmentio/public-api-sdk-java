/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * The version of the OpenAPI document: 32.0.4
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;


import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** Returns the list of invites. */
@ApiModel(description = "Returns the list of invites.")
public class ListInvitesV1Output {
    public static final String SERIALIZED_NAME_INVITES = "invites";

    @SerializedName(SERIALIZED_NAME_INVITES)
    private List<String> invites = new ArrayList<>();

    public static final String SERIALIZED_NAME_PAGINATION = "pagination";

    @SerializedName(SERIALIZED_NAME_PAGINATION)
    private Pagination pagination;

    public ListInvitesV1Output() {}

    public ListInvitesV1Output invites(List<String> invites) {

        this.invites = invites;
        return this;
    }

    public ListInvitesV1Output addInvitesItem(String invitesItem) {
        this.invites.add(invitesItem);
        return this;
    }

    /**
     * The list of invites.
     *
     * @return invites
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "The list of invites.")
    public List<String> getInvites() {
        return invites;
    }

    public void setInvites(List<String> invites) {
        this.invites = invites;
    }

    public ListInvitesV1Output pagination(Pagination pagination) {

        this.pagination = pagination;
        return this;
    }

    /**
     * Get pagination
     *
     * @return pagination
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    public Pagination getPagination() {
        return pagination;
    }

    public void setPagination(Pagination pagination) {
        this.pagination = pagination;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListInvitesV1Output listInvitesV1Output = (ListInvitesV1Output) o;
        return Objects.equals(this.invites, listInvitesV1Output.invites)
                && Objects.equals(this.pagination, listInvitesV1Output.pagination);
    }

    @Override
    public int hashCode() {
        return Objects.hash(invites, pagination);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ListInvitesV1Output {\n");
        sb.append("    invites: ").append(toIndentedString(invites)).append("\n");
        sb.append("    pagination: ").append(toIndentedString(pagination)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("invites");
        openapiFields.add("pagination");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("invites");
        openapiRequiredFields.add("pagination");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to ListInvitesV1Output
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!ListInvitesV1Output.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in ListInvitesV1Output is not found in"
                                        + " the empty JSON string",
                                ListInvitesV1Output.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!ListInvitesV1Output.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `ListInvitesV1Output` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : ListInvitesV1Output.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonObj.toString()));
            }
        }
        // ensure the required json array is present
        if (jsonObj.get("invites") == null) {
            throw new IllegalArgumentException(
                    "Expected the field `linkedContent` to be an array in the JSON string but got"
                            + " `null`");
        } else if (!jsonObj.get("invites").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `invites` to be an array in the JSON string but got"
                                    + " `%s`",
                            jsonObj.get("invites").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ListInvitesV1Output.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ListInvitesV1Output' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ListInvitesV1Output> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(ListInvitesV1Output.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<ListInvitesV1Output>() {
                        @Override
                        public void write(JsonWriter out, ListInvitesV1Output value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public ListInvitesV1Output read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of ListInvitesV1Output given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ListInvitesV1Output
     * @throws IOException if the JSON string is invalid with respect to ListInvitesV1Output
     */
    public static ListInvitesV1Output fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, ListInvitesV1Output.class);
    }

    /**
     * Convert an instance of ListInvitesV1Output to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
