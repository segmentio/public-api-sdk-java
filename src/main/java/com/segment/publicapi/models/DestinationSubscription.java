/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.openapitools.jackson.nullable.JsonNullable;

/** DestinationSubscription */
public class DestinationSubscription {
    public static final String SERIALIZED_NAME_ID = "id";

    @SerializedName(SERIALIZED_NAME_ID)
    private String id;

    public static final String SERIALIZED_NAME_NAME = "name";

    @SerializedName(SERIALIZED_NAME_NAME)
    private String name;

    public static final String SERIALIZED_NAME_ACTION_ID = "actionId";

    @SerializedName(SERIALIZED_NAME_ACTION_ID)
    private String actionId;

    public static final String SERIALIZED_NAME_ACTION_SLUG = "actionSlug";

    @SerializedName(SERIALIZED_NAME_ACTION_SLUG)
    private String actionSlug;

    public static final String SERIALIZED_NAME_DESTINATION_ID = "destinationId";

    @SerializedName(SERIALIZED_NAME_DESTINATION_ID)
    private String destinationId;

    public static final String SERIALIZED_NAME_ENABLED = "enabled";

    @SerializedName(SERIALIZED_NAME_ENABLED)
    private Boolean enabled;

    public static final String SERIALIZED_NAME_SETTINGS = "settings";

    @SerializedName(SERIALIZED_NAME_SETTINGS)
    private Map<String, Object> settings;

    public static final String SERIALIZED_NAME_TRIGGER = "trigger";

    @SerializedName(SERIALIZED_NAME_TRIGGER)
    private String trigger;

    public static final String SERIALIZED_NAME_MODEL_ID = "modelId";

    @SerializedName(SERIALIZED_NAME_MODEL_ID)
    private String modelId;

    public static final String SERIALIZED_NAME_REVERSE_E_T_L_SCHEDULE = "reverseETLSchedule";

    @SerializedName(SERIALIZED_NAME_REVERSE_E_T_L_SCHEDULE)
    private Object reverseETLSchedule = null;

    public DestinationSubscription() {}

    public DestinationSubscription id(String id) {

        this.id = id;
        return this;
    }

    /**
     * The unique identifier for the subscription.
     *
     * @return id
     */
    @javax.annotation.Nonnull
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public DestinationSubscription name(String name) {

        this.name = name;
        return this;
    }

    /**
     * The name of the subscription.
     *
     * @return name
     */
    @javax.annotation.Nonnull
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public DestinationSubscription actionId(String actionId) {

        this.actionId = actionId;
        return this;
    }

    /**
     * The unique identifier for the Destination action to trigger.
     *
     * @return actionId
     */
    @javax.annotation.Nonnull
    public String getActionId() {
        return actionId;
    }

    public void setActionId(String actionId) {
        this.actionId = actionId;
    }

    public DestinationSubscription actionSlug(String actionSlug) {

        this.actionSlug = actionSlug;
        return this;
    }

    /**
     * The URL-friendly key for the associated Destination action.
     *
     * @return actionSlug
     */
    @javax.annotation.Nonnull
    public String getActionSlug() {
        return actionSlug;
    }

    public void setActionSlug(String actionSlug) {
        this.actionSlug = actionSlug;
    }

    public DestinationSubscription destinationId(String destinationId) {

        this.destinationId = destinationId;
        return this;
    }

    /**
     * The associated Destination instance id.
     *
     * @return destinationId
     */
    @javax.annotation.Nonnull
    public String getDestinationId() {
        return destinationId;
    }

    public void setDestinationId(String destinationId) {
        this.destinationId = destinationId;
    }

    public DestinationSubscription enabled(Boolean enabled) {

        this.enabled = enabled;
        return this;
    }

    /**
     * Is the subscription enabled.
     *
     * @return enabled
     */
    @javax.annotation.Nonnull
    public Boolean getEnabled() {
        return enabled;
    }

    public void setEnabled(Boolean enabled) {
        this.enabled = enabled;
    }

    public DestinationSubscription settings(Map<String, Object> settings) {

        this.settings = settings;
        return this;
    }

    public DestinationSubscription putSettingsItem(String key, Object settingsItem) {
        if (this.settings == null) {
            this.settings = new HashMap<>();
        }
        this.settings.put(key, settingsItem);
        return this;
    }

    /**
     * Represents settings used to configure an action subscription.
     *
     * @return settings
     */
    @javax.annotation.Nonnull
    public Map<String, Object> getSettings() {
        return settings;
    }

    public void setSettings(Map<String, Object> settings) {
        this.settings = settings;
    }

    public DestinationSubscription trigger(String trigger) {

        this.trigger = trigger;
        return this;
    }

    /**
     * FQL string that describes what events should trigger a Destination action.
     *
     * @return trigger
     */
    @javax.annotation.Nonnull
    public String getTrigger() {
        return trigger;
    }

    public void setTrigger(String trigger) {
        this.trigger = trigger;
    }

    public DestinationSubscription modelId(String modelId) {

        this.modelId = modelId;
        return this;
    }

    /**
     * The unique identifier for the linked ReverseETLModel, if this part of a Reverse ETL
     * connection.
     *
     * @return modelId
     */
    @javax.annotation.Nullable
    public String getModelId() {
        return modelId;
    }

    public void setModelId(String modelId) {
        this.modelId = modelId;
    }

    public DestinationSubscription reverseETLSchedule(Object reverseETLSchedule) {

        this.reverseETLSchedule = reverseETLSchedule;
        return this;
    }

    /**
     * The schedule for the Reverse ETL subscription.
     *
     * @return reverseETLSchedule
     */
    @javax.annotation.Nullable
    public Object getReverseETLSchedule() {
        return reverseETLSchedule;
    }

    public void setReverseETLSchedule(Object reverseETLSchedule) {
        this.reverseETLSchedule = reverseETLSchedule;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DestinationSubscription destinationSubscription = (DestinationSubscription) o;
        return Objects.equals(this.id, destinationSubscription.id)
                && Objects.equals(this.name, destinationSubscription.name)
                && Objects.equals(this.actionId, destinationSubscription.actionId)
                && Objects.equals(this.actionSlug, destinationSubscription.actionSlug)
                && Objects.equals(this.destinationId, destinationSubscription.destinationId)
                && Objects.equals(this.enabled, destinationSubscription.enabled)
                && Objects.equals(this.settings, destinationSubscription.settings)
                && Objects.equals(this.trigger, destinationSubscription.trigger)
                && Objects.equals(this.modelId, destinationSubscription.modelId)
                && Objects.equals(
                        this.reverseETLSchedule, destinationSubscription.reverseETLSchedule);
    }

    private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
        return a == b
                || (a != null
                        && b != null
                        && a.isPresent()
                        && b.isPresent()
                        && Objects.deepEquals(a.get(), b.get()));
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                id,
                name,
                actionId,
                actionSlug,
                destinationId,
                enabled,
                settings,
                trigger,
                modelId,
                reverseETLSchedule);
    }

    private static <T> int hashCodeNullable(JsonNullable<T> a) {
        if (a == null) {
            return 1;
        }
        return a.isPresent() ? Arrays.deepHashCode(new Object[] {a.get()}) : 31;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class DestinationSubscription {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    actionId: ").append(toIndentedString(actionId)).append("\n");
        sb.append("    actionSlug: ").append(toIndentedString(actionSlug)).append("\n");
        sb.append("    destinationId: ").append(toIndentedString(destinationId)).append("\n");
        sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
        sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
        sb.append("    trigger: ").append(toIndentedString(trigger)).append("\n");
        sb.append("    modelId: ").append(toIndentedString(modelId)).append("\n");
        sb.append("    reverseETLSchedule: ")
                .append(toIndentedString(reverseETLSchedule))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("id");
        openapiFields.add("name");
        openapiFields.add("actionId");
        openapiFields.add("actionSlug");
        openapiFields.add("destinationId");
        openapiFields.add("enabled");
        openapiFields.add("settings");
        openapiFields.add("trigger");
        openapiFields.add("modelId");
        openapiFields.add("reverseETLSchedule");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("id");
        openapiRequiredFields.add("name");
        openapiRequiredFields.add("actionId");
        openapiRequiredFields.add("actionSlug");
        openapiRequiredFields.add("destinationId");
        openapiRequiredFields.add("enabled");
        openapiRequiredFields.add("settings");
        openapiRequiredFields.add("trigger");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to DestinationSubscription
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!DestinationSubscription.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in DestinationSubscription is not found"
                                        + " in the empty JSON string",
                                DestinationSubscription.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!DestinationSubscription.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `DestinationSubscription` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : DestinationSubscription.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("id").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `id` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("id").toString()));
        }
        if (!jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `name` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("name").toString()));
        }
        if (!jsonObj.get("actionId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `actionId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("actionId").toString()));
        }
        if (!jsonObj.get("actionSlug").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `actionSlug` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("actionSlug").toString()));
        }
        if (!jsonObj.get("destinationId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `destinationId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("destinationId").toString()));
        }
        if (!jsonObj.get("trigger").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `trigger` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("trigger").toString()));
        }
        if ((jsonObj.get("modelId") != null && !jsonObj.get("modelId").isJsonNull())
                && !jsonObj.get("modelId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `modelId` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("modelId").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!DestinationSubscription.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'DestinationSubscription' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<DestinationSubscription> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(DestinationSubscription.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<DestinationSubscription>() {
                        @Override
                        public void write(JsonWriter out, DestinationSubscription value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public DestinationSubscription read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of DestinationSubscription given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of DestinationSubscription
     * @throws IOException if the JSON string is invalid with respect to DestinationSubscription
     */
    public static DestinationSubscription fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, DestinationSubscription.class);
    }

    /**
     * Convert an instance of DestinationSubscription to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
