/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** Options which should be applied when segmenting audience previews. */
public class AudiencePreviewOptions {
    public static final String SERIALIZED_NAME_FILTER_BY_EXTERNAL_IDS = "filterByExternalIds";

    @SerializedName(SERIALIZED_NAME_FILTER_BY_EXTERNAL_IDS)
    private List<String> filterByExternalIds;

    public static final String SERIALIZED_NAME_BACKFILL_EVENT_DATA_DAYS = "backfillEventDataDays";

    @SerializedName(SERIALIZED_NAME_BACKFILL_EVENT_DATA_DAYS)
    private BigDecimal backfillEventDataDays;

    public AudiencePreviewOptions() {}

    public AudiencePreviewOptions filterByExternalIds(List<String> filterByExternalIds) {

        this.filterByExternalIds = filterByExternalIds;
        return this;
    }

    public AudiencePreviewOptions addFilterByExternalIdsItem(String filterByExternalIdsItem) {
        if (this.filterByExternalIds == null) {
            this.filterByExternalIds = new ArrayList<>();
        }
        this.filterByExternalIds.add(filterByExternalIdsItem);
        return this;
    }

    /**
     * The set of profile external identifiers being used to determine audience preview membership.
     * Profiles will only be considered for audience preview membership if the profile has at least
     * one external id whose key matches a value in this set. If unspecified, a default set of
     * external identifiers will be used: &#x60;[&#39;user_id&#39;, &#39;email&#39;,
     * &#39;android.idfa&#39;, &#39;ios.idfa&#39;]&#x60;.
     *
     * @return filterByExternalIds
     */
    @javax.annotation.Nullable
    public List<String> getFilterByExternalIds() {
        return filterByExternalIds;
    }

    public void setFilterByExternalIds(List<String> filterByExternalIds) {
        this.filterByExternalIds = filterByExternalIds;
    }

    public AudiencePreviewOptions backfillEventDataDays(BigDecimal backfillEventDataDays) {

        this.backfillEventDataDays = backfillEventDataDays;
        return this;
    }

    /**
     * If specified, the value of this field indicates the number of days (specified from the date
     * the audience preview was created) that event data will be included from when determining
     * audience preview membership. If unspecified, event data will not be included when determining
     * audience preview membership.
     *
     * @return backfillEventDataDays
     */
    @javax.annotation.Nullable
    public BigDecimal getBackfillEventDataDays() {
        return backfillEventDataDays;
    }

    public void setBackfillEventDataDays(BigDecimal backfillEventDataDays) {
        this.backfillEventDataDays = backfillEventDataDays;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AudiencePreviewOptions audiencePreviewOptions = (AudiencePreviewOptions) o;
        return Objects.equals(this.filterByExternalIds, audiencePreviewOptions.filterByExternalIds)
                && Objects.equals(
                        this.backfillEventDataDays, audiencePreviewOptions.backfillEventDataDays);
    }

    @Override
    public int hashCode() {
        return Objects.hash(filterByExternalIds, backfillEventDataDays);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AudiencePreviewOptions {\n");
        sb.append("    filterByExternalIds: ")
                .append(toIndentedString(filterByExternalIds))
                .append("\n");
        sb.append("    backfillEventDataDays: ")
                .append(toIndentedString(backfillEventDataDays))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("filterByExternalIds");
        openapiFields.add("backfillEventDataDays");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to AudiencePreviewOptions
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!AudiencePreviewOptions.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in AudiencePreviewOptions is not found in"
                                        + " the empty JSON string",
                                AudiencePreviewOptions.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!AudiencePreviewOptions.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `AudiencePreviewOptions` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        // ensure the optional json data is an array if present
        if (jsonObj.get("filterByExternalIds") != null
                && !jsonObj.get("filterByExternalIds").isJsonNull()
                && !jsonObj.get("filterByExternalIds").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `filterByExternalIds` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("filterByExternalIds").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!AudiencePreviewOptions.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'AudiencePreviewOptions' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AudiencePreviewOptions> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(AudiencePreviewOptions.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<AudiencePreviewOptions>() {
                        @Override
                        public void write(JsonWriter out, AudiencePreviewOptions value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public AudiencePreviewOptions read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of AudiencePreviewOptions given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of AudiencePreviewOptions
     * @throws IOException if the JSON string is invalid with respect to AudiencePreviewOptions
     */
    public static AudiencePreviewOptions fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, AudiencePreviewOptions.class);
    }

    /**
     * Convert an instance of AudiencePreviewOptions to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
