/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * Represents a Destination within Segment. A Destination is a target for Segment to forward data
 * to, and represents a tool or storage Destination.
 */
public class DestinationMetadataV1 {
    public static final String SERIALIZED_NAME_ID = "id";

    @SerializedName(SERIALIZED_NAME_ID)
    private String id;

    public static final String SERIALIZED_NAME_NAME = "name";

    @SerializedName(SERIALIZED_NAME_NAME)
    private String name;

    public static final String SERIALIZED_NAME_DESCRIPTION = "description";

    @SerializedName(SERIALIZED_NAME_DESCRIPTION)
    private String description;

    public static final String SERIALIZED_NAME_SLUG = "slug";

    @SerializedName(SERIALIZED_NAME_SLUG)
    private String slug;

    public static final String SERIALIZED_NAME_LOGOS = "logos";

    @SerializedName(SERIALIZED_NAME_LOGOS)
    private LogosBeta logos;

    public static final String SERIALIZED_NAME_OPTIONS = "options";

    @SerializedName(SERIALIZED_NAME_OPTIONS)
    private List<IntegrationOptionBeta> options = new ArrayList<>();

    /** Support status of the Destination. */
    @JsonAdapter(StatusEnum.Adapter.class)
    public enum StatusEnum {
        DEPRECATED("DEPRECATED"),

        PRIVATE_BETA("PRIVATE_BETA"),

        PRIVATE_BUILDING("PRIVATE_BUILDING"),

        PRIVATE_SUBMITTED("PRIVATE_SUBMITTED"),

        PUBLIC("PUBLIC"),

        PUBLIC_BETA("PUBLIC_BETA"),

        UNAVAILABLE("UNAVAILABLE");

        private String value;

        StatusEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static StatusEnum fromValue(String value) {
            for (StatusEnum b : StatusEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<StatusEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final StatusEnum enumeration)
                    throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public StatusEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return StatusEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_STATUS = "status";

    @SerializedName(SERIALIZED_NAME_STATUS)
    private StatusEnum status;

    public static final String SERIALIZED_NAME_PREVIOUS_NAMES = "previousNames";

    @SerializedName(SERIALIZED_NAME_PREVIOUS_NAMES)
    private List<String> previousNames = new ArrayList<>();

    public static final String SERIALIZED_NAME_CATEGORIES = "categories";

    @SerializedName(SERIALIZED_NAME_CATEGORIES)
    private List<String> categories = new ArrayList<>();

    public static final String SERIALIZED_NAME_WEBSITE = "website";

    @SerializedName(SERIALIZED_NAME_WEBSITE)
    private String website;

    public static final String SERIALIZED_NAME_COMPONENTS = "components";

    @SerializedName(SERIALIZED_NAME_COMPONENTS)
    private List<DestinationMetadataComponentV1> components = new ArrayList<>();

    public static final String SERIALIZED_NAME_SUPPORTED_FEATURES = "supportedFeatures";

    @SerializedName(SERIALIZED_NAME_SUPPORTED_FEATURES)
    private DestinationMetadataFeaturesV1 supportedFeatures;

    public static final String SERIALIZED_NAME_SUPPORTED_METHODS = "supportedMethods";

    @SerializedName(SERIALIZED_NAME_SUPPORTED_METHODS)
    private DestinationMetadataMethodsV1 supportedMethods;

    public static final String SERIALIZED_NAME_SUPPORTED_PLATFORMS = "supportedPlatforms";

    @SerializedName(SERIALIZED_NAME_SUPPORTED_PLATFORMS)
    private DestinationMetadataPlatformsV1 supportedPlatforms;

    public static final String SERIALIZED_NAME_ACTIONS = "actions";

    @SerializedName(SERIALIZED_NAME_ACTIONS)
    private List<DestinationMetadataActionV1> actions = new ArrayList<>();

    public static final String SERIALIZED_NAME_PRESETS = "presets";

    @SerializedName(SERIALIZED_NAME_PRESETS)
    private List<DestinationMetadataSubscriptionPresetV1> presets = new ArrayList<>();

    public static final String SERIALIZED_NAME_CONTACTS = "contacts";

    @SerializedName(SERIALIZED_NAME_CONTACTS)
    private List<Contact> contacts;

    public static final String SERIALIZED_NAME_PARTNER_OWNED = "partnerOwned";

    @SerializedName(SERIALIZED_NAME_PARTNER_OWNED)
    private Boolean partnerOwned;

    public static final String SERIALIZED_NAME_SUPPORTED_REGIONS = "supportedRegions";

    @SerializedName(SERIALIZED_NAME_SUPPORTED_REGIONS)
    private List<String> supportedRegions;

    public static final String SERIALIZED_NAME_REGION_ENDPOINTS = "regionEndpoints";

    @SerializedName(SERIALIZED_NAME_REGION_ENDPOINTS)
    private List<String> regionEndpoints;

    public DestinationMetadataV1() {}

    public DestinationMetadataV1 id(String id) {

        this.id = id;
        return this;
    }

    /**
     * The id of the Destination metadata. Config API note: analogous to &#x60;name&#x60;.
     *
     * @return id
     */
    @javax.annotation.Nonnull
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public DestinationMetadataV1 name(String name) {

        this.name = name;
        return this;
    }

    /**
     * The user-friendly name of the Destination. Config API note: equal to &#x60;displayName&#x60;.
     *
     * @return name
     */
    @javax.annotation.Nonnull
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public DestinationMetadataV1 description(String description) {

        this.description = description;
        return this;
    }

    /**
     * The description of the Destination.
     *
     * @return description
     */
    @javax.annotation.Nonnull
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public DestinationMetadataV1 slug(String slug) {

        this.slug = slug;
        return this;
    }

    /**
     * The slug used to identify the Destination in the Segment app.
     *
     * @return slug
     */
    @javax.annotation.Nonnull
    public String getSlug() {
        return slug;
    }

    public void setSlug(String slug) {
        this.slug = slug;
    }

    public DestinationMetadataV1 logos(LogosBeta logos) {

        this.logos = logos;
        return this;
    }

    /**
     * Get logos
     *
     * @return logos
     */
    @javax.annotation.Nonnull
    public LogosBeta getLogos() {
        return logos;
    }

    public void setLogos(LogosBeta logos) {
        this.logos = logos;
    }

    public DestinationMetadataV1 options(List<IntegrationOptionBeta> options) {

        this.options = options;
        return this;
    }

    public DestinationMetadataV1 addOptionsItem(IntegrationOptionBeta optionsItem) {
        if (this.options == null) {
            this.options = new ArrayList<>();
        }
        this.options.add(optionsItem);
        return this;
    }

    /**
     * Options configured for the Destination.
     *
     * @return options
     */
    @javax.annotation.Nonnull
    public List<IntegrationOptionBeta> getOptions() {
        return options;
    }

    public void setOptions(List<IntegrationOptionBeta> options) {
        this.options = options;
    }

    public DestinationMetadataV1 status(StatusEnum status) {

        this.status = status;
        return this;
    }

    /**
     * Support status of the Destination.
     *
     * @return status
     */
    @javax.annotation.Nonnull
    public StatusEnum getStatus() {
        return status;
    }

    public void setStatus(StatusEnum status) {
        this.status = status;
    }

    public DestinationMetadataV1 previousNames(List<String> previousNames) {

        this.previousNames = previousNames;
        return this;
    }

    public DestinationMetadataV1 addPreviousNamesItem(String previousNamesItem) {
        if (this.previousNames == null) {
            this.previousNames = new ArrayList<>();
        }
        this.previousNames.add(previousNamesItem);
        return this;
    }

    /**
     * A list of names previously used by the Destination.
     *
     * @return previousNames
     */
    @javax.annotation.Nonnull
    public List<String> getPreviousNames() {
        return previousNames;
    }

    public void setPreviousNames(List<String> previousNames) {
        this.previousNames = previousNames;
    }

    public DestinationMetadataV1 categories(List<String> categories) {

        this.categories = categories;
        return this;
    }

    public DestinationMetadataV1 addCategoriesItem(String categoriesItem) {
        if (this.categories == null) {
            this.categories = new ArrayList<>();
        }
        this.categories.add(categoriesItem);
        return this;
    }

    /**
     * A list of categories with which the Destination is associated.
     *
     * @return categories
     */
    @javax.annotation.Nonnull
    public List<String> getCategories() {
        return categories;
    }

    public void setCategories(List<String> categories) {
        this.categories = categories;
    }

    public DestinationMetadataV1 website(String website) {

        this.website = website;
        return this;
    }

    /**
     * A website URL for this Destination.
     *
     * @return website
     */
    @javax.annotation.Nonnull
    public String getWebsite() {
        return website;
    }

    public void setWebsite(String website) {
        this.website = website;
    }

    public DestinationMetadataV1 components(List<DestinationMetadataComponentV1> components) {

        this.components = components;
        return this;
    }

    public DestinationMetadataV1 addComponentsItem(DestinationMetadataComponentV1 componentsItem) {
        if (this.components == null) {
            this.components = new ArrayList<>();
        }
        this.components.add(componentsItem);
        return this;
    }

    /**
     * A list of components this Destination provides.
     *
     * @return components
     */
    @javax.annotation.Nonnull
    public List<DestinationMetadataComponentV1> getComponents() {
        return components;
    }

    public void setComponents(List<DestinationMetadataComponentV1> components) {
        this.components = components;
    }

    public DestinationMetadataV1 supportedFeatures(
            DestinationMetadataFeaturesV1 supportedFeatures) {

        this.supportedFeatures = supportedFeatures;
        return this;
    }

    /**
     * Get supportedFeatures
     *
     * @return supportedFeatures
     */
    @javax.annotation.Nonnull
    public DestinationMetadataFeaturesV1 getSupportedFeatures() {
        return supportedFeatures;
    }

    public void setSupportedFeatures(DestinationMetadataFeaturesV1 supportedFeatures) {
        this.supportedFeatures = supportedFeatures;
    }

    public DestinationMetadataV1 supportedMethods(DestinationMetadataMethodsV1 supportedMethods) {

        this.supportedMethods = supportedMethods;
        return this;
    }

    /**
     * Get supportedMethods
     *
     * @return supportedMethods
     */
    @javax.annotation.Nonnull
    public DestinationMetadataMethodsV1 getSupportedMethods() {
        return supportedMethods;
    }

    public void setSupportedMethods(DestinationMetadataMethodsV1 supportedMethods) {
        this.supportedMethods = supportedMethods;
    }

    public DestinationMetadataV1 supportedPlatforms(
            DestinationMetadataPlatformsV1 supportedPlatforms) {

        this.supportedPlatforms = supportedPlatforms;
        return this;
    }

    /**
     * Get supportedPlatforms
     *
     * @return supportedPlatforms
     */
    @javax.annotation.Nonnull
    public DestinationMetadataPlatformsV1 getSupportedPlatforms() {
        return supportedPlatforms;
    }

    public void setSupportedPlatforms(DestinationMetadataPlatformsV1 supportedPlatforms) {
        this.supportedPlatforms = supportedPlatforms;
    }

    public DestinationMetadataV1 actions(List<DestinationMetadataActionV1> actions) {

        this.actions = actions;
        return this;
    }

    public DestinationMetadataV1 addActionsItem(DestinationMetadataActionV1 actionsItem) {
        if (this.actions == null) {
            this.actions = new ArrayList<>();
        }
        this.actions.add(actionsItem);
        return this;
    }

    /**
     * Actions available for the Destination.
     *
     * @return actions
     */
    @javax.annotation.Nonnull
    public List<DestinationMetadataActionV1> getActions() {
        return actions;
    }

    public void setActions(List<DestinationMetadataActionV1> actions) {
        this.actions = actions;
    }

    public DestinationMetadataV1 presets(List<DestinationMetadataSubscriptionPresetV1> presets) {

        this.presets = presets;
        return this;
    }

    public DestinationMetadataV1 addPresetsItem(
            DestinationMetadataSubscriptionPresetV1 presetsItem) {
        if (this.presets == null) {
            this.presets = new ArrayList<>();
        }
        this.presets.add(presetsItem);
        return this;
    }

    /**
     * Predefined Destination subscriptions that can optionally be applied when connecting a new
     * instance of the Destination.
     *
     * @return presets
     */
    @javax.annotation.Nonnull
    public List<DestinationMetadataSubscriptionPresetV1> getPresets() {
        return presets;
    }

    public void setPresets(List<DestinationMetadataSubscriptionPresetV1> presets) {
        this.presets = presets;
    }

    public DestinationMetadataV1 contacts(List<Contact> contacts) {

        this.contacts = contacts;
        return this;
    }

    public DestinationMetadataV1 addContactsItem(Contact contactsItem) {
        if (this.contacts == null) {
            this.contacts = new ArrayList<>();
        }
        this.contacts.add(contactsItem);
        return this;
    }

    /**
     * Contact info for Integration Owners.
     *
     * @return contacts
     */
    @javax.annotation.Nullable
    public List<Contact> getContacts() {
        return contacts;
    }

    public void setContacts(List<Contact> contacts) {
        this.contacts = contacts;
    }

    public DestinationMetadataV1 partnerOwned(Boolean partnerOwned) {

        this.partnerOwned = partnerOwned;
        return this;
    }

    /**
     * Partner Owned flag.
     *
     * @return partnerOwned
     */
    @javax.annotation.Nullable
    public Boolean getPartnerOwned() {
        return partnerOwned;
    }

    public void setPartnerOwned(Boolean partnerOwned) {
        this.partnerOwned = partnerOwned;
    }

    public DestinationMetadataV1 supportedRegions(List<String> supportedRegions) {

        this.supportedRegions = supportedRegions;
        return this;
    }

    public DestinationMetadataV1 addSupportedRegionsItem(String supportedRegionsItem) {
        if (this.supportedRegions == null) {
            this.supportedRegions = new ArrayList<>();
        }
        this.supportedRegions.add(supportedRegionsItem);
        return this;
    }

    /**
     * A list of supported regions for this Destination.
     *
     * @return supportedRegions
     */
    @javax.annotation.Nullable
    public List<String> getSupportedRegions() {
        return supportedRegions;
    }

    public void setSupportedRegions(List<String> supportedRegions) {
        this.supportedRegions = supportedRegions;
    }

    public DestinationMetadataV1 regionEndpoints(List<String> regionEndpoints) {

        this.regionEndpoints = regionEndpoints;
        return this;
    }

    public DestinationMetadataV1 addRegionEndpointsItem(String regionEndpointsItem) {
        if (this.regionEndpoints == null) {
            this.regionEndpoints = new ArrayList<>();
        }
        this.regionEndpoints.add(regionEndpointsItem);
        return this;
    }

    /**
     * The list of regional endpoints for this Destination.
     *
     * @return regionEndpoints
     */
    @javax.annotation.Nullable
    public List<String> getRegionEndpoints() {
        return regionEndpoints;
    }

    public void setRegionEndpoints(List<String> regionEndpoints) {
        this.regionEndpoints = regionEndpoints;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DestinationMetadataV1 destinationMetadataV1 = (DestinationMetadataV1) o;
        return Objects.equals(this.id, destinationMetadataV1.id)
                && Objects.equals(this.name, destinationMetadataV1.name)
                && Objects.equals(this.description, destinationMetadataV1.description)
                && Objects.equals(this.slug, destinationMetadataV1.slug)
                && Objects.equals(this.logos, destinationMetadataV1.logos)
                && Objects.equals(this.options, destinationMetadataV1.options)
                && Objects.equals(this.status, destinationMetadataV1.status)
                && Objects.equals(this.previousNames, destinationMetadataV1.previousNames)
                && Objects.equals(this.categories, destinationMetadataV1.categories)
                && Objects.equals(this.website, destinationMetadataV1.website)
                && Objects.equals(this.components, destinationMetadataV1.components)
                && Objects.equals(this.supportedFeatures, destinationMetadataV1.supportedFeatures)
                && Objects.equals(this.supportedMethods, destinationMetadataV1.supportedMethods)
                && Objects.equals(this.supportedPlatforms, destinationMetadataV1.supportedPlatforms)
                && Objects.equals(this.actions, destinationMetadataV1.actions)
                && Objects.equals(this.presets, destinationMetadataV1.presets)
                && Objects.equals(this.contacts, destinationMetadataV1.contacts)
                && Objects.equals(this.partnerOwned, destinationMetadataV1.partnerOwned)
                && Objects.equals(this.supportedRegions, destinationMetadataV1.supportedRegions)
                && Objects.equals(this.regionEndpoints, destinationMetadataV1.regionEndpoints);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                id,
                name,
                description,
                slug,
                logos,
                options,
                status,
                previousNames,
                categories,
                website,
                components,
                supportedFeatures,
                supportedMethods,
                supportedPlatforms,
                actions,
                presets,
                contacts,
                partnerOwned,
                supportedRegions,
                regionEndpoints);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class DestinationMetadataV1 {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
        sb.append("    logos: ").append(toIndentedString(logos)).append("\n");
        sb.append("    options: ").append(toIndentedString(options)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    previousNames: ").append(toIndentedString(previousNames)).append("\n");
        sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
        sb.append("    website: ").append(toIndentedString(website)).append("\n");
        sb.append("    components: ").append(toIndentedString(components)).append("\n");
        sb.append("    supportedFeatures: ")
                .append(toIndentedString(supportedFeatures))
                .append("\n");
        sb.append("    supportedMethods: ").append(toIndentedString(supportedMethods)).append("\n");
        sb.append("    supportedPlatforms: ")
                .append(toIndentedString(supportedPlatforms))
                .append("\n");
        sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
        sb.append("    presets: ").append(toIndentedString(presets)).append("\n");
        sb.append("    contacts: ").append(toIndentedString(contacts)).append("\n");
        sb.append("    partnerOwned: ").append(toIndentedString(partnerOwned)).append("\n");
        sb.append("    supportedRegions: ").append(toIndentedString(supportedRegions)).append("\n");
        sb.append("    regionEndpoints: ").append(toIndentedString(regionEndpoints)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("id");
        openapiFields.add("name");
        openapiFields.add("description");
        openapiFields.add("slug");
        openapiFields.add("logos");
        openapiFields.add("options");
        openapiFields.add("status");
        openapiFields.add("previousNames");
        openapiFields.add("categories");
        openapiFields.add("website");
        openapiFields.add("components");
        openapiFields.add("supportedFeatures");
        openapiFields.add("supportedMethods");
        openapiFields.add("supportedPlatforms");
        openapiFields.add("actions");
        openapiFields.add("presets");
        openapiFields.add("contacts");
        openapiFields.add("partnerOwned");
        openapiFields.add("supportedRegions");
        openapiFields.add("regionEndpoints");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("id");
        openapiRequiredFields.add("name");
        openapiRequiredFields.add("description");
        openapiRequiredFields.add("slug");
        openapiRequiredFields.add("logos");
        openapiRequiredFields.add("options");
        openapiRequiredFields.add("status");
        openapiRequiredFields.add("previousNames");
        openapiRequiredFields.add("categories");
        openapiRequiredFields.add("website");
        openapiRequiredFields.add("components");
        openapiRequiredFields.add("supportedFeatures");
        openapiRequiredFields.add("supportedMethods");
        openapiRequiredFields.add("supportedPlatforms");
        openapiRequiredFields.add("actions");
        openapiRequiredFields.add("presets");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to DestinationMetadataV1
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!DestinationMetadataV1.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in DestinationMetadataV1 is not found in"
                                        + " the empty JSON string",
                                DestinationMetadataV1.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!DestinationMetadataV1.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `DestinationMetadataV1` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : DestinationMetadataV1.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("id").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `id` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("id").toString()));
        }
        if (!jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `name` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("name").toString()));
        }
        if (!jsonObj.get("description").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `description` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("description").toString()));
        }
        if (!jsonObj.get("slug").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `slug` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("slug").toString()));
        }
        // validate the required field `logos`
        LogosBeta.validateJsonElement(jsonObj.get("logos"));
        // ensure the json data is an array
        if (!jsonObj.get("options").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `options` to be an array in the JSON string but got"
                                    + " `%s`",
                            jsonObj.get("options").toString()));
        }

        JsonArray jsonArrayoptions = jsonObj.getAsJsonArray("options");
        // validate the required field `options` (array)
        for (int i = 0; i < jsonArrayoptions.size(); i++) {
            IntegrationOptionBeta.validateJsonElement(jsonArrayoptions.get(i));
        }
        ;
        if (!jsonObj.get("status").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `status` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("status").toString()));
        }
        // ensure the required json array is present
        if (jsonObj.get("previousNames") == null) {
            throw new IllegalArgumentException(
                    "Expected the field `linkedContent` to be an array in the JSON string but got"
                            + " `null`");
        } else if (!jsonObj.get("previousNames").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `previousNames` to be an array in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("previousNames").toString()));
        }
        // ensure the required json array is present
        if (jsonObj.get("categories") == null) {
            throw new IllegalArgumentException(
                    "Expected the field `linkedContent` to be an array in the JSON string but got"
                            + " `null`");
        } else if (!jsonObj.get("categories").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `categories` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("categories").toString()));
        }
        if (!jsonObj.get("website").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `website` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("website").toString()));
        }
        // ensure the json data is an array
        if (!jsonObj.get("components").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `components` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("components").toString()));
        }

        JsonArray jsonArraycomponents = jsonObj.getAsJsonArray("components");
        // validate the required field `components` (array)
        for (int i = 0; i < jsonArraycomponents.size(); i++) {
            DestinationMetadataComponentV1.validateJsonElement(jsonArraycomponents.get(i));
        }
        ;
        // validate the required field `supportedFeatures`
        DestinationMetadataFeaturesV1.validateJsonElement(jsonObj.get("supportedFeatures"));
        // validate the required field `supportedMethods`
        DestinationMetadataMethodsV1.validateJsonElement(jsonObj.get("supportedMethods"));
        // validate the required field `supportedPlatforms`
        DestinationMetadataPlatformsV1.validateJsonElement(jsonObj.get("supportedPlatforms"));
        // ensure the json data is an array
        if (!jsonObj.get("actions").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `actions` to be an array in the JSON string but got"
                                    + " `%s`",
                            jsonObj.get("actions").toString()));
        }

        JsonArray jsonArrayactions = jsonObj.getAsJsonArray("actions");
        // validate the required field `actions` (array)
        for (int i = 0; i < jsonArrayactions.size(); i++) {
            DestinationMetadataActionV1.validateJsonElement(jsonArrayactions.get(i));
        }
        ;
        // ensure the json data is an array
        if (!jsonObj.get("presets").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `presets` to be an array in the JSON string but got"
                                    + " `%s`",
                            jsonObj.get("presets").toString()));
        }

        JsonArray jsonArraypresets = jsonObj.getAsJsonArray("presets");
        // validate the required field `presets` (array)
        for (int i = 0; i < jsonArraypresets.size(); i++) {
            DestinationMetadataSubscriptionPresetV1.validateJsonElement(jsonArraypresets.get(i));
        }
        ;
        if (jsonObj.get("contacts") != null && !jsonObj.get("contacts").isJsonNull()) {
            JsonArray jsonArraycontacts = jsonObj.getAsJsonArray("contacts");
            if (jsonArraycontacts != null) {
                // ensure the json data is an array
                if (!jsonObj.get("contacts").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `contacts` to be an array in the JSON"
                                            + " string but got `%s`",
                                    jsonObj.get("contacts").toString()));
                }

                // validate the optional field `contacts` (array)
                for (int i = 0; i < jsonArraycontacts.size(); i++) {
                    Contact.validateJsonElement(jsonArraycontacts.get(i));
                }
                ;
            }
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("supportedRegions") != null
                && !jsonObj.get("supportedRegions").isJsonNull()
                && !jsonObj.get("supportedRegions").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `supportedRegions` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("supportedRegions").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("regionEndpoints") != null
                && !jsonObj.get("regionEndpoints").isJsonNull()
                && !jsonObj.get("regionEndpoints").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `regionEndpoints` to be an array in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("regionEndpoints").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!DestinationMetadataV1.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'DestinationMetadataV1' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<DestinationMetadataV1> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(DestinationMetadataV1.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<DestinationMetadataV1>() {
                        @Override
                        public void write(JsonWriter out, DestinationMetadataV1 value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public DestinationMetadataV1 read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of DestinationMetadataV1 given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of DestinationMetadataV1
     * @throws IOException if the JSON string is invalid with respect to DestinationMetadataV1
     */
    public static DestinationMetadataV1 fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, DestinationMetadataV1.class);
    }

    /**
     * Convert an instance of DestinationMetadataV1 to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
