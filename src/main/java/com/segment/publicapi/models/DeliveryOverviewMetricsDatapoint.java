/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** Series within DeliveryOverviewMetricsDataset. */
public class DeliveryOverviewMetricsDatapoint {
    public static final String SERIALIZED_NAME_TIME = "time";

    @SerializedName(SERIALIZED_NAME_TIME)
    private String time;

    public static final String SERIALIZED_NAME_COUNT = "count";

    @SerializedName(SERIALIZED_NAME_COUNT)
    private BigDecimal count;

    public static final String SERIALIZED_NAME_RETRY_COUNT = "retryCount";

    @SerializedName(SERIALIZED_NAME_RETRY_COUNT)
    private BigDecimal retryCount;

    public DeliveryOverviewMetricsDatapoint() {}

    public DeliveryOverviewMetricsDatapoint time(String time) {

        this.time = time;
        return this;
    }

    /**
     * The timestamp corresponding to the beginning of the window given by the requested
     * granularity.
     *
     * @return time
     */
    @javax.annotation.Nonnull
    public String getTime() {
        return time;
    }

    public void setTime(String time) {
        this.time = time;
    }

    public DeliveryOverviewMetricsDatapoint count(BigDecimal count) {

        this.count = count;
        return this;
    }

    /**
     * Holds the number of events within the specified granularity and groupBy options.
     *
     * @return count
     */
    @javax.annotation.Nonnull
    public BigDecimal getCount() {
        return count;
    }

    public void setCount(BigDecimal count) {
        this.count = count;
    }

    public DeliveryOverviewMetricsDatapoint retryCount(BigDecimal retryCount) {

        this.retryCount = retryCount;
        return this;
    }

    /**
     * The number of retried events that were successfully delivered.
     *
     * @return retryCount
     */
    @javax.annotation.Nullable
    public BigDecimal getRetryCount() {
        return retryCount;
    }

    public void setRetryCount(BigDecimal retryCount) {
        this.retryCount = retryCount;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DeliveryOverviewMetricsDatapoint deliveryOverviewMetricsDatapoint =
                (DeliveryOverviewMetricsDatapoint) o;
        return Objects.equals(this.time, deliveryOverviewMetricsDatapoint.time)
                && Objects.equals(this.count, deliveryOverviewMetricsDatapoint.count)
                && Objects.equals(this.retryCount, deliveryOverviewMetricsDatapoint.retryCount);
    }

    @Override
    public int hashCode() {
        return Objects.hash(time, count, retryCount);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class DeliveryOverviewMetricsDatapoint {\n");
        sb.append("    time: ").append(toIndentedString(time)).append("\n");
        sb.append("    count: ").append(toIndentedString(count)).append("\n");
        sb.append("    retryCount: ").append(toIndentedString(retryCount)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("time");
        openapiFields.add("count");
        openapiFields.add("retryCount");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("time");
        openapiRequiredFields.add("count");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     DeliveryOverviewMetricsDatapoint
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!DeliveryOverviewMetricsDatapoint.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in DeliveryOverviewMetricsDatapoint is"
                                        + " not found in the empty JSON string",
                                DeliveryOverviewMetricsDatapoint.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!DeliveryOverviewMetricsDatapoint.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `DeliveryOverviewMetricsDatapoint` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : DeliveryOverviewMetricsDatapoint.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("time").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `time` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("time").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!DeliveryOverviewMetricsDatapoint.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'DeliveryOverviewMetricsDatapoint' and
                // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<DeliveryOverviewMetricsDatapoint> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(DeliveryOverviewMetricsDatapoint.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<DeliveryOverviewMetricsDatapoint>() {
                        @Override
                        public void write(JsonWriter out, DeliveryOverviewMetricsDatapoint value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public DeliveryOverviewMetricsDatapoint read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of DeliveryOverviewMetricsDatapoint given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of DeliveryOverviewMetricsDatapoint
     * @throws IOException if the JSON string is invalid with respect to
     *     DeliveryOverviewMetricsDatapoint
     */
    public static DeliveryOverviewMetricsDatapoint fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, DeliveryOverviewMetricsDatapoint.class);
    }

    /**
     * Convert an instance of DeliveryOverviewMetricsDatapoint to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
