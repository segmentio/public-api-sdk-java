/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;


import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** Input for CreateDestinationFilterV1. */
@ApiModel(description = "Input for CreateDestinationFilterV1.")
public class CreateFilterForDestinationV1Input {
    public static final String SERIALIZED_NAME_SOURCE_ID = "sourceId";

    @SerializedName(SERIALIZED_NAME_SOURCE_ID)
    private String sourceId;

    public static final String SERIALIZED_NAME_IF = "if";

    @SerializedName(SERIALIZED_NAME_IF)
    private String _if;

    public static final String SERIALIZED_NAME_ACTIONS = "actions";

    @SerializedName(SERIALIZED_NAME_ACTIONS)
    private List<DestinationFilterActionV1> actions = new ArrayList<>();

    public static final String SERIALIZED_NAME_TITLE = "title";

    @SerializedName(SERIALIZED_NAME_TITLE)
    private String title;

    public static final String SERIALIZED_NAME_DESCRIPTION = "description";

    @SerializedName(SERIALIZED_NAME_DESCRIPTION)
    private String description;

    public static final String SERIALIZED_NAME_ENABLED = "enabled";

    @SerializedName(SERIALIZED_NAME_ENABLED)
    private Boolean enabled;

    public CreateFilterForDestinationV1Input() {}

    public CreateFilterForDestinationV1Input sourceId(String sourceId) {

        this.sourceId = sourceId;
        return this;
    }

    /**
     * The id of the Source associated with this filter.
     *
     * @return sourceId
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "The id of the Source associated with this filter.")
    public String getSourceId() {
        return sourceId;
    }

    public void setSourceId(String sourceId) {
        this.sourceId = sourceId;
    }

    public CreateFilterForDestinationV1Input _if(String _if) {

        this._if = _if;
        return this;
    }

    /**
     * The filter&#39;s condition.
     *
     * @return _if
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "The filter's condition.")
    public String getIf() {
        return _if;
    }

    public void setIf(String _if) {
        this._if = _if;
    }

    public CreateFilterForDestinationV1Input actions(List<DestinationFilterActionV1> actions) {

        this.actions = actions;
        return this;
    }

    public CreateFilterForDestinationV1Input addActionsItem(DestinationFilterActionV1 actionsItem) {
        this.actions.add(actionsItem);
        return this;
    }

    /**
     * Actions for the Destination filter.
     *
     * @return actions
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Actions for the Destination filter.")
    public List<DestinationFilterActionV1> getActions() {
        return actions;
    }

    public void setActions(List<DestinationFilterActionV1> actions) {
        this.actions = actions;
    }

    public CreateFilterForDestinationV1Input title(String title) {

        this.title = title;
        return this;
    }

    /**
     * The title of the filter.
     *
     * @return title
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "The title of the filter.")
    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public CreateFilterForDestinationV1Input description(String description) {

        this.description = description;
        return this;
    }

    /**
     * The description of the filter.
     *
     * @return description
     */
    @javax.annotation.Nullable
    @ApiModelProperty(value = "The description of the filter.")
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public CreateFilterForDestinationV1Input enabled(Boolean enabled) {

        this.enabled = enabled;
        return this;
    }

    /**
     * When set to true, the Destination filter is active.
     *
     * @return enabled
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(
            required = true,
            value = "When set to true, the Destination filter is active.")
    public Boolean getEnabled() {
        return enabled;
    }

    public void setEnabled(Boolean enabled) {
        this.enabled = enabled;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateFilterForDestinationV1Input createFilterForDestinationV1Input =
                (CreateFilterForDestinationV1Input) o;
        return Objects.equals(this.sourceId, createFilterForDestinationV1Input.sourceId)
                && Objects.equals(this._if, createFilterForDestinationV1Input._if)
                && Objects.equals(this.actions, createFilterForDestinationV1Input.actions)
                && Objects.equals(this.title, createFilterForDestinationV1Input.title)
                && Objects.equals(this.description, createFilterForDestinationV1Input.description)
                && Objects.equals(this.enabled, createFilterForDestinationV1Input.enabled);
    }

    @Override
    public int hashCode() {
        return Objects.hash(sourceId, _if, actions, title, description, enabled);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CreateFilterForDestinationV1Input {\n");
        sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
        sb.append("    _if: ").append(toIndentedString(_if)).append("\n");
        sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
        sb.append("    title: ").append(toIndentedString(title)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("sourceId");
        openapiFields.add("if");
        openapiFields.add("actions");
        openapiFields.add("title");
        openapiFields.add("description");
        openapiFields.add("enabled");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("sourceId");
        openapiRequiredFields.add("if");
        openapiRequiredFields.add("actions");
        openapiRequiredFields.add("title");
        openapiRequiredFields.add("enabled");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to
     *     CreateFilterForDestinationV1Input
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!CreateFilterForDestinationV1Input.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in CreateFilterForDestinationV1Input is"
                                        + " not found in the empty JSON string",
                                CreateFilterForDestinationV1Input.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!CreateFilterForDestinationV1Input.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `CreateFilterForDestinationV1Input` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : CreateFilterForDestinationV1Input.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonObj.toString()));
            }
        }
        if (!jsonObj.get("sourceId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `sourceId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("sourceId").toString()));
        }
        if (!jsonObj.get("if").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `if` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("if").toString()));
        }
        // ensure the json data is an array
        if (!jsonObj.get("actions").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `actions` to be an array in the JSON string but got"
                                    + " `%s`",
                            jsonObj.get("actions").toString()));
        }

        JsonArray jsonArrayactions = jsonObj.getAsJsonArray("actions");
        if (!jsonObj.get("title").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `title` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("title").toString()));
        }
        if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull())
                && !jsonObj.get("description").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `description` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("description").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CreateFilterForDestinationV1Input.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CreateFilterForDestinationV1Input' and
                // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CreateFilterForDestinationV1Input> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(CreateFilterForDestinationV1Input.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<CreateFilterForDestinationV1Input>() {
                        @Override
                        public void write(JsonWriter out, CreateFilterForDestinationV1Input value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public CreateFilterForDestinationV1Input read(JsonReader in)
                                throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of CreateFilterForDestinationV1Input given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CreateFilterForDestinationV1Input
     * @throws IOException if the JSON string is invalid with respect to
     *     CreateFilterForDestinationV1Input
     */
    public static CreateFilterForDestinationV1Input fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CreateFilterForDestinationV1Input.class);
    }

    /**
     * Convert an instance of CreateFilterForDestinationV1Input to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
