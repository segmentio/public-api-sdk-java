/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;


import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** Updates the schema for a Space Warehouse connection. */
@ApiModel(description = "Updates the schema for a Space Warehouse connection.")
public class UpdateSelectiveSyncForWarehouseAndSpaceAlphaInput {
    public static final String SERIALIZED_NAME_SYNC_OVERRIDES = "syncOverrides";

    @SerializedName(SERIALIZED_NAME_SYNC_OVERRIDES)
    private List<SpaceWarehouseSchemaOverride> syncOverrides = null;

    public static final String SERIALIZED_NAME_ENABLE_EVENT_TABLES = "enableEventTables";

    @SerializedName(SERIALIZED_NAME_ENABLE_EVENT_TABLES)
    private Boolean enableEventTables;

    public UpdateSelectiveSyncForWarehouseAndSpaceAlphaInput() {}

    public UpdateSelectiveSyncForWarehouseAndSpaceAlphaInput syncOverrides(
            List<SpaceWarehouseSchemaOverride> syncOverrides) {

        this.syncOverrides = syncOverrides;
        return this;
    }

    public UpdateSelectiveSyncForWarehouseAndSpaceAlphaInput addSyncOverridesItem(
            SpaceWarehouseSchemaOverride syncOverridesItem) {
        if (this.syncOverrides == null) {
            this.syncOverrides = new ArrayList<>();
        }
        this.syncOverrides.add(syncOverridesItem);
        return this;
    }

    /**
     * A list of sync Schema overrides to apply to this Space Warehouse. Note: Selective Sync is not
     * supported if the enableEventTables flag is false.
     *
     * @return syncOverrides
     */
    @javax.annotation.Nullable
    @ApiModelProperty(
            value =
                    "A list of sync Schema overrides to apply to this Space Warehouse. Note:"
                            + " Selective Sync is not supported if the enableEventTables flag is"
                            + " false.")
    public List<SpaceWarehouseSchemaOverride> getSyncOverrides() {
        return syncOverrides;
    }

    public void setSyncOverrides(List<SpaceWarehouseSchemaOverride> syncOverrides) {
        this.syncOverrides = syncOverrides;
    }

    public UpdateSelectiveSyncForWarehouseAndSpaceAlphaInput enableEventTables(
            Boolean enableEventTables) {

        this.enableEventTables = enableEventTables;
        return this;
    }

    /**
     * A flag to enable or disable all event Tables. This field is optional.
     *
     * @return enableEventTables
     */
    @javax.annotation.Nullable
    @ApiModelProperty(
            value = "A flag to enable or disable all event Tables. This field is optional.")
    public Boolean getEnableEventTables() {
        return enableEventTables;
    }

    public void setEnableEventTables(Boolean enableEventTables) {
        this.enableEventTables = enableEventTables;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateSelectiveSyncForWarehouseAndSpaceAlphaInput
                updateSelectiveSyncForWarehouseAndSpaceAlphaInput =
                        (UpdateSelectiveSyncForWarehouseAndSpaceAlphaInput) o;
        return Objects.equals(
                        this.syncOverrides,
                        updateSelectiveSyncForWarehouseAndSpaceAlphaInput.syncOverrides)
                && Objects.equals(
                        this.enableEventTables,
                        updateSelectiveSyncForWarehouseAndSpaceAlphaInput.enableEventTables);
    }

    @Override
    public int hashCode() {
        return Objects.hash(syncOverrides, enableEventTables);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class UpdateSelectiveSyncForWarehouseAndSpaceAlphaInput {\n");
        sb.append("    syncOverrides: ").append(toIndentedString(syncOverrides)).append("\n");
        sb.append("    enableEventTables: ")
                .append(toIndentedString(enableEventTables))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("syncOverrides");
        openapiFields.add("enableEventTables");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to
     *     UpdateSelectiveSyncForWarehouseAndSpaceAlphaInput
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!UpdateSelectiveSyncForWarehouseAndSpaceAlphaInput.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " UpdateSelectiveSyncForWarehouseAndSpaceAlphaInput is not"
                                    + " found in the empty JSON string",
                                UpdateSelectiveSyncForWarehouseAndSpaceAlphaInput
                                        .openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!UpdateSelectiveSyncForWarehouseAndSpaceAlphaInput.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `UpdateSelectiveSyncForWarehouseAndSpaceAlphaInput`"
                                        + " properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }
        if (jsonObj.get("syncOverrides") != null && !jsonObj.get("syncOverrides").isJsonNull()) {
            JsonArray jsonArraysyncOverrides = jsonObj.getAsJsonArray("syncOverrides");
            if (jsonArraysyncOverrides != null) {
                // ensure the json data is an array
                if (!jsonObj.get("syncOverrides").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `syncOverrides` to be an array in the JSON"
                                            + " string but got `%s`",
                                    jsonObj.get("syncOverrides").toString()));
                }
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!UpdateSelectiveSyncForWarehouseAndSpaceAlphaInput.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'UpdateSelectiveSyncForWarehouseAndSpaceAlphaInput' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<UpdateSelectiveSyncForWarehouseAndSpaceAlphaInput> thisAdapter =
                    gson.getDelegateAdapter(
                            this,
                            TypeToken.get(UpdateSelectiveSyncForWarehouseAndSpaceAlphaInput.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<UpdateSelectiveSyncForWarehouseAndSpaceAlphaInput>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                UpdateSelectiveSyncForWarehouseAndSpaceAlphaInput value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public UpdateSelectiveSyncForWarehouseAndSpaceAlphaInput read(JsonReader in)
                                throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of UpdateSelectiveSyncForWarehouseAndSpaceAlphaInput given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of UpdateSelectiveSyncForWarehouseAndSpaceAlphaInput
     * @throws IOException if the JSON string is invalid with respect to
     *     UpdateSelectiveSyncForWarehouseAndSpaceAlphaInput
     */
    public static UpdateSelectiveSyncForWarehouseAndSpaceAlphaInput fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, UpdateSelectiveSyncForWarehouseAndSpaceAlphaInput.class);
    }

    /**
     * Convert an instance of UpdateSelectiveSyncForWarehouseAndSpaceAlphaInput to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
