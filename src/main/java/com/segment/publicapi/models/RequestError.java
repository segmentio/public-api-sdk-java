/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * The version of the OpenAPI document: 32.0.8
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;


import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;
import org.openapitools.jackson.nullable.JsonNullable;

/** Represents any error that could have occurred while performing a request. */
@ApiModel(description = "Represents any error that could have occurred while performing a request.")
public class RequestError {
    public static final String SERIALIZED_NAME_TYPE = "type";

    @SerializedName(SERIALIZED_NAME_TYPE)
    private String type;

    public static final String SERIALIZED_NAME_MESSAGE = "message";

    @SerializedName(SERIALIZED_NAME_MESSAGE)
    private String message;

    public static final String SERIALIZED_NAME_FIELD = "field";

    @SerializedName(SERIALIZED_NAME_FIELD)
    private String field;

    public static final String SERIALIZED_NAME_DATA = "data";

    @SerializedName(SERIALIZED_NAME_DATA)
    private Object data = null;

    public static final String SERIALIZED_NAME_STATUS = "status";

    @SerializedName(SERIALIZED_NAME_STATUS)
    private BigDecimal status;

    public RequestError() {}

    public RequestError type(String type) {

        this.type = type;
        return this;
    }

    /**
     * The type for this error (validation, server, unknown, etc).
     *
     * @return type
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(
            required = true,
            value = "The type for this error (validation, server, unknown, etc).")
    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public RequestError message(String message) {

        this.message = message;
        return this;
    }

    /**
     * An error message attached to this error.
     *
     * @return message
     */
    @javax.annotation.Nullable
    @ApiModelProperty(value = "An error message attached to this error.")
    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public RequestError field(String field) {

        this.field = field;
        return this;
    }

    /**
     * The name of an input field from the request that triggered this error.
     *
     * @return field
     */
    @javax.annotation.Nullable
    @ApiModelProperty(
            value = "The name of an input field from the request that triggered this error.")
    public String getField() {
        return field;
    }

    public void setField(String field) {
        this.field = field;
    }

    public RequestError data(Object data) {

        this.data = data;
        return this;
    }

    /**
     * Any extra data associated with this error.
     *
     * @return data
     */
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Any extra data associated with this error.")
    public Object getData() {
        return data;
    }

    public void setData(Object data) {
        this.data = data;
    }

    public RequestError status(BigDecimal status) {

        this.status = status;
        return this;
    }

    /**
     * Http status code.
     *
     * @return status
     */
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Http status code.")
    public BigDecimal getStatus() {
        return status;
    }

    public void setStatus(BigDecimal status) {
        this.status = status;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RequestError requestError = (RequestError) o;
        return Objects.equals(this.type, requestError.type)
                && Objects.equals(this.message, requestError.message)
                && Objects.equals(this.field, requestError.field)
                && Objects.equals(this.data, requestError.data)
                && Objects.equals(this.status, requestError.status);
    }

    private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
        return a == b
                || (a != null
                        && b != null
                        && a.isPresent()
                        && b.isPresent()
                        && Objects.deepEquals(a.get(), b.get()));
    }

    @Override
    public int hashCode() {
        return Objects.hash(type, message, field, data, status);
    }

    private static <T> int hashCodeNullable(JsonNullable<T> a) {
        if (a == null) {
            return 1;
        }
        return a.isPresent() ? Arrays.deepHashCode(new Object[] {a.get()}) : 31;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class RequestError {\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    message: ").append(toIndentedString(message)).append("\n");
        sb.append("    field: ").append(toIndentedString(field)).append("\n");
        sb.append("    data: ").append(toIndentedString(data)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("type");
        openapiFields.add("message");
        openapiFields.add("field");
        openapiFields.add("data");
        openapiFields.add("status");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("type");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to RequestError
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!RequestError.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in RequestError is not found in the empty"
                                        + " JSON string",
                                RequestError.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!RequestError.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `RequestError` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : RequestError.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonObj.toString()));
            }
        }
        if (!jsonObj.get("type").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `type` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("type").toString()));
        }
        if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull())
                && !jsonObj.get("message").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `message` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("message").toString()));
        }
        if ((jsonObj.get("field") != null && !jsonObj.get("field").isJsonNull())
                && !jsonObj.get("field").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `field` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("field").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!RequestError.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'RequestError' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<RequestError> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(RequestError.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<RequestError>() {
                        @Override
                        public void write(JsonWriter out, RequestError value) throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public RequestError read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of RequestError given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of RequestError
     * @throws IOException if the JSON string is invalid with respect to RequestError
     */
    public static RequestError fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, RequestError.class);
    }

    /**
     * Convert an instance of RequestError to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
