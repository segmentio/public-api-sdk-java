/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;


import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/**
 * Overrides the enabled or disabled state of the specified collection and / or properties within
 * the schema.
 */
@ApiModel(
        description =
                "Overrides the enabled or disabled state of the specified collection and / or"
                        + " properties within the schema.")
public class SpaceWarehouseSchemaOverride {
    public static final String SERIALIZED_NAME_COLLECTION = "collection";

    @SerializedName(SERIALIZED_NAME_COLLECTION)
    private String collection;

    public static final String SERIALIZED_NAME_ENABLED = "enabled";

    @SerializedName(SERIALIZED_NAME_ENABLED)
    private Boolean enabled;

    public static final String SERIALIZED_NAME_PROPERTY = "property";

    @SerializedName(SERIALIZED_NAME_PROPERTY)
    private String property;

    public SpaceWarehouseSchemaOverride() {}

    public SpaceWarehouseSchemaOverride collection(String collection) {

        this.collection = collection;
        return this;
    }

    /**
     * The collection within the Source.
     *
     * @return collection
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "The collection within the Source.")
    public String getCollection() {
        return collection;
    }

    public void setCollection(String collection) {
        this.collection = collection;
    }

    public SpaceWarehouseSchemaOverride enabled(Boolean enabled) {

        this.enabled = enabled;
        return this;
    }

    /**
     * Represents the overridden enabled state for the listed collection and / or properties.
     *
     * @return enabled
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(
            required = true,
            value =
                    "Represents the overridden enabled state for the listed collection and / or"
                            + " properties.")
    public Boolean getEnabled() {
        return enabled;
    }

    public void setEnabled(Boolean enabled) {
        this.enabled = enabled;
    }

    public SpaceWarehouseSchemaOverride property(String property) {

        this.property = property;
        return this;
    }

    /**
     * A map that contains the properties within the collection to which the Warehouse should sync.
     *
     * @return property
     */
    @javax.annotation.Nullable
    @ApiModelProperty(
            value =
                    "A map that contains the properties within the collection to which the"
                            + " Warehouse should sync.")
    public String getProperty() {
        return property;
    }

    public void setProperty(String property) {
        this.property = property;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SpaceWarehouseSchemaOverride spaceWarehouseSchemaOverride =
                (SpaceWarehouseSchemaOverride) o;
        return Objects.equals(this.collection, spaceWarehouseSchemaOverride.collection)
                && Objects.equals(this.enabled, spaceWarehouseSchemaOverride.enabled)
                && Objects.equals(this.property, spaceWarehouseSchemaOverride.property);
    }

    @Override
    public int hashCode() {
        return Objects.hash(collection, enabled, property);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SpaceWarehouseSchemaOverride {\n");
        sb.append("    collection: ").append(toIndentedString(collection)).append("\n");
        sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
        sb.append("    property: ").append(toIndentedString(property)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("collection");
        openapiFields.add("enabled");
        openapiFields.add("property");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("collection");
        openapiRequiredFields.add("enabled");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to
     *     SpaceWarehouseSchemaOverride
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!SpaceWarehouseSchemaOverride.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in SpaceWarehouseSchemaOverride is not"
                                        + " found in the empty JSON string",
                                SpaceWarehouseSchemaOverride.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!SpaceWarehouseSchemaOverride.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `SpaceWarehouseSchemaOverride` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : SpaceWarehouseSchemaOverride.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonObj.toString()));
            }
        }
        if (!jsonObj.get("collection").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `collection` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("collection").toString()));
        }
        if ((jsonObj.get("property") != null && !jsonObj.get("property").isJsonNull())
                && !jsonObj.get("property").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `property` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("property").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!SpaceWarehouseSchemaOverride.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'SpaceWarehouseSchemaOverride' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<SpaceWarehouseSchemaOverride> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(SpaceWarehouseSchemaOverride.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<SpaceWarehouseSchemaOverride>() {
                        @Override
                        public void write(JsonWriter out, SpaceWarehouseSchemaOverride value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public SpaceWarehouseSchemaOverride read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of SpaceWarehouseSchemaOverride given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of SpaceWarehouseSchemaOverride
     * @throws IOException if the JSON string is invalid with respect to
     *     SpaceWarehouseSchemaOverride
     */
    public static SpaceWarehouseSchemaOverride fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, SpaceWarehouseSchemaOverride.class);
    }

    /**
     * Convert an instance of SpaceWarehouseSchemaOverride to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
