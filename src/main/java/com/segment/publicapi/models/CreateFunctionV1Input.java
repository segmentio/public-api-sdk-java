/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** Creates a Function. */
public class CreateFunctionV1Input {
    public static final String SERIALIZED_NAME_CODE = "code";

    @SerializedName(SERIALIZED_NAME_CODE)
    private String code;

    public static final String SERIALIZED_NAME_SETTINGS = "settings";

    @SerializedName(SERIALIZED_NAME_SETTINGS)
    private List<FunctionSettingV1> settings;

    public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";

    @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
    private String displayName;

    /** The Function type. Config API note: equal to &#x60;type&#x60;. */
    @JsonAdapter(ResourceTypeEnum.Adapter.class)
    public enum ResourceTypeEnum {
        DESTINATION("DESTINATION"),

        INSERT_DESTINATION("INSERT_DESTINATION"),

        SOURCE("SOURCE");

        private String value;

        ResourceTypeEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static ResourceTypeEnum fromValue(String value) {
            for (ResourceTypeEnum b : ResourceTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<ResourceTypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final ResourceTypeEnum enumeration)
                    throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public ResourceTypeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return ResourceTypeEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resourceType";

    @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
    private ResourceTypeEnum resourceType;

    public static final String SERIALIZED_NAME_DESCRIPTION = "description";

    @SerializedName(SERIALIZED_NAME_DESCRIPTION)
    private String description;

    public CreateFunctionV1Input() {}

    public CreateFunctionV1Input code(String code) {

        this.code = code;
        return this;
    }

    /**
     * The Function code.
     *
     * @return code
     */
    @javax.annotation.Nonnull
    public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    public CreateFunctionV1Input settings(List<FunctionSettingV1> settings) {

        this.settings = settings;
        return this;
    }

    public CreateFunctionV1Input addSettingsItem(FunctionSettingV1 settingsItem) {
        if (this.settings == null) {
            this.settings = new ArrayList<>();
        }
        this.settings.add(settingsItem);
        return this;
    }

    /**
     * The list of settings for this Function.
     *
     * @return settings
     */
    @javax.annotation.Nullable
    public List<FunctionSettingV1> getSettings() {
        return settings;
    }

    public void setSettings(List<FunctionSettingV1> settings) {
        this.settings = settings;
    }

    public CreateFunctionV1Input displayName(String displayName) {

        this.displayName = displayName;
        return this;
    }

    /**
     * A display name for this Function. Note that Destination Functions append the Workspace to the
     * display name.
     *
     * @return displayName
     */
    @javax.annotation.Nonnull
    public String getDisplayName() {
        return displayName;
    }

    public void setDisplayName(String displayName) {
        this.displayName = displayName;
    }

    public CreateFunctionV1Input resourceType(ResourceTypeEnum resourceType) {

        this.resourceType = resourceType;
        return this;
    }

    /**
     * The Function type. Config API note: equal to &#x60;type&#x60;.
     *
     * @return resourceType
     */
    @javax.annotation.Nonnull
    public ResourceTypeEnum getResourceType() {
        return resourceType;
    }

    public void setResourceType(ResourceTypeEnum resourceType) {
        this.resourceType = resourceType;
    }

    public CreateFunctionV1Input description(String description) {

        this.description = description;
        return this;
    }

    /**
     * A description for this Function.
     *
     * @return description
     */
    @javax.annotation.Nullable
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateFunctionV1Input createFunctionV1Input = (CreateFunctionV1Input) o;
        return Objects.equals(this.code, createFunctionV1Input.code)
                && Objects.equals(this.settings, createFunctionV1Input.settings)
                && Objects.equals(this.displayName, createFunctionV1Input.displayName)
                && Objects.equals(this.resourceType, createFunctionV1Input.resourceType)
                && Objects.equals(this.description, createFunctionV1Input.description);
    }

    @Override
    public int hashCode() {
        return Objects.hash(code, settings, displayName, resourceType, description);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CreateFunctionV1Input {\n");
        sb.append("    code: ").append(toIndentedString(code)).append("\n");
        sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
        sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
        sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("code");
        openapiFields.add("settings");
        openapiFields.add("displayName");
        openapiFields.add("resourceType");
        openapiFields.add("description");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("code");
        openapiRequiredFields.add("displayName");
        openapiRequiredFields.add("resourceType");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to CreateFunctionV1Input
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!CreateFunctionV1Input.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in CreateFunctionV1Input is not found in"
                                        + " the empty JSON string",
                                CreateFunctionV1Input.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!CreateFunctionV1Input.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `CreateFunctionV1Input` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : CreateFunctionV1Input.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("code").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `code` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("code").toString()));
        }
        if (jsonObj.get("settings") != null && !jsonObj.get("settings").isJsonNull()) {
            JsonArray jsonArraysettings = jsonObj.getAsJsonArray("settings");
            if (jsonArraysettings != null) {
                // ensure the json data is an array
                if (!jsonObj.get("settings").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `settings` to be an array in the JSON"
                                            + " string but got `%s`",
                                    jsonObj.get("settings").toString()));
                }

                // validate the optional field `settings` (array)
                for (int i = 0; i < jsonArraysettings.size(); i++) {
                    FunctionSettingV1.validateJsonElement(jsonArraysettings.get(i));
                }
                ;
            }
        }
        if (!jsonObj.get("displayName").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `displayName` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("displayName").toString()));
        }
        if (!jsonObj.get("resourceType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `resourceType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("resourceType").toString()));
        }
        if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull())
                && !jsonObj.get("description").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `description` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("description").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CreateFunctionV1Input.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CreateFunctionV1Input' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CreateFunctionV1Input> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(CreateFunctionV1Input.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<CreateFunctionV1Input>() {
                        @Override
                        public void write(JsonWriter out, CreateFunctionV1Input value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public CreateFunctionV1Input read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of CreateFunctionV1Input given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CreateFunctionV1Input
     * @throws IOException if the JSON string is invalid with respect to CreateFunctionV1Input
     */
    public static CreateFunctionV1Input fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CreateFunctionV1Input.class);
    }

    /**
     * Convert an instance of CreateFunctionV1Input to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
