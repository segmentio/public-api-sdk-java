/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * StreamStatus represents status of each stream including all the Destinations corresponding to the
 * stream.
 */
public class StreamStatusV1 {
    public static final String SERIALIZED_NAME_ID = "id";

    @SerializedName(SERIALIZED_NAME_ID)
    private String id;

    public static final String SERIALIZED_NAME_DESTINATION_STATUS = "destinationStatus";

    @SerializedName(SERIALIZED_NAME_DESTINATION_STATUS)
    private List<DestinationStatusV1> destinationStatus = new ArrayList<>();

    public StreamStatusV1() {}

    public StreamStatusV1 id(String id) {

        this.id = id;
        return this;
    }

    /**
     * Get id
     *
     * @return id
     */
    @javax.annotation.Nonnull
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public StreamStatusV1 destinationStatus(List<DestinationStatusV1> destinationStatus) {

        this.destinationStatus = destinationStatus;
        return this;
    }

    public StreamStatusV1 addDestinationStatusItem(DestinationStatusV1 destinationStatusItem) {
        if (this.destinationStatus == null) {
            this.destinationStatus = new ArrayList<>();
        }
        this.destinationStatus.add(destinationStatusItem);
        return this;
    }

    /**
     * Get destinationStatus
     *
     * @return destinationStatus
     */
    @javax.annotation.Nonnull
    public List<DestinationStatusV1> getDestinationStatus() {
        return destinationStatus;
    }

    public void setDestinationStatus(List<DestinationStatusV1> destinationStatus) {
        this.destinationStatus = destinationStatus;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        StreamStatusV1 streamStatusV1 = (StreamStatusV1) o;
        return Objects.equals(this.id, streamStatusV1.id)
                && Objects.equals(this.destinationStatus, streamStatusV1.destinationStatus);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, destinationStatus);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class StreamStatusV1 {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    destinationStatus: ")
                .append(toIndentedString(destinationStatus))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("id");
        openapiFields.add("destinationStatus");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("id");
        openapiRequiredFields.add("destinationStatus");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to StreamStatusV1
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!StreamStatusV1.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in StreamStatusV1 is not found in the"
                                        + " empty JSON string",
                                StreamStatusV1.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!StreamStatusV1.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `StreamStatusV1` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : StreamStatusV1.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("id").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `id` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("id").toString()));
        }
        // ensure the json data is an array
        if (!jsonObj.get("destinationStatus").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `destinationStatus` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("destinationStatus").toString()));
        }

        JsonArray jsonArraydestinationStatus = jsonObj.getAsJsonArray("destinationStatus");
        // validate the required field `destinationStatus` (array)
        for (int i = 0; i < jsonArraydestinationStatus.size(); i++) {
            DestinationStatusV1.validateJsonElement(jsonArraydestinationStatus.get(i));
        }
        ;
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!StreamStatusV1.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'StreamStatusV1' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<StreamStatusV1> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(StreamStatusV1.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<StreamStatusV1>() {
                        @Override
                        public void write(JsonWriter out, StreamStatusV1 value) throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public StreamStatusV1 read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of StreamStatusV1 given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of StreamStatusV1
     * @throws IOException if the JSON string is invalid with respect to StreamStatusV1
     */
    public static StreamStatusV1 fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, StreamStatusV1.class);
    }

    /**
     * Convert an instance of StreamStatusV1 to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
