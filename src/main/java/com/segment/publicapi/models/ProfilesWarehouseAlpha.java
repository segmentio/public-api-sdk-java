/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** Defines a Profiles data Warehouse used as a Destination for Segment data. */
public class ProfilesWarehouseAlpha {
    public static final String SERIALIZED_NAME_ID = "id";

    @SerializedName(SERIALIZED_NAME_ID)
    private String id;

    public static final String SERIALIZED_NAME_SPACE_ID = "spaceId";

    @SerializedName(SERIALIZED_NAME_SPACE_ID)
    private String spaceId;

    public static final String SERIALIZED_NAME_METADATA = "metadata";

    @SerializedName(SERIALIZED_NAME_METADATA)
    private WarehouseMetadataV1 metadata;

    public static final String SERIALIZED_NAME_WORKSPACE_ID = "workspaceId";

    @SerializedName(SERIALIZED_NAME_WORKSPACE_ID)
    private String workspaceId;

    public static final String SERIALIZED_NAME_ENABLED = "enabled";

    @SerializedName(SERIALIZED_NAME_ENABLED)
    private Boolean enabled;

    public static final String SERIALIZED_NAME_SETTINGS = "settings";

    @SerializedName(SERIALIZED_NAME_SETTINGS)
    private Map<String, Object> settings;

    public static final String SERIALIZED_NAME_SCHEMA_NAME = "schemaName";

    @SerializedName(SERIALIZED_NAME_SCHEMA_NAME)
    private String schemaName;

    public ProfilesWarehouseAlpha() {}

    public ProfilesWarehouseAlpha id(String id) {

        this.id = id;
        return this;
    }

    /**
     * The id of the Warehouse.
     *
     * @return id
     */
    @javax.annotation.Nonnull
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public ProfilesWarehouseAlpha spaceId(String spaceId) {

        this.spaceId = spaceId;
        return this;
    }

    /**
     * The Space id.
     *
     * @return spaceId
     */
    @javax.annotation.Nonnull
    public String getSpaceId() {
        return spaceId;
    }

    public void setSpaceId(String spaceId) {
        this.spaceId = spaceId;
    }

    public ProfilesWarehouseAlpha metadata(WarehouseMetadataV1 metadata) {

        this.metadata = metadata;
        return this;
    }

    /**
     * Get metadata
     *
     * @return metadata
     */
    @javax.annotation.Nonnull
    public WarehouseMetadataV1 getMetadata() {
        return metadata;
    }

    public void setMetadata(WarehouseMetadataV1 metadata) {
        this.metadata = metadata;
    }

    public ProfilesWarehouseAlpha workspaceId(String workspaceId) {

        this.workspaceId = workspaceId;
        return this;
    }

    /**
     * The id of the Workspace that owns this Warehouse.
     *
     * @return workspaceId
     */
    @javax.annotation.Nonnull
    public String getWorkspaceId() {
        return workspaceId;
    }

    public void setWorkspaceId(String workspaceId) {
        this.workspaceId = workspaceId;
    }

    public ProfilesWarehouseAlpha enabled(Boolean enabled) {

        this.enabled = enabled;
        return this;
    }

    /**
     * When set to true, this Warehouse receives data.
     *
     * @return enabled
     */
    @javax.annotation.Nonnull
    public Boolean getEnabled() {
        return enabled;
    }

    public void setEnabled(Boolean enabled) {
        this.enabled = enabled;
    }

    public ProfilesWarehouseAlpha settings(Map<String, Object> settings) {

        this.settings = settings;
        return this;
    }

    public ProfilesWarehouseAlpha putSettingsItem(String key, Object settingsItem) {
        if (this.settings == null) {
            this.settings = new HashMap<>();
        }
        this.settings.put(key, settingsItem);
        return this;
    }

    /**
     * A key-value object that contains instance-specific Warehouse settings.
     *
     * @return settings
     */
    @javax.annotation.Nonnull
    public Map<String, Object> getSettings() {
        return settings;
    }

    public void setSettings(Map<String, Object> settings) {
        this.settings = settings;
    }

    public ProfilesWarehouseAlpha schemaName(String schemaName) {

        this.schemaName = schemaName;
        return this;
    }

    /**
     * The custom schema name that Segment uses on the Warehouse side.
     *
     * @return schemaName
     */
    @javax.annotation.Nullable
    public String getSchemaName() {
        return schemaName;
    }

    public void setSchemaName(String schemaName) {
        this.schemaName = schemaName;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ProfilesWarehouseAlpha profilesWarehouseAlpha = (ProfilesWarehouseAlpha) o;
        return Objects.equals(this.id, profilesWarehouseAlpha.id)
                && Objects.equals(this.spaceId, profilesWarehouseAlpha.spaceId)
                && Objects.equals(this.metadata, profilesWarehouseAlpha.metadata)
                && Objects.equals(this.workspaceId, profilesWarehouseAlpha.workspaceId)
                && Objects.equals(this.enabled, profilesWarehouseAlpha.enabled)
                && Objects.equals(this.settings, profilesWarehouseAlpha.settings)
                && Objects.equals(this.schemaName, profilesWarehouseAlpha.schemaName);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, spaceId, metadata, workspaceId, enabled, settings, schemaName);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ProfilesWarehouseAlpha {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    spaceId: ").append(toIndentedString(spaceId)).append("\n");
        sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
        sb.append("    workspaceId: ").append(toIndentedString(workspaceId)).append("\n");
        sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
        sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
        sb.append("    schemaName: ").append(toIndentedString(schemaName)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("id");
        openapiFields.add("spaceId");
        openapiFields.add("metadata");
        openapiFields.add("workspaceId");
        openapiFields.add("enabled");
        openapiFields.add("settings");
        openapiFields.add("schemaName");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("id");
        openapiRequiredFields.add("spaceId");
        openapiRequiredFields.add("metadata");
        openapiRequiredFields.add("workspaceId");
        openapiRequiredFields.add("enabled");
        openapiRequiredFields.add("settings");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to ProfilesWarehouseAlpha
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!ProfilesWarehouseAlpha.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in ProfilesWarehouseAlpha is not found in"
                                        + " the empty JSON string",
                                ProfilesWarehouseAlpha.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!ProfilesWarehouseAlpha.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `ProfilesWarehouseAlpha` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : ProfilesWarehouseAlpha.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("id").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `id` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("id").toString()));
        }
        if (!jsonObj.get("spaceId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `spaceId` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("spaceId").toString()));
        }
        // validate the required field `metadata`
        WarehouseMetadataV1.validateJsonElement(jsonObj.get("metadata"));
        if (!jsonObj.get("workspaceId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `workspaceId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("workspaceId").toString()));
        }
        if ((jsonObj.get("schemaName") != null && !jsonObj.get("schemaName").isJsonNull())
                && !jsonObj.get("schemaName").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `schemaName` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("schemaName").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ProfilesWarehouseAlpha.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ProfilesWarehouseAlpha' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ProfilesWarehouseAlpha> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(ProfilesWarehouseAlpha.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<ProfilesWarehouseAlpha>() {
                        @Override
                        public void write(JsonWriter out, ProfilesWarehouseAlpha value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public ProfilesWarehouseAlpha read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of ProfilesWarehouseAlpha given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ProfilesWarehouseAlpha
     * @throws IOException if the JSON string is invalid with respect to ProfilesWarehouseAlpha
     */
    public static ProfilesWarehouseAlpha fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, ProfilesWarehouseAlpha.class);
    }

    /**
     * Convert an instance of ProfilesWarehouseAlpha to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
