/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * The &#x60;DeliveryOverviewAudienceFilterBy&#x60; object is a map of the filterable fields and
 * their values.
 */
public class DeliveryOverviewAudienceFilterBy {
    public static final String SERIALIZED_NAME_EVENT_NAME = "eventName";

    @SerializedName(SERIALIZED_NAME_EVENT_NAME)
    private List<String> eventName;

    public static final String SERIALIZED_NAME_EVENT_TYPE = "eventType";

    @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
    private List<String> eventType;

    public static final String SERIALIZED_NAME_ACTIVATION_ID = "activationId";

    @SerializedName(SERIALIZED_NAME_ACTIVATION_ID)
    private List<String> activationId;

    public static final String SERIALIZED_NAME_AUDIENCE_ID = "audienceId";

    @SerializedName(SERIALIZED_NAME_AUDIENCE_ID)
    private List<String> audienceId;

    public static final String SERIALIZED_NAME_SPACE_ID = "spaceId";

    @SerializedName(SERIALIZED_NAME_SPACE_ID)
    private List<String> spaceId;

    public DeliveryOverviewAudienceFilterBy() {}

    public DeliveryOverviewAudienceFilterBy eventName(List<String> eventName) {

        this.eventName = eventName;
        return this;
    }

    public DeliveryOverviewAudienceFilterBy addEventNameItem(String eventNameItem) {
        if (this.eventName == null) {
            this.eventName = new ArrayList<>();
        }
        this.eventName.add(eventNameItem);
        return this;
    }

    /**
     * A list of strings of event names.
     *
     * @return eventName
     */
    @javax.annotation.Nullable
    public List<String> getEventName() {
        return eventName;
    }

    public void setEventName(List<String> eventName) {
        this.eventName = eventName;
    }

    public DeliveryOverviewAudienceFilterBy eventType(List<String> eventType) {

        this.eventType = eventType;
        return this;
    }

    public DeliveryOverviewAudienceFilterBy addEventTypeItem(String eventTypeItem) {
        if (this.eventType == null) {
            this.eventType = new ArrayList<>();
        }
        this.eventType.add(eventTypeItem);
        return this;
    }

    /**
     * A list of strings of event types. Valid options are: &#x60;alias&#x60;, &#x60;group&#x60;,
     * &#x60;identify&#x60;, &#x60;page&#x60;, &#x60;screen&#x60;, and &#x60;track&#x60;.
     *
     * @return eventType
     */
    @javax.annotation.Nullable
    public List<String> getEventType() {
        return eventType;
    }

    public void setEventType(List<String> eventType) {
        this.eventType = eventType;
    }

    public DeliveryOverviewAudienceFilterBy activationId(List<String> activationId) {

        this.activationId = activationId;
        return this;
    }

    public DeliveryOverviewAudienceFilterBy addActivationIdItem(String activationIdItem) {
        if (this.activationId == null) {
            this.activationId = new ArrayList<>();
        }
        this.activationId.add(activationIdItem);
        return this;
    }

    /**
     * A list of strings of event context IDs from a Linked Audience mapping/activation.
     *
     * @return activationId
     */
    @javax.annotation.Nullable
    public List<String> getActivationId() {
        return activationId;
    }

    public void setActivationId(List<String> activationId) {
        this.activationId = activationId;
    }

    public DeliveryOverviewAudienceFilterBy audienceId(List<String> audienceId) {

        this.audienceId = audienceId;
        return this;
    }

    public DeliveryOverviewAudienceFilterBy addAudienceIdItem(String audienceIdItem) {
        if (this.audienceId == null) {
            this.audienceId = new ArrayList<>();
        }
        this.audienceId.add(audienceIdItem);
        return this;
    }

    /**
     * A list of strings of audienceIDs for a Linked Audience.
     *
     * @return audienceId
     */
    @javax.annotation.Nullable
    public List<String> getAudienceId() {
        return audienceId;
    }

    public void setAudienceId(List<String> audienceId) {
        this.audienceId = audienceId;
    }

    public DeliveryOverviewAudienceFilterBy spaceId(List<String> spaceId) {

        this.spaceId = spaceId;
        return this;
    }

    public DeliveryOverviewAudienceFilterBy addSpaceIdItem(String spaceIdItem) {
        if (this.spaceId == null) {
            this.spaceId = new ArrayList<>();
        }
        this.spaceId.add(spaceIdItem);
        return this;
    }

    /**
     * A list of strings of spaceIDs for a Linked Audience.
     *
     * @return spaceId
     */
    @javax.annotation.Nullable
    public List<String> getSpaceId() {
        return spaceId;
    }

    public void setSpaceId(List<String> spaceId) {
        this.spaceId = spaceId;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DeliveryOverviewAudienceFilterBy deliveryOverviewAudienceFilterBy =
                (DeliveryOverviewAudienceFilterBy) o;
        return Objects.equals(this.eventName, deliveryOverviewAudienceFilterBy.eventName)
                && Objects.equals(this.eventType, deliveryOverviewAudienceFilterBy.eventType)
                && Objects.equals(this.activationId, deliveryOverviewAudienceFilterBy.activationId)
                && Objects.equals(this.audienceId, deliveryOverviewAudienceFilterBy.audienceId)
                && Objects.equals(this.spaceId, deliveryOverviewAudienceFilterBy.spaceId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(eventName, eventType, activationId, audienceId, spaceId);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class DeliveryOverviewAudienceFilterBy {\n");
        sb.append("    eventName: ").append(toIndentedString(eventName)).append("\n");
        sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
        sb.append("    activationId: ").append(toIndentedString(activationId)).append("\n");
        sb.append("    audienceId: ").append(toIndentedString(audienceId)).append("\n");
        sb.append("    spaceId: ").append(toIndentedString(spaceId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("eventName");
        openapiFields.add("eventType");
        openapiFields.add("activationId");
        openapiFields.add("audienceId");
        openapiFields.add("spaceId");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     DeliveryOverviewAudienceFilterBy
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!DeliveryOverviewAudienceFilterBy.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in DeliveryOverviewAudienceFilterBy is"
                                        + " not found in the empty JSON string",
                                DeliveryOverviewAudienceFilterBy.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!DeliveryOverviewAudienceFilterBy.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `DeliveryOverviewAudienceFilterBy` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        // ensure the optional json data is an array if present
        if (jsonObj.get("eventName") != null
                && !jsonObj.get("eventName").isJsonNull()
                && !jsonObj.get("eventName").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `eventName` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("eventName").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("eventType") != null
                && !jsonObj.get("eventType").isJsonNull()
                && !jsonObj.get("eventType").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `eventType` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("eventType").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("activationId") != null
                && !jsonObj.get("activationId").isJsonNull()
                && !jsonObj.get("activationId").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `activationId` to be an array in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("activationId").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("audienceId") != null
                && !jsonObj.get("audienceId").isJsonNull()
                && !jsonObj.get("audienceId").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `audienceId` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("audienceId").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("spaceId") != null
                && !jsonObj.get("spaceId").isJsonNull()
                && !jsonObj.get("spaceId").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `spaceId` to be an array in the JSON string but got"
                                    + " `%s`",
                            jsonObj.get("spaceId").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!DeliveryOverviewAudienceFilterBy.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'DeliveryOverviewAudienceFilterBy' and
                // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<DeliveryOverviewAudienceFilterBy> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(DeliveryOverviewAudienceFilterBy.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<DeliveryOverviewAudienceFilterBy>() {
                        @Override
                        public void write(JsonWriter out, DeliveryOverviewAudienceFilterBy value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public DeliveryOverviewAudienceFilterBy read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of DeliveryOverviewAudienceFilterBy given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of DeliveryOverviewAudienceFilterBy
     * @throws IOException if the JSON string is invalid with respect to
     *     DeliveryOverviewAudienceFilterBy
     */
    public static DeliveryOverviewAudienceFilterBy fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, DeliveryOverviewAudienceFilterBy.class);
    }

    /**
     * Convert an instance of DeliveryOverviewAudienceFilterBy to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
