/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** RegulationListEntryV1 */
public class RegulationListEntryV1 {
    public static final String SERIALIZED_NAME_ID = "id";

    @SerializedName(SERIALIZED_NAME_ID)
    private String id;

    public static final String SERIALIZED_NAME_SUBJECT_TYPE = "subjectType";

    @SerializedName(SERIALIZED_NAME_SUBJECT_TYPE)
    private String subjectType;

    public static final String SERIALIZED_NAME_SUBJECTS = "subjects";

    @SerializedName(SERIALIZED_NAME_SUBJECTS)
    private List<String> subjects = new ArrayList<>();

    /** The current status of the regulate request. */
    @JsonAdapter(StatusEnum.Adapter.class)
    public enum StatusEnum {
        FAILED("FAILED"),

        FINISHED("FINISHED"),

        INITIALIZED("INITIALIZED"),

        INVALID("INVALID"),

        NOT_SUPPORTED("NOT_SUPPORTED"),

        PARTIAL_SUCCESS("PARTIAL_SUCCESS"),

        RUNNING("RUNNING");

        private String value;

        StatusEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static StatusEnum fromValue(String value) {
            for (StatusEnum b : StatusEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<StatusEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final StatusEnum enumeration)
                    throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public StatusEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return StatusEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_STATUS = "status";

    @SerializedName(SERIALIZED_NAME_STATUS)
    private StatusEnum status;

    public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";

    @SerializedName(SERIALIZED_NAME_CREATED_AT)
    private String createdAt;

    /** The regulation type. */
    @JsonAdapter(RegulationTypeEnum.Adapter.class)
    public enum RegulationTypeEnum {
        DELETE_INTERNAL("DELETE_INTERNAL"),

        DELETE_ONLY("DELETE_ONLY"),

        SUPPRESS_ONLY("SUPPRESS_ONLY"),

        SUPPRESS_WITH_DELETE("SUPPRESS_WITH_DELETE"),

        SUPPRESS_WITH_DELETE_INTERNAL("SUPPRESS_WITH_DELETE_INTERNAL"),

        UNSUPPRESS("UNSUPPRESS");

        private String value;

        RegulationTypeEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static RegulationTypeEnum fromValue(String value) {
            for (RegulationTypeEnum b : RegulationTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<RegulationTypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final RegulationTypeEnum enumeration)
                    throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public RegulationTypeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return RegulationTypeEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_REGULATION_TYPE = "regulationType";

    @SerializedName(SERIALIZED_NAME_REGULATION_TYPE)
    private RegulationTypeEnum regulationType;

    public static final String SERIALIZED_NAME_FINISHED_AT = "finishedAt";

    @SerializedName(SERIALIZED_NAME_FINISHED_AT)
    private String finishedAt;

    public RegulationListEntryV1() {}

    public RegulationListEntryV1 id(String id) {

        this.id = id;
        return this;
    }

    /**
     * The id of the regulate request.
     *
     * @return id
     */
    @javax.annotation.Nonnull
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public RegulationListEntryV1 subjectType(String subjectType) {

        this.subjectType = subjectType;
        return this;
    }

    /**
     * The subject type.
     *
     * @return subjectType
     */
    @javax.annotation.Nonnull
    public String getSubjectType() {
        return subjectType;
    }

    public void setSubjectType(String subjectType) {
        this.subjectType = subjectType;
    }

    public RegulationListEntryV1 subjects(List<String> subjects) {

        this.subjects = subjects;
        return this;
    }

    public RegulationListEntryV1 addSubjectsItem(String subjectsItem) {
        if (this.subjects == null) {
            this.subjects = new ArrayList<>();
        }
        this.subjects.add(subjectsItem);
        return this;
    }

    /**
     * The list of &#x60;userId&#x60; or &#x60;objectId&#x60; values of the subjects to regulate.
     *
     * @return subjects
     */
    @javax.annotation.Nonnull
    public List<String> getSubjects() {
        return subjects;
    }

    public void setSubjects(List<String> subjects) {
        this.subjects = subjects;
    }

    public RegulationListEntryV1 status(StatusEnum status) {

        this.status = status;
        return this;
    }

    /**
     * The current status of the regulate request.
     *
     * @return status
     */
    @javax.annotation.Nonnull
    public StatusEnum getStatus() {
        return status;
    }

    public void setStatus(StatusEnum status) {
        this.status = status;
    }

    public RegulationListEntryV1 createdAt(String createdAt) {

        this.createdAt = createdAt;
        return this;
    }

    /**
     * The timestamp of the creation of the request.
     *
     * @return createdAt
     */
    @javax.annotation.Nonnull
    public String getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(String createdAt) {
        this.createdAt = createdAt;
    }

    public RegulationListEntryV1 regulationType(RegulationTypeEnum regulationType) {

        this.regulationType = regulationType;
        return this;
    }

    /**
     * The regulation type.
     *
     * @return regulationType
     */
    @javax.annotation.Nonnull
    public RegulationTypeEnum getRegulationType() {
        return regulationType;
    }

    public void setRegulationType(RegulationTypeEnum regulationType) {
        this.regulationType = regulationType;
    }

    public RegulationListEntryV1 finishedAt(String finishedAt) {

        this.finishedAt = finishedAt;
        return this;
    }

    /**
     * The timestamp of when the request finished.
     *
     * @return finishedAt
     */
    @javax.annotation.Nullable
    public String getFinishedAt() {
        return finishedAt;
    }

    public void setFinishedAt(String finishedAt) {
        this.finishedAt = finishedAt;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RegulationListEntryV1 regulationListEntryV1 = (RegulationListEntryV1) o;
        return Objects.equals(this.id, regulationListEntryV1.id)
                && Objects.equals(this.subjectType, regulationListEntryV1.subjectType)
                && Objects.equals(this.subjects, regulationListEntryV1.subjects)
                && Objects.equals(this.status, regulationListEntryV1.status)
                && Objects.equals(this.createdAt, regulationListEntryV1.createdAt)
                && Objects.equals(this.regulationType, regulationListEntryV1.regulationType)
                && Objects.equals(this.finishedAt, regulationListEntryV1.finishedAt);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                id, subjectType, subjects, status, createdAt, regulationType, finishedAt);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class RegulationListEntryV1 {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    subjectType: ").append(toIndentedString(subjectType)).append("\n");
        sb.append("    subjects: ").append(toIndentedString(subjects)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
        sb.append("    regulationType: ").append(toIndentedString(regulationType)).append("\n");
        sb.append("    finishedAt: ").append(toIndentedString(finishedAt)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("id");
        openapiFields.add("subjectType");
        openapiFields.add("subjects");
        openapiFields.add("status");
        openapiFields.add("createdAt");
        openapiFields.add("regulationType");
        openapiFields.add("finishedAt");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("id");
        openapiRequiredFields.add("subjectType");
        openapiRequiredFields.add("subjects");
        openapiRequiredFields.add("status");
        openapiRequiredFields.add("createdAt");
        openapiRequiredFields.add("regulationType");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to RegulationListEntryV1
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!RegulationListEntryV1.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in RegulationListEntryV1 is not found in"
                                        + " the empty JSON string",
                                RegulationListEntryV1.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!RegulationListEntryV1.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `RegulationListEntryV1` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : RegulationListEntryV1.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("id").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `id` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("id").toString()));
        }
        if (!jsonObj.get("subjectType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `subjectType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("subjectType").toString()));
        }
        // ensure the required json array is present
        if (jsonObj.get("subjects") == null) {
            throw new IllegalArgumentException(
                    "Expected the field `linkedContent` to be an array in the JSON string but got"
                            + " `null`");
        } else if (!jsonObj.get("subjects").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `subjects` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("subjects").toString()));
        }
        if (!jsonObj.get("status").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `status` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("status").toString()));
        }
        if (!jsonObj.get("createdAt").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `createdAt` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("createdAt").toString()));
        }
        if (!jsonObj.get("regulationType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `regulationType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("regulationType").toString()));
        }
        if ((jsonObj.get("finishedAt") != null && !jsonObj.get("finishedAt").isJsonNull())
                && !jsonObj.get("finishedAt").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `finishedAt` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("finishedAt").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!RegulationListEntryV1.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'RegulationListEntryV1' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<RegulationListEntryV1> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(RegulationListEntryV1.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<RegulationListEntryV1>() {
                        @Override
                        public void write(JsonWriter out, RegulationListEntryV1 value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public RegulationListEntryV1 read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of RegulationListEntryV1 given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of RegulationListEntryV1
     * @throws IOException if the JSON string is invalid with respect to RegulationListEntryV1
     */
    public static RegulationListEntryV1 fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, RegulationListEntryV1.class);
    }

    /**
     * Convert an instance of RegulationListEntryV1 to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
