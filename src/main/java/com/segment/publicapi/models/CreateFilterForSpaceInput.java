/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** Input for CreateFilter. */
public class CreateFilterForSpaceInput {
    public static final String SERIALIZED_NAME_INTEGRATION_ID = "integrationId";

    @SerializedName(SERIALIZED_NAME_INTEGRATION_ID)
    private String integrationId;

    public static final String SERIALIZED_NAME_ENABLED = "enabled";

    @SerializedName(SERIALIZED_NAME_ENABLED)
    private Boolean enabled;

    public static final String SERIALIZED_NAME_NAME = "name";

    @SerializedName(SERIALIZED_NAME_NAME)
    private String name;

    public static final String SERIALIZED_NAME_DESCRIPTION = "description";

    @SerializedName(SERIALIZED_NAME_DESCRIPTION)
    private String description;

    public static final String SERIALIZED_NAME_IF = "if";

    @SerializedName(SERIALIZED_NAME_IF)
    private String _if;

    public static final String SERIALIZED_NAME_DROP = "drop";

    @SerializedName(SERIALIZED_NAME_DROP)
    private Boolean drop;

    public static final String SERIALIZED_NAME_DROP_PROPERTIES = "dropProperties";

    @SerializedName(SERIALIZED_NAME_DROP_PROPERTIES)
    private List<String> dropProperties;

    public static final String SERIALIZED_NAME_ALLOW_PROPERTIES = "allowProperties";

    @SerializedName(SERIALIZED_NAME_ALLOW_PROPERTIES)
    private List<String> allowProperties;

    public CreateFilterForSpaceInput() {}

    public CreateFilterForSpaceInput integrationId(String integrationId) {

        this.integrationId = integrationId;
        return this;
    }

    /**
     * The Space id to filer on.
     *
     * @return integrationId
     */
    @javax.annotation.Nonnull
    public String getIntegrationId() {
        return integrationId;
    }

    public void setIntegrationId(String integrationId) {
        this.integrationId = integrationId;
    }

    public CreateFilterForSpaceInput enabled(Boolean enabled) {

        this.enabled = enabled;
        return this;
    }

    /**
     * Whether the filter is enabled.
     *
     * @return enabled
     */
    @javax.annotation.Nullable
    public Boolean getEnabled() {
        return enabled;
    }

    public void setEnabled(Boolean enabled) {
        this.enabled = enabled;
    }

    public CreateFilterForSpaceInput name(String name) {

        this.name = name;
        return this;
    }

    /**
     * The name of the filter.
     *
     * @return name
     */
    @javax.annotation.Nonnull
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public CreateFilterForSpaceInput description(String description) {

        this.description = description;
        return this;
    }

    /**
     * The description of the filter.
     *
     * @return description
     */
    @javax.annotation.Nullable
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public CreateFilterForSpaceInput _if(String _if) {

        this._if = _if;
        return this;
    }

    /**
     * The \&quot;if\&quot; statement for a filter.
     *
     * @return _if
     */
    @javax.annotation.Nonnull
    public String getIf() {
        return _if;
    }

    public void setIf(String _if) {
        this._if = _if;
    }

    public CreateFilterForSpaceInput drop(Boolean drop) {

        this.drop = drop;
        return this;
    }

    /**
     * Whether the event is dropped.
     *
     * @return drop
     */
    @javax.annotation.Nullable
    public Boolean getDrop() {
        return drop;
    }

    public void setDrop(Boolean drop) {
        this.drop = drop;
    }

    public CreateFilterForSpaceInput dropProperties(List<String> dropProperties) {

        this.dropProperties = dropProperties;
        return this;
    }

    public CreateFilterForSpaceInput addDropPropertiesItem(String dropPropertiesItem) {
        if (this.dropProperties == null) {
            this.dropProperties = new ArrayList<>();
        }
        this.dropProperties.add(dropPropertiesItem);
        return this;
    }

    /**
     * Describes the properties to be dropped on events that match the \&quot;if\&quot; statement.
     *
     * @return dropProperties
     */
    @javax.annotation.Nullable
    public List<String> getDropProperties() {
        return dropProperties;
    }

    public void setDropProperties(List<String> dropProperties) {
        this.dropProperties = dropProperties;
    }

    public CreateFilterForSpaceInput allowProperties(List<String> allowProperties) {

        this.allowProperties = allowProperties;
        return this;
    }

    public CreateFilterForSpaceInput addAllowPropertiesItem(String allowPropertiesItem) {
        if (this.allowProperties == null) {
            this.allowProperties = new ArrayList<>();
        }
        this.allowProperties.add(allowPropertiesItem);
        return this;
    }

    /**
     * Describes the properties allowed on events that match the \&quot;if\&quot; statement.
     *
     * @return allowProperties
     */
    @javax.annotation.Nullable
    public List<String> getAllowProperties() {
        return allowProperties;
    }

    public void setAllowProperties(List<String> allowProperties) {
        this.allowProperties = allowProperties;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateFilterForSpaceInput createFilterForSpaceInput = (CreateFilterForSpaceInput) o;
        return Objects.equals(this.integrationId, createFilterForSpaceInput.integrationId)
                && Objects.equals(this.enabled, createFilterForSpaceInput.enabled)
                && Objects.equals(this.name, createFilterForSpaceInput.name)
                && Objects.equals(this.description, createFilterForSpaceInput.description)
                && Objects.equals(this._if, createFilterForSpaceInput._if)
                && Objects.equals(this.drop, createFilterForSpaceInput.drop)
                && Objects.equals(this.dropProperties, createFilterForSpaceInput.dropProperties)
                && Objects.equals(this.allowProperties, createFilterForSpaceInput.allowProperties);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                integrationId,
                enabled,
                name,
                description,
                _if,
                drop,
                dropProperties,
                allowProperties);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CreateFilterForSpaceInput {\n");
        sb.append("    integrationId: ").append(toIndentedString(integrationId)).append("\n");
        sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    _if: ").append(toIndentedString(_if)).append("\n");
        sb.append("    drop: ").append(toIndentedString(drop)).append("\n");
        sb.append("    dropProperties: ").append(toIndentedString(dropProperties)).append("\n");
        sb.append("    allowProperties: ").append(toIndentedString(allowProperties)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("integrationId");
        openapiFields.add("enabled");
        openapiFields.add("name");
        openapiFields.add("description");
        openapiFields.add("if");
        openapiFields.add("drop");
        openapiFields.add("dropProperties");
        openapiFields.add("allowProperties");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("integrationId");
        openapiRequiredFields.add("name");
        openapiRequiredFields.add("if");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to CreateFilterForSpaceInput
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!CreateFilterForSpaceInput.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in CreateFilterForSpaceInput is not found"
                                        + " in the empty JSON string",
                                CreateFilterForSpaceInput.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!CreateFilterForSpaceInput.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `CreateFilterForSpaceInput` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : CreateFilterForSpaceInput.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("integrationId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `integrationId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("integrationId").toString()));
        }
        if (!jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `name` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("name").toString()));
        }
        if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull())
                && !jsonObj.get("description").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `description` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("description").toString()));
        }
        if (!jsonObj.get("if").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `if` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("if").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("dropProperties") != null
                && !jsonObj.get("dropProperties").isJsonNull()
                && !jsonObj.get("dropProperties").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `dropProperties` to be an array in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("dropProperties").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("allowProperties") != null
                && !jsonObj.get("allowProperties").isJsonNull()
                && !jsonObj.get("allowProperties").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `allowProperties` to be an array in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("allowProperties").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CreateFilterForSpaceInput.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CreateFilterForSpaceInput' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CreateFilterForSpaceInput> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(CreateFilterForSpaceInput.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<CreateFilterForSpaceInput>() {
                        @Override
                        public void write(JsonWriter out, CreateFilterForSpaceInput value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public CreateFilterForSpaceInput read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of CreateFilterForSpaceInput given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CreateFilterForSpaceInput
     * @throws IOException if the JSON string is invalid with respect to CreateFilterForSpaceInput
     */
    public static CreateFilterForSpaceInput fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CreateFilterForSpaceInput.class);
    }

    /**
     * Convert an instance of CreateFilterForSpaceInput to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
