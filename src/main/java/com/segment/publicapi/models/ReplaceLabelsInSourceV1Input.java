/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * The version of the OpenAPI document: 33.0.0
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;


import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** Replaces all labels in a Source with a list of new labels. */
@ApiModel(description = "Replaces all labels in a Source with a list of new labels.")
public class ReplaceLabelsInSourceV1Input {
    public static final String SERIALIZED_NAME_LABELS = "labels";

    @SerializedName(SERIALIZED_NAME_LABELS)
    private List<LabelV1> labels = null;

    public ReplaceLabelsInSourceV1Input() {}

    public ReplaceLabelsInSourceV1Input labels(List<LabelV1> labels) {

        this.labels = labels;
        return this;
    }

    public ReplaceLabelsInSourceV1Input addLabelsItem(LabelV1 labelsItem) {
        if (this.labels == null) {
            this.labels = new ArrayList<>();
        }
        this.labels.add(labelsItem);
        return this;
    }

    /**
     * The list of labels to replace in the Source.
     *
     * @return labels
     */
    @javax.annotation.Nullable
    @ApiModelProperty(value = "The list of labels to replace in the Source.")
    public List<LabelV1> getLabels() {
        return labels;
    }

    public void setLabels(List<LabelV1> labels) {
        this.labels = labels;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ReplaceLabelsInSourceV1Input replaceLabelsInSourceV1Input =
                (ReplaceLabelsInSourceV1Input) o;
        return Objects.equals(this.labels, replaceLabelsInSourceV1Input.labels);
    }

    @Override
    public int hashCode() {
        return Objects.hash(labels);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ReplaceLabelsInSourceV1Input {\n");
        sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("labels");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to
     *     ReplaceLabelsInSourceV1Input
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!ReplaceLabelsInSourceV1Input.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in ReplaceLabelsInSourceV1Input is not"
                                        + " found in the empty JSON string",
                                ReplaceLabelsInSourceV1Input.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!ReplaceLabelsInSourceV1Input.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `ReplaceLabelsInSourceV1Input` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }
        if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull()) {
            JsonArray jsonArraylabels = jsonObj.getAsJsonArray("labels");
            if (jsonArraylabels != null) {
                // ensure the json data is an array
                if (!jsonObj.get("labels").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `labels` to be an array in the JSON string"
                                            + " but got `%s`",
                                    jsonObj.get("labels").toString()));
                }
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ReplaceLabelsInSourceV1Input.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ReplaceLabelsInSourceV1Input' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ReplaceLabelsInSourceV1Input> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(ReplaceLabelsInSourceV1Input.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<ReplaceLabelsInSourceV1Input>() {
                        @Override
                        public void write(JsonWriter out, ReplaceLabelsInSourceV1Input value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public ReplaceLabelsInSourceV1Input read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of ReplaceLabelsInSourceV1Input given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ReplaceLabelsInSourceV1Input
     * @throws IOException if the JSON string is invalid with respect to
     *     ReplaceLabelsInSourceV1Input
     */
    public static ReplaceLabelsInSourceV1Input fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, ReplaceLabelsInSourceV1Input.class);
    }

    /**
     * Convert an instance of ReplaceLabelsInSourceV1Input to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
