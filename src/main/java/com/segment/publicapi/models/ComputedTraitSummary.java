/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** Defines a Computed trait. */
public class ComputedTraitSummary {
    public static final String SERIALIZED_NAME_ID = "id";

    @SerializedName(SERIALIZED_NAME_ID)
    private String id;

    public static final String SERIALIZED_NAME_SPACE_ID = "spaceId";

    @SerializedName(SERIALIZED_NAME_SPACE_ID)
    private String spaceId;

    public static final String SERIALIZED_NAME_NAME = "name";

    @SerializedName(SERIALIZED_NAME_NAME)
    private String name;

    public static final String SERIALIZED_NAME_DESCRIPTION = "description";

    @SerializedName(SERIALIZED_NAME_DESCRIPTION)
    private String description;

    public static final String SERIALIZED_NAME_KEY = "key";

    @SerializedName(SERIALIZED_NAME_KEY)
    private String key;

    public static final String SERIALIZED_NAME_ENABLED = "enabled";

    @SerializedName(SERIALIZED_NAME_ENABLED)
    private Boolean enabled;

    public static final String SERIALIZED_NAME_DEFINITION = "definition";

    @SerializedName(SERIALIZED_NAME_DEFINITION)
    private Definition1 definition;

    public static final String SERIALIZED_NAME_STATUS = "status";

    @SerializedName(SERIALIZED_NAME_STATUS)
    private String status;

    public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";

    @SerializedName(SERIALIZED_NAME_CREATED_BY)
    private String createdBy;

    public static final String SERIALIZED_NAME_UPDATED_BY = "updatedBy";

    @SerializedName(SERIALIZED_NAME_UPDATED_BY)
    private String updatedBy;

    public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";

    @SerializedName(SERIALIZED_NAME_CREATED_AT)
    private String createdAt;

    public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";

    @SerializedName(SERIALIZED_NAME_UPDATED_AT)
    private String updatedAt;

    public static final String SERIALIZED_NAME_OPTIONS = "options";

    @SerializedName(SERIALIZED_NAME_OPTIONS)
    private TraitOptions options;

    public ComputedTraitSummary() {}

    public ComputedTraitSummary id(String id) {

        this.id = id;
        return this;
    }

    /**
     * Computed trait id.
     *
     * @return id
     */
    @javax.annotation.Nonnull
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public ComputedTraitSummary spaceId(String spaceId) {

        this.spaceId = spaceId;
        return this;
    }

    /**
     * Space id for the computed trait.
     *
     * @return spaceId
     */
    @javax.annotation.Nonnull
    public String getSpaceId() {
        return spaceId;
    }

    public void setSpaceId(String spaceId) {
        this.spaceId = spaceId;
    }

    public ComputedTraitSummary name(String name) {

        this.name = name;
        return this;
    }

    /**
     * Name of the computed trait.
     *
     * @return name
     */
    @javax.annotation.Nonnull
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public ComputedTraitSummary description(String description) {

        this.description = description;
        return this;
    }

    /**
     * Description of the computed trait.
     *
     * @return description
     */
    @javax.annotation.Nonnull
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public ComputedTraitSummary key(String key) {

        this.key = key;
        return this;
    }

    /**
     * Key for the computed trait.
     *
     * @return key
     */
    @javax.annotation.Nonnull
    public String getKey() {
        return key;
    }

    public void setKey(String key) {
        this.key = key;
    }

    public ComputedTraitSummary enabled(Boolean enabled) {

        this.enabled = enabled;
        return this;
    }

    /**
     * Enabled/disabled status for the computed trait.
     *
     * @return enabled
     */
    @javax.annotation.Nonnull
    public Boolean getEnabled() {
        return enabled;
    }

    public void setEnabled(Boolean enabled) {
        this.enabled = enabled;
    }

    public ComputedTraitSummary definition(Definition1 definition) {

        this.definition = definition;
        return this;
    }

    /**
     * Get definition
     *
     * @return definition
     */
    @javax.annotation.Nullable
    public Definition1 getDefinition() {
        return definition;
    }

    public void setDefinition(Definition1 definition) {
        this.definition = definition;
    }

    public ComputedTraitSummary status(String status) {

        this.status = status;
        return this;
    }

    /**
     * Status for the computed trait. Possible values: Backfilling, Computing, Failed, Live,
     * Awaiting Destinations, Disabled.
     *
     * @return status
     */
    @javax.annotation.Nullable
    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public ComputedTraitSummary createdBy(String createdBy) {

        this.createdBy = createdBy;
        return this;
    }

    /**
     * User id who created the computed trait.
     *
     * @return createdBy
     */
    @javax.annotation.Nonnull
    public String getCreatedBy() {
        return createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    public ComputedTraitSummary updatedBy(String updatedBy) {

        this.updatedBy = updatedBy;
        return this;
    }

    /**
     * User id who last updated the computed trait.
     *
     * @return updatedBy
     */
    @javax.annotation.Nonnull
    public String getUpdatedBy() {
        return updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    public ComputedTraitSummary createdAt(String createdAt) {

        this.createdAt = createdAt;
        return this;
    }

    /**
     * The timestamp of the computed trait&#39;s creation.
     *
     * @return createdAt
     */
    @javax.annotation.Nonnull
    public String getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(String createdAt) {
        this.createdAt = createdAt;
    }

    public ComputedTraitSummary updatedAt(String updatedAt) {

        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * The timestamp of the computed trait&#39;s last change.
     *
     * @return updatedAt
     */
    @javax.annotation.Nonnull
    public String getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
    }

    public ComputedTraitSummary options(TraitOptions options) {

        this.options = options;
        return this;
    }

    /**
     * Get options
     *
     * @return options
     */
    @javax.annotation.Nullable
    public TraitOptions getOptions() {
        return options;
    }

    public void setOptions(TraitOptions options) {
        this.options = options;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ComputedTraitSummary computedTraitSummary = (ComputedTraitSummary) o;
        return Objects.equals(this.id, computedTraitSummary.id)
                && Objects.equals(this.spaceId, computedTraitSummary.spaceId)
                && Objects.equals(this.name, computedTraitSummary.name)
                && Objects.equals(this.description, computedTraitSummary.description)
                && Objects.equals(this.key, computedTraitSummary.key)
                && Objects.equals(this.enabled, computedTraitSummary.enabled)
                && Objects.equals(this.definition, computedTraitSummary.definition)
                && Objects.equals(this.status, computedTraitSummary.status)
                && Objects.equals(this.createdBy, computedTraitSummary.createdBy)
                && Objects.equals(this.updatedBy, computedTraitSummary.updatedBy)
                && Objects.equals(this.createdAt, computedTraitSummary.createdAt)
                && Objects.equals(this.updatedAt, computedTraitSummary.updatedAt)
                && Objects.equals(this.options, computedTraitSummary.options);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                id,
                spaceId,
                name,
                description,
                key,
                enabled,
                definition,
                status,
                createdBy,
                updatedBy,
                createdAt,
                updatedAt,
                options);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ComputedTraitSummary {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    spaceId: ").append(toIndentedString(spaceId)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    key: ").append(toIndentedString(key)).append("\n");
        sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
        sb.append("    definition: ").append(toIndentedString(definition)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
        sb.append("    updatedBy: ").append(toIndentedString(updatedBy)).append("\n");
        sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
        sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
        sb.append("    options: ").append(toIndentedString(options)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("id");
        openapiFields.add("spaceId");
        openapiFields.add("name");
        openapiFields.add("description");
        openapiFields.add("key");
        openapiFields.add("enabled");
        openapiFields.add("definition");
        openapiFields.add("status");
        openapiFields.add("createdBy");
        openapiFields.add("updatedBy");
        openapiFields.add("createdAt");
        openapiFields.add("updatedAt");
        openapiFields.add("options");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("id");
        openapiRequiredFields.add("spaceId");
        openapiRequiredFields.add("name");
        openapiRequiredFields.add("description");
        openapiRequiredFields.add("key");
        openapiRequiredFields.add("enabled");
        openapiRequiredFields.add("definition");
        openapiRequiredFields.add("createdBy");
        openapiRequiredFields.add("updatedBy");
        openapiRequiredFields.add("createdAt");
        openapiRequiredFields.add("updatedAt");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to ComputedTraitSummary
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!ComputedTraitSummary.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in ComputedTraitSummary is not found in"
                                        + " the empty JSON string",
                                ComputedTraitSummary.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!ComputedTraitSummary.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `ComputedTraitSummary` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : ComputedTraitSummary.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("id").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `id` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("id").toString()));
        }
        if (!jsonObj.get("spaceId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `spaceId` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("spaceId").toString()));
        }
        if (!jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `name` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("name").toString()));
        }
        if (!jsonObj.get("description").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `description` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("description").toString()));
        }
        if (!jsonObj.get("key").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `key` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("key").toString()));
        }
        // validate the required field `definition`
        Definition1.validateJsonElement(jsonObj.get("definition"));
        if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull())
                && !jsonObj.get("status").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `status` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("status").toString()));
        }
        if (!jsonObj.get("createdBy").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `createdBy` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("createdBy").toString()));
        }
        if (!jsonObj.get("updatedBy").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `updatedBy` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("updatedBy").toString()));
        }
        if (!jsonObj.get("createdAt").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `createdAt` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("createdAt").toString()));
        }
        if (!jsonObj.get("updatedAt").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `updatedAt` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("updatedAt").toString()));
        }
        // validate the optional field `options`
        if (jsonObj.get("options") != null && !jsonObj.get("options").isJsonNull()) {
            TraitOptions.validateJsonElement(jsonObj.get("options"));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ComputedTraitSummary.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ComputedTraitSummary' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ComputedTraitSummary> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(ComputedTraitSummary.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<ComputedTraitSummary>() {
                        @Override
                        public void write(JsonWriter out, ComputedTraitSummary value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public ComputedTraitSummary read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of ComputedTraitSummary given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ComputedTraitSummary
     * @throws IOException if the JSON string is invalid with respect to ComputedTraitSummary
     */
    public static ComputedTraitSummary fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, ComputedTraitSummary.class);
    }

    /**
     * Convert an instance of ComputedTraitSummary to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
