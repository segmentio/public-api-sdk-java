/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * The version of the OpenAPI document: 32.0.8
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;


import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;
import org.openapitools.jackson.nullable.JsonNullable;

/** Updates a single Destination by its id. */
@ApiModel(description = "Updates a single Destination by its id.")
public class UpdateDestinationV1Input {
    public static final String SERIALIZED_NAME_NAME = "name";

    @SerializedName(SERIALIZED_NAME_NAME)
    private String name;

    public static final String SERIALIZED_NAME_ENABLED = "enabled";

    @SerializedName(SERIALIZED_NAME_ENABLED)
    private Boolean enabled;

    public static final String SERIALIZED_NAME_SETTINGS = "settings";

    @SerializedName(SERIALIZED_NAME_SETTINGS)
    private Map<String, Object> settings = null;

    public UpdateDestinationV1Input() {}

    public UpdateDestinationV1Input name(String name) {

        this.name = name;
        return this;
    }

    /**
     * Defines the display name of the Destination. Config API note: equal to
     * &#x60;displayName&#x60;.
     *
     * @return name
     */
    @javax.annotation.Nullable
    @ApiModelProperty(
            value =
                    "Defines the display name of the Destination.  Config API note: equal to"
                            + " `displayName`.")
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public UpdateDestinationV1Input enabled(Boolean enabled) {

        this.enabled = enabled;
        return this;
    }

    /**
     * Whether this Destination should receive data.
     *
     * @return enabled
     */
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Whether this Destination should receive data.")
    public Boolean getEnabled() {
        return enabled;
    }

    public void setEnabled(Boolean enabled) {
        this.enabled = enabled;
    }

    public UpdateDestinationV1Input settings(Map<String, Object> settings) {

        this.settings = settings;
        return this;
    }

    public UpdateDestinationV1Input putSettingsItem(String key, Object settingsItem) {
        if (this.settings == null) {
            this.settings = new HashMap<>();
        }
        this.settings.put(key, settingsItem);
        return this;
    }

    /**
     * An optional object that contains settings for the Destination based on the
     * \&quot;required\&quot; and \&quot;advanced\&quot; settings present in the Destination
     * metadata. Config API note: equal to &#x60;config&#x60;.
     *
     * @return settings
     */
    @javax.annotation.Nullable
    @ApiModelProperty(
            value =
                    "An optional object that contains settings for the Destination based on the"
                            + " \"required\" and \"advanced\" settings present in the Destination"
                            + " metadata.  Config API note: equal to `config`.")
    public Map<String, Object> getSettings() {
        return settings;
    }

    public void setSettings(Map<String, Object> settings) {
        this.settings = settings;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateDestinationV1Input updateDestinationV1Input = (UpdateDestinationV1Input) o;
        return Objects.equals(this.name, updateDestinationV1Input.name)
                && Objects.equals(this.enabled, updateDestinationV1Input.enabled)
                && Objects.equals(this.settings, updateDestinationV1Input.settings);
    }

    private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
        return a == b
                || (a != null
                        && b != null
                        && a.isPresent()
                        && b.isPresent()
                        && Objects.deepEquals(a.get(), b.get()));
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, enabled, settings);
    }

    private static <T> int hashCodeNullable(JsonNullable<T> a) {
        if (a == null) {
            return 1;
        }
        return a.isPresent() ? Arrays.deepHashCode(new Object[] {a.get()}) : 31;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class UpdateDestinationV1Input {\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
        sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("name");
        openapiFields.add("enabled");
        openapiFields.add("settings");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to UpdateDestinationV1Input
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!UpdateDestinationV1Input.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in UpdateDestinationV1Input is not found"
                                        + " in the empty JSON string",
                                UpdateDestinationV1Input.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!UpdateDestinationV1Input.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `UpdateDestinationV1Input` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }
        if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull())
                && !jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `name` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("name").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!UpdateDestinationV1Input.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'UpdateDestinationV1Input' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<UpdateDestinationV1Input> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(UpdateDestinationV1Input.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<UpdateDestinationV1Input>() {
                        @Override
                        public void write(JsonWriter out, UpdateDestinationV1Input value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public UpdateDestinationV1Input read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of UpdateDestinationV1Input given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of UpdateDestinationV1Input
     * @throws IOException if the JSON string is invalid with respect to UpdateDestinationV1Input
     */
    public static UpdateDestinationV1Input fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, UpdateDestinationV1Input.class);
    }

    /**
     * Convert an instance of UpdateDestinationV1Input to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
