/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * The version of the OpenAPI document: 32.0.5
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;


import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/** Determines the time of day at which a Warehouse should sync. */
@ApiModel(description = "Determines the time of day at which a Warehouse should sync.")
public class WarehouseAdvancedSyncV1 {
    public static final String SERIALIZED_NAME_HOUR_OF_DAY = "hourOfDay";

    @SerializedName(SERIALIZED_NAME_HOUR_OF_DAY)
    private BigDecimal hourOfDay;

    public static final String SERIALIZED_NAME_ENABLED = "enabled";

    @SerializedName(SERIALIZED_NAME_ENABLED)
    private Boolean enabled;

    public WarehouseAdvancedSyncV1() {}

    public WarehouseAdvancedSyncV1 hourOfDay(BigDecimal hourOfDay) {

        this.hourOfDay = hourOfDay;
        return this;
    }

    /**
     * The hour of day for which to enable/disable a sync, between 0 and 23.
     *
     * @return hourOfDay
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(
            required = true,
            value = "The hour of day for which to enable/disable a sync, between 0 and 23.")
    public BigDecimal getHourOfDay() {
        return hourOfDay;
    }

    public void setHourOfDay(BigDecimal hourOfDay) {
        this.hourOfDay = hourOfDay;
    }

    public WarehouseAdvancedSyncV1 enabled(Boolean enabled) {

        this.enabled = enabled;
        return this;
    }

    /**
     * Enable to the sync at the specified hour.
     *
     * @return enabled
     */
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "Enable to the sync at the specified hour.")
    public Boolean getEnabled() {
        return enabled;
    }

    public void setEnabled(Boolean enabled) {
        this.enabled = enabled;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WarehouseAdvancedSyncV1 warehouseAdvancedSyncV1 = (WarehouseAdvancedSyncV1) o;
        return Objects.equals(this.hourOfDay, warehouseAdvancedSyncV1.hourOfDay)
                && Objects.equals(this.enabled, warehouseAdvancedSyncV1.enabled);
    }

    @Override
    public int hashCode() {
        return Objects.hash(hourOfDay, enabled);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class WarehouseAdvancedSyncV1 {\n");
        sb.append("    hourOfDay: ").append(toIndentedString(hourOfDay)).append("\n");
        sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("hourOfDay");
        openapiFields.add("enabled");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("hourOfDay");
        openapiRequiredFields.add("enabled");
    }

    /**
     * Validates the JSON Object and throws an exception if issues found
     *
     * @param jsonObj JSON Object
     * @throws IOException if the JSON Object is invalid with respect to WarehouseAdvancedSyncV1
     */
    public static void validateJsonObject(JsonObject jsonObj) throws IOException {
        if (jsonObj == null) {
            if (!WarehouseAdvancedSyncV1.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON object is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in WarehouseAdvancedSyncV1 is not found"
                                        + " in the empty JSON string",
                                WarehouseAdvancedSyncV1.openapiRequiredFields.toString()));
            }
        }

        Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
        // check to see if the JSON string contains additional fields
        for (Entry<String, JsonElement> entry : entries) {
            if (!WarehouseAdvancedSyncV1.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `WarehouseAdvancedSyncV1` properties. JSON: %s",
                                entry.getKey(), jsonObj.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : WarehouseAdvancedSyncV1.openapiRequiredFields) {
            if (jsonObj.get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonObj.toString()));
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!WarehouseAdvancedSyncV1.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'WarehouseAdvancedSyncV1' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<WarehouseAdvancedSyncV1> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(WarehouseAdvancedSyncV1.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<WarehouseAdvancedSyncV1>() {
                        @Override
                        public void write(JsonWriter out, WarehouseAdvancedSyncV1 value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public WarehouseAdvancedSyncV1 read(JsonReader in) throws IOException {
                            JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
                            validateJsonObject(jsonObj);
                            return thisAdapter.fromJsonTree(jsonObj);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of WarehouseAdvancedSyncV1 given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of WarehouseAdvancedSyncV1
     * @throws IOException if the JSON string is invalid with respect to WarehouseAdvancedSyncV1
     */
    public static WarehouseAdvancedSyncV1 fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, WarehouseAdvancedSyncV1.class);
    }

    /**
     * Convert an instance of WarehouseAdvancedSyncV1 to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
