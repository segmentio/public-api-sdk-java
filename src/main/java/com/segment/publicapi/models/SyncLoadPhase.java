/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** Object representing the load phase + details. */
public class SyncLoadPhase {
    public static final String SERIALIZED_NAME_DELIVER_SUCCESS_COUNT = "deliverSuccessCount";

    @SerializedName(SERIALIZED_NAME_DELIVER_SUCCESS_COUNT)
    private String deliverSuccessCount;

    public static final String SERIALIZED_NAME_DELIVER_FAILURE_COUNT = "deliverFailureCount";

    @SerializedName(SERIALIZED_NAME_DELIVER_FAILURE_COUNT)
    private String deliverFailureCount;

    public static final String SERIALIZED_NAME_ERROR_CODE = "errorCode";

    @SerializedName(SERIALIZED_NAME_ERROR_CODE)
    private String errorCode;

    public static final String SERIALIZED_NAME_STARTED_AT = "startedAt";

    @SerializedName(SERIALIZED_NAME_STARTED_AT)
    private String startedAt;

    public static final String SERIALIZED_NAME_FINISHED_AT = "finishedAt";

    @SerializedName(SERIALIZED_NAME_FINISHED_AT)
    private String finishedAt;

    public SyncLoadPhase() {}

    public SyncLoadPhase deliverSuccessCount(String deliverSuccessCount) {

        this.deliverSuccessCount = deliverSuccessCount;
        return this;
    }

    /**
     * Counts the subset of records successfully delivered to the downstream Destination.
     *
     * @return deliverSuccessCount
     */
    @javax.annotation.Nonnull
    public String getDeliverSuccessCount() {
        return deliverSuccessCount;
    }

    public void setDeliverSuccessCount(String deliverSuccessCount) {
        this.deliverSuccessCount = deliverSuccessCount;
    }

    public SyncLoadPhase deliverFailureCount(String deliverFailureCount) {

        this.deliverFailureCount = deliverFailureCount;
        return this;
    }

    /**
     * Counts the subset of records status that failed to be delivered by either receiving a
     * permanent error (for example, 400 Bad Request) or by exhausting all retries for temporary
     * errors (for example, 429 Too Many Requests).
     *
     * @return deliverFailureCount
     */
    @javax.annotation.Nonnull
    public String getDeliverFailureCount() {
        return deliverFailureCount;
    }

    public void setDeliverFailureCount(String deliverFailureCount) {
        this.deliverFailureCount = deliverFailureCount;
    }

    public SyncLoadPhase errorCode(String errorCode) {

        this.errorCode = errorCode;
        return this;
    }

    /**
     * Error code indicates a fatal sync error code, if applicable.
     *
     * @return errorCode
     */
    @javax.annotation.Nonnull
    public String getErrorCode() {
        return errorCode;
    }

    public void setErrorCode(String errorCode) {
        this.errorCode = errorCode;
    }

    public SyncLoadPhase startedAt(String startedAt) {

        this.startedAt = startedAt;
        return this;
    }

    /**
     * Time that the load phase started.
     *
     * @return startedAt
     */
    @javax.annotation.Nonnull
    public String getStartedAt() {
        return startedAt;
    }

    public void setStartedAt(String startedAt) {
        this.startedAt = startedAt;
    }

    public SyncLoadPhase finishedAt(String finishedAt) {

        this.finishedAt = finishedAt;
        return this;
    }

    /**
     * Time that the load phase finished.
     *
     * @return finishedAt
     */
    @javax.annotation.Nonnull
    public String getFinishedAt() {
        return finishedAt;
    }

    public void setFinishedAt(String finishedAt) {
        this.finishedAt = finishedAt;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SyncLoadPhase syncLoadPhase = (SyncLoadPhase) o;
        return Objects.equals(this.deliverSuccessCount, syncLoadPhase.deliverSuccessCount)
                && Objects.equals(this.deliverFailureCount, syncLoadPhase.deliverFailureCount)
                && Objects.equals(this.errorCode, syncLoadPhase.errorCode)
                && Objects.equals(this.startedAt, syncLoadPhase.startedAt)
                && Objects.equals(this.finishedAt, syncLoadPhase.finishedAt);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                deliverSuccessCount, deliverFailureCount, errorCode, startedAt, finishedAt);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SyncLoadPhase {\n");
        sb.append("    deliverSuccessCount: ")
                .append(toIndentedString(deliverSuccessCount))
                .append("\n");
        sb.append("    deliverFailureCount: ")
                .append(toIndentedString(deliverFailureCount))
                .append("\n");
        sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
        sb.append("    startedAt: ").append(toIndentedString(startedAt)).append("\n");
        sb.append("    finishedAt: ").append(toIndentedString(finishedAt)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("deliverSuccessCount");
        openapiFields.add("deliverFailureCount");
        openapiFields.add("errorCode");
        openapiFields.add("startedAt");
        openapiFields.add("finishedAt");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("deliverSuccessCount");
        openapiRequiredFields.add("deliverFailureCount");
        openapiRequiredFields.add("errorCode");
        openapiRequiredFields.add("startedAt");
        openapiRequiredFields.add("finishedAt");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to SyncLoadPhase
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!SyncLoadPhase.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in SyncLoadPhase is not found in the"
                                        + " empty JSON string",
                                SyncLoadPhase.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!SyncLoadPhase.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `SyncLoadPhase` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : SyncLoadPhase.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("deliverSuccessCount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `deliverSuccessCount` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("deliverSuccessCount").toString()));
        }
        if (!jsonObj.get("deliverFailureCount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `deliverFailureCount` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("deliverFailureCount").toString()));
        }
        if (!jsonObj.get("errorCode").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `errorCode` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("errorCode").toString()));
        }
        if (!jsonObj.get("startedAt").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `startedAt` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("startedAt").toString()));
        }
        if (!jsonObj.get("finishedAt").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `finishedAt` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("finishedAt").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!SyncLoadPhase.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'SyncLoadPhase' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<SyncLoadPhase> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(SyncLoadPhase.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<SyncLoadPhase>() {
                        @Override
                        public void write(JsonWriter out, SyncLoadPhase value) throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public SyncLoadPhase read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of SyncLoadPhase given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of SyncLoadPhase
     * @throws IOException if the JSON string is invalid with respect to SyncLoadPhase
     */
    public static SyncLoadPhase fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, SyncLoadPhase.class);
    }

    /**
     * Convert an instance of SyncLoadPhase to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
