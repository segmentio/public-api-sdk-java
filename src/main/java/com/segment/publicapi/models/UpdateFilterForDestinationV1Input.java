/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.openapitools.jackson.nullable.JsonNullable;

/** Input for UpdateDestinationFilterV1. */
public class UpdateFilterForDestinationV1Input {
    public static final String SERIALIZED_NAME_IF = "if";

    @SerializedName(SERIALIZED_NAME_IF)
    private String _if;

    public static final String SERIALIZED_NAME_ACTIONS = "actions";

    @SerializedName(SERIALIZED_NAME_ACTIONS)
    private List<DestinationFilterActionV1> actions;

    public static final String SERIALIZED_NAME_TITLE = "title";

    @SerializedName(SERIALIZED_NAME_TITLE)
    private String title;

    public static final String SERIALIZED_NAME_DESCRIPTION = "description";

    @SerializedName(SERIALIZED_NAME_DESCRIPTION)
    private String description;

    public static final String SERIALIZED_NAME_ENABLED = "enabled";

    @SerializedName(SERIALIZED_NAME_ENABLED)
    private Boolean enabled;

    public UpdateFilterForDestinationV1Input() {}

    public UpdateFilterForDestinationV1Input _if(String _if) {

        this._if = _if;
        return this;
    }

    /**
     * The FQL if condition to update.
     *
     * @return _if
     */
    @javax.annotation.Nullable
    public String getIf() {
        return _if;
    }

    public void setIf(String _if) {
        this._if = _if;
    }

    public UpdateFilterForDestinationV1Input actions(List<DestinationFilterActionV1> actions) {

        this.actions = actions;
        return this;
    }

    public UpdateFilterForDestinationV1Input addActionsItem(DestinationFilterActionV1 actionsItem) {
        if (this.actions == null) {
            this.actions = new ArrayList<>();
        }
        this.actions.add(actionsItem);
        return this;
    }

    /**
     * Actions for this Destination filter.
     *
     * @return actions
     */
    @javax.annotation.Nullable
    public List<DestinationFilterActionV1> getActions() {
        return actions;
    }

    public void setActions(List<DestinationFilterActionV1> actions) {
        this.actions = actions;
    }

    public UpdateFilterForDestinationV1Input title(String title) {

        this.title = title;
        return this;
    }

    /**
     * The title to update.
     *
     * @return title
     */
    @javax.annotation.Nullable
    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public UpdateFilterForDestinationV1Input description(String description) {

        this.description = description;
        return this;
    }

    /**
     * The description of this filter.
     *
     * @return description
     */
    @javax.annotation.Nullable
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public UpdateFilterForDestinationV1Input enabled(Boolean enabled) {

        this.enabled = enabled;
        return this;
    }

    /**
     * When set to true, this Destination filter is active.
     *
     * @return enabled
     */
    @javax.annotation.Nullable
    public Boolean getEnabled() {
        return enabled;
    }

    public void setEnabled(Boolean enabled) {
        this.enabled = enabled;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateFilterForDestinationV1Input updateFilterForDestinationV1Input =
                (UpdateFilterForDestinationV1Input) o;
        return Objects.equals(this._if, updateFilterForDestinationV1Input._if)
                && Objects.equals(this.actions, updateFilterForDestinationV1Input.actions)
                && Objects.equals(this.title, updateFilterForDestinationV1Input.title)
                && Objects.equals(this.description, updateFilterForDestinationV1Input.description)
                && Objects.equals(this.enabled, updateFilterForDestinationV1Input.enabled);
    }

    private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
        return a == b
                || (a != null
                        && b != null
                        && a.isPresent()
                        && b.isPresent()
                        && Objects.deepEquals(a.get(), b.get()));
    }

    @Override
    public int hashCode() {
        return Objects.hash(_if, actions, title, description, enabled);
    }

    private static <T> int hashCodeNullable(JsonNullable<T> a) {
        if (a == null) {
            return 1;
        }
        return a.isPresent() ? Arrays.deepHashCode(new Object[] {a.get()}) : 31;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class UpdateFilterForDestinationV1Input {\n");
        sb.append("    _if: ").append(toIndentedString(_if)).append("\n");
        sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
        sb.append("    title: ").append(toIndentedString(title)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("if");
        openapiFields.add("actions");
        openapiFields.add("title");
        openapiFields.add("description");
        openapiFields.add("enabled");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     UpdateFilterForDestinationV1Input
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!UpdateFilterForDestinationV1Input.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in UpdateFilterForDestinationV1Input is"
                                        + " not found in the empty JSON string",
                                UpdateFilterForDestinationV1Input.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!UpdateFilterForDestinationV1Input.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `UpdateFilterForDestinationV1Input` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("if") != null && !jsonObj.get("if").isJsonNull())
                && !jsonObj.get("if").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `if` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("if").toString()));
        }
        if (jsonObj.get("actions") != null && !jsonObj.get("actions").isJsonNull()) {
            JsonArray jsonArrayactions = jsonObj.getAsJsonArray("actions");
            if (jsonArrayactions != null) {
                // ensure the json data is an array
                if (!jsonObj.get("actions").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `actions` to be an array in the JSON string"
                                            + " but got `%s`",
                                    jsonObj.get("actions").toString()));
                }

                // validate the optional field `actions` (array)
                for (int i = 0; i < jsonArrayactions.size(); i++) {
                    DestinationFilterActionV1.validateJsonElement(jsonArrayactions.get(i));
                }
                ;
            }
        }
        if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull())
                && !jsonObj.get("title").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `title` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("title").toString()));
        }
        if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull())
                && !jsonObj.get("description").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `description` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("description").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!UpdateFilterForDestinationV1Input.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'UpdateFilterForDestinationV1Input' and
                // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<UpdateFilterForDestinationV1Input> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(UpdateFilterForDestinationV1Input.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<UpdateFilterForDestinationV1Input>() {
                        @Override
                        public void write(JsonWriter out, UpdateFilterForDestinationV1Input value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public UpdateFilterForDestinationV1Input read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of UpdateFilterForDestinationV1Input given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of UpdateFilterForDestinationV1Input
     * @throws IOException if the JSON string is invalid with respect to
     *     UpdateFilterForDestinationV1Input
     */
    public static UpdateFilterForDestinationV1Input fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, UpdateFilterForDestinationV1Input.class);
    }

    /**
     * Convert an instance of UpdateFilterForDestinationV1Input to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
