/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** Create a new Source based on a set of parameters. */
public class CreateSourceAlphaInput {
    public static final String SERIALIZED_NAME_SLUG = "slug";

    @SerializedName(SERIALIZED_NAME_SLUG)
    private String slug;

    public static final String SERIALIZED_NAME_ENABLED = "enabled";

    @SerializedName(SERIALIZED_NAME_ENABLED)
    private Boolean enabled;

    public static final String SERIALIZED_NAME_NAME = "name";

    @SerializedName(SERIALIZED_NAME_NAME)
    private String name;

    public static final String SERIALIZED_NAME_METADATA_ID = "metadataId";

    @SerializedName(SERIALIZED_NAME_METADATA_ID)
    private String metadataId;

    public static final String SERIALIZED_NAME_SETTINGS = "settings";

    @SerializedName(SERIALIZED_NAME_SETTINGS)
    private Map<String, Object> settings;

    public CreateSourceAlphaInput() {}

    public CreateSourceAlphaInput slug(String slug) {

        this.slug = slug;
        return this;
    }

    /**
     * The slug by which to identify the Source in the Segment app.
     *
     * @return slug
     */
    @javax.annotation.Nonnull
    public String getSlug() {
        return slug;
    }

    public void setSlug(String slug) {
        this.slug = slug;
    }

    public CreateSourceAlphaInput enabled(Boolean enabled) {

        this.enabled = enabled;
        return this;
    }

    /**
     * Enable to allow this Source to send data. Defaults to true.
     *
     * @return enabled
     */
    @javax.annotation.Nonnull
    public Boolean getEnabled() {
        return enabled;
    }

    public void setEnabled(Boolean enabled) {
        this.enabled = enabled;
    }

    public CreateSourceAlphaInput name(String name) {

        this.name = name;
        return this;
    }

    /**
     * An optional human-readable name for this Source.
     *
     * @return name
     */
    @javax.annotation.Nullable
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public CreateSourceAlphaInput metadataId(String metadataId) {

        this.metadataId = metadataId;
        return this;
    }

    /**
     * The id of the Source metadata from which this instance of the Source derives. All Source
     * metadata is available under &#x60;/catalog/sources&#x60;.
     *
     * @return metadataId
     */
    @javax.annotation.Nonnull
    public String getMetadataId() {
        return metadataId;
    }

    public void setMetadataId(String metadataId) {
        this.metadataId = metadataId;
    }

    public CreateSourceAlphaInput settings(Map<String, Object> settings) {

        this.settings = settings;
        return this;
    }

    public CreateSourceAlphaInput putSettingsItem(String key, Object settingsItem) {
        if (this.settings == null) {
            this.settings = new HashMap<>();
        }
        this.settings.put(key, settingsItem);
        return this;
    }

    /**
     * A key-value object that contains instance-specific settings for a Source. The
     * &#x60;options&#x60; field in the Source metadata defines the schema of this object.
     *
     * @return settings
     */
    @javax.annotation.Nullable
    public Map<String, Object> getSettings() {
        return settings;
    }

    public void setSettings(Map<String, Object> settings) {
        this.settings = settings;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateSourceAlphaInput createSourceAlphaInput = (CreateSourceAlphaInput) o;
        return Objects.equals(this.slug, createSourceAlphaInput.slug)
                && Objects.equals(this.enabled, createSourceAlphaInput.enabled)
                && Objects.equals(this.name, createSourceAlphaInput.name)
                && Objects.equals(this.metadataId, createSourceAlphaInput.metadataId)
                && Objects.equals(this.settings, createSourceAlphaInput.settings);
    }

    @Override
    public int hashCode() {
        return Objects.hash(slug, enabled, name, metadataId, settings);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CreateSourceAlphaInput {\n");
        sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
        sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    metadataId: ").append(toIndentedString(metadataId)).append("\n");
        sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("slug");
        openapiFields.add("enabled");
        openapiFields.add("name");
        openapiFields.add("metadataId");
        openapiFields.add("settings");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("slug");
        openapiRequiredFields.add("enabled");
        openapiRequiredFields.add("metadataId");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to CreateSourceAlphaInput
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!CreateSourceAlphaInput.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in CreateSourceAlphaInput is not found in"
                                        + " the empty JSON string",
                                CreateSourceAlphaInput.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!CreateSourceAlphaInput.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `CreateSourceAlphaInput` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : CreateSourceAlphaInput.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("slug").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `slug` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("slug").toString()));
        }
        if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull())
                && !jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `name` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("name").toString()));
        }
        if (!jsonObj.get("metadataId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `metadataId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("metadataId").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CreateSourceAlphaInput.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CreateSourceAlphaInput' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CreateSourceAlphaInput> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(CreateSourceAlphaInput.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<CreateSourceAlphaInput>() {
                        @Override
                        public void write(JsonWriter out, CreateSourceAlphaInput value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public CreateSourceAlphaInput read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of CreateSourceAlphaInput given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CreateSourceAlphaInput
     * @throws IOException if the JSON string is invalid with respect to CreateSourceAlphaInput
     */
    public static CreateSourceAlphaInput fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CreateSourceAlphaInput.class);
    }

    /**
     * Convert an instance of CreateSourceAlphaInput to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
