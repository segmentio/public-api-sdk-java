/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API.
 *
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.segment.publicapi.models;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.segment.publicapi.JSON;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** Returns a list of Sources connected to a Warehouse. */
public class ListConnectedSourcesFromWarehouseV1Output {
    public static final String SERIALIZED_NAME_SOURCES = "sources";

    @SerializedName(SERIALIZED_NAME_SOURCES)
    private List<SourceV1> sources = new ArrayList<>();

    public static final String SERIALIZED_NAME_PAGINATION = "pagination";

    @SerializedName(SERIALIZED_NAME_PAGINATION)
    private PaginationOutput pagination;

    public ListConnectedSourcesFromWarehouseV1Output() {}

    public ListConnectedSourcesFromWarehouseV1Output sources(List<SourceV1> sources) {

        this.sources = sources;
        return this;
    }

    public ListConnectedSourcesFromWarehouseV1Output addSourcesItem(SourceV1 sourcesItem) {
        if (this.sources == null) {
            this.sources = new ArrayList<>();
        }
        this.sources.add(sourcesItem);
        return this;
    }

    /**
     * A list that contains the Sources connected to the requested Warehouse.
     *
     * @return sources
     */
    @javax.annotation.Nonnull
    public List<SourceV1> getSources() {
        return sources;
    }

    public void setSources(List<SourceV1> sources) {
        this.sources = sources;
    }

    public ListConnectedSourcesFromWarehouseV1Output pagination(PaginationOutput pagination) {

        this.pagination = pagination;
        return this;
    }

    /**
     * Get pagination
     *
     * @return pagination
     */
    @javax.annotation.Nonnull
    public PaginationOutput getPagination() {
        return pagination;
    }

    public void setPagination(PaginationOutput pagination) {
        this.pagination = pagination;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListConnectedSourcesFromWarehouseV1Output listConnectedSourcesFromWarehouseV1Output =
                (ListConnectedSourcesFromWarehouseV1Output) o;
        return Objects.equals(this.sources, listConnectedSourcesFromWarehouseV1Output.sources)
                && Objects.equals(
                        this.pagination, listConnectedSourcesFromWarehouseV1Output.pagination);
    }

    @Override
    public int hashCode() {
        return Objects.hash(sources, pagination);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ListConnectedSourcesFromWarehouseV1Output {\n");
        sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
        sb.append("    pagination: ").append(toIndentedString(pagination)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("sources");
        openapiFields.add("pagination");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("sources");
        openapiRequiredFields.add("pagination");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     ListConnectedSourcesFromWarehouseV1Output
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!ListConnectedSourcesFromWarehouseV1Output.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " ListConnectedSourcesFromWarehouseV1Output is not found in"
                                    + " the empty JSON string",
                                ListConnectedSourcesFromWarehouseV1Output.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!ListConnectedSourcesFromWarehouseV1Output.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `ListConnectedSourcesFromWarehouseV1Output` properties."
                                        + " JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField :
                ListConnectedSourcesFromWarehouseV1Output.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        // ensure the json data is an array
        if (!jsonObj.get("sources").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `sources` to be an array in the JSON string but got"
                                    + " `%s`",
                            jsonObj.get("sources").toString()));
        }

        JsonArray jsonArraysources = jsonObj.getAsJsonArray("sources");
        // validate the required field `sources` (array)
        for (int i = 0; i < jsonArraysources.size(); i++) {
            SourceV1.validateJsonElement(jsonArraysources.get(i));
        }
        ;
        // validate the required field `pagination`
        PaginationOutput.validateJsonElement(jsonObj.get("pagination"));
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ListConnectedSourcesFromWarehouseV1Output.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'ListConnectedSourcesFromWarehouseV1Output' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ListConnectedSourcesFromWarehouseV1Output> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(ListConnectedSourcesFromWarehouseV1Output.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<ListConnectedSourcesFromWarehouseV1Output>() {
                        @Override
                        public void write(
                                JsonWriter out, ListConnectedSourcesFromWarehouseV1Output value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public ListConnectedSourcesFromWarehouseV1Output read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of ListConnectedSourcesFromWarehouseV1Output given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ListConnectedSourcesFromWarehouseV1Output
     * @throws IOException if the JSON string is invalid with respect to
     *     ListConnectedSourcesFromWarehouseV1Output
     */
    public static ListConnectedSourcesFromWarehouseV1Output fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, ListConnectedSourcesFromWarehouseV1Output.class);
    }

    /**
     * Convert an instance of ListConnectedSourcesFromWarehouseV1Output to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
