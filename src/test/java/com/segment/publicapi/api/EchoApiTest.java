/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 32.0.2
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.segment.publicapi.api;

import com.segment.publicapi.ApiException;
import java.math.BigDecimal;
import com.segment.publicapi.models.Echo200Response;
import com.segment.publicapi.models.EchoAlphaOutput;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

/**
 * API tests for TestingApi
 */

public class EchoApiTest {

    private final TestingApi api = new TestingApi();

    /**
     * Echo
     *
     * Public Echo endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void echoTest() throws ApiException {
        String message = "Hello Segment!";
        BigDecimal delay = null;
        Boolean triggerError = null;
        Boolean triggerMultipleErrors = null;
        Boolean triggerUnexpectedError = null;
        BigDecimal statusCode = null;

        TestingApi mockedApi = Mockito.mock(TestingApi.class);

        EchoAlphaOutput mockedOutput = new EchoAlphaOutput();
        mockedOutput.setMessage(message);
        Echo200Response mockedResponse = new Echo200Response();
        mockedResponse.setData(mockedOutput);

        Mockito.when(mockedApi.echo(message, delay, triggerError, triggerMultipleErrors, triggerUnexpectedError, statusCode)).thenReturn(mockedResponse);

        Echo200Response response = mockedApi.echo(message, delay, triggerError, triggerMultipleErrors, triggerUnexpectedError, statusCode);
        assert response == mockedResponse;
    }

}
