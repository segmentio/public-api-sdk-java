/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 32.0.2
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.segment.publicapi.api;

import com.segment.publicapi.ApiException;
import com.segment.publicapi.models.CreateDestination200Response;
import com.segment.publicapi.models.CreateDestinationSubscription200Response;
import com.segment.publicapi.models.CreateDestinationSubscriptionAlphaInput;
import com.segment.publicapi.models.CreateDestinationV1Input;
import com.segment.publicapi.models.DeleteDestination200Response;
import com.segment.publicapi.models.GetDestination200Response;
import com.segment.publicapi.models.GetSubscriptionFromDestination200Response;
import com.segment.publicapi.models.ListDeliveryMetricsSummaryFromDestination200Response;
import com.segment.publicapi.models.ListDestinations200Response;
import com.segment.publicapi.models.ListSubscriptionsFromDestination200Response;
import com.segment.publicapi.models.PaginationInput;
import com.segment.publicapi.models.RemoveSubscriptionFromDestination200Response;
import com.segment.publicapi.models.RequestErrorEnvelope;
import com.segment.publicapi.models.UpdateDestination200Response;
import com.segment.publicapi.models.UpdateDestinationV1Input;
import com.segment.publicapi.models.UpdateSubscriptionForDestination200Response;
import com.segment.publicapi.models.UpdateSubscriptionForDestinationAlphaInput;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DestinationsApi
 */
@Disabled
public class DestinationsApiTest {

    private final DestinationsApi api = new DestinationsApi();

    /**
     * Create Destination
     *
     * Creates a new Destination.    When called, this endpoint may generate the &#x60;Integration Created&#x60; [Audit Trail](/tag/Audit-Trail) event.       
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDestinationTest() throws ApiException {
        CreateDestinationV1Input createDestinationV1Input = null;
        CreateDestination200Response response = api.createDestination(createDestinationV1Input);
        // TODO: test validations
    }

    /**
     * Create Destination Subscription
     *
     * Creates a new Destination subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDestinationSubscriptionTest() throws ApiException {
        String destinationId = null;
        CreateDestinationSubscriptionAlphaInput createDestinationSubscriptionAlphaInput = null;
        CreateDestinationSubscription200Response response = api.createDestinationSubscription(destinationId, createDestinationSubscriptionAlphaInput);
        // TODO: test validations
    }

    /**
     * Delete Destination
     *
     * Deletes an existing Destination.    When called, this endpoint may generate the &#x60;Integration Deleted&#x60; [Audit Trail](/tag/Audit-Trail) event.  Config API omitted fields: - &#x60;catalogId&#x60;       
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDestinationTest() throws ApiException {
        String destinationId = null;
        DeleteDestination200Response response = api.deleteDestination(destinationId);
        // TODO: test validations
    }

    /**
     * Get Destination
     *
     * Returns a Destination by its id.        Config API omitted fields: - &#x60;catalogId&#x60; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDestinationTest() throws ApiException {
        String destinationId = null;
        GetDestination200Response response = api.getDestination(destinationId);
        // TODO: test validations
    }

    /**
     * Get Subscription from Destination
     *
     * Gets a Destination subscription by id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubscriptionFromDestinationTest() throws ApiException {
        String destinationId = null;
        String id = null;
        GetSubscriptionFromDestination200Response response = api.getSubscriptionFromDestination(destinationId, id);
        // TODO: test validations
    }

    /**
     * List Delivery Metrics Summary from Destination
     *
     * Get event delivery metrics summary from a Destination.          Based on the granularity, there are restrictions on the time range you can query:      **Minute Granularity**:    - Max time range: 4 hours    - Oldest possible start time: 48 hours in the past      **Hour Granularity**:    - Max Time range: 1 week    - Oldest possible start time: 10 days in the past      **Day Granularity**:    - Max time range: 60 days    - Oldest possible start time: 60 days in the past          
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDeliveryMetricsSummaryFromDestinationTest() throws ApiException {
        String destinationId = null;
        String sourceId = null;
        String startTime = null;
        String endTime = null;
        String granularity = null;
        ListDeliveryMetricsSummaryFromDestination200Response response = api.listDeliveryMetricsSummaryFromDestination(destinationId, sourceId, startTime, endTime, granularity);
        // TODO: test validations
    }

    /**
     * List Destinations
     *
     * Returns a list of Destinations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDestinationsTest() throws ApiException {
        PaginationInput pagination = null;
        ListDestinations200Response response = api.listDestinations(pagination);
        // TODO: test validations
    }

    /**
     * List Subscriptions from Destination
     *
     * Lists subscriptions for a Destination.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSubscriptionsFromDestinationTest() throws ApiException {
        String destinationId = null;
        PaginationInput pagination = null;
        ListSubscriptionsFromDestination200Response response = api.listSubscriptionsFromDestination(destinationId, pagination);
        // TODO: test validations
    }

    /**
     * Remove Subscription from Destination
     *
     * Deletes an existing Destination subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeSubscriptionFromDestinationTest() throws ApiException {
        String destinationId = null;
        String id = null;
        RemoveSubscriptionFromDestination200Response response = api.removeSubscriptionFromDestination(destinationId, id);
        // TODO: test validations
    }

    /**
     * Update Destination
     *
     * Updates an existing Destination.  **Note**: if you attempt to update read-only settings for your destination you&#39;ll encounter the following behavior:    * If only read-only properties are being updated, the endpoint will return an HTTP 400 error.   * If there&#39;s a mix of writable and read-only properties in the payload, the request will be accepted, the writable properties will be updated and the read-only properties ignored.     When called, this endpoint may generate the &#x60;Integration Disabled&#x60; [Audit Trail](/tag/Audit-Trail) event.  Config API omitted fields: - &#x60;updateMask&#x60;          
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDestinationTest() throws ApiException {
        String destinationId = null;
        UpdateDestinationV1Input updateDestinationV1Input = null;
        UpdateDestination200Response response = api.updateDestination(destinationId, updateDestinationV1Input);
        // TODO: test validations
    }

    /**
     * Update Subscription for Destination
     *
     * Updates an existing Destination subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSubscriptionForDestinationTest() throws ApiException {
        String destinationId = null;
        String id = null;
        UpdateSubscriptionForDestinationAlphaInput updateSubscriptionForDestinationAlphaInput = null;
        UpdateSubscriptionForDestination200Response response = api.updateSubscriptionForDestination(destinationId, id, updateSubscriptionForDestinationAlphaInput);
        // TODO: test validations
    }

}
