/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 32.0.2
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.segment.publicapi.api;

import com.segment.publicapi.ApiException;
import com.segment.publicapi.models.CreateFilterForDestination200Response;
import com.segment.publicapi.models.CreateFilterForDestinationV1Input;
import com.segment.publicapi.models.GetFilterInDestination200Response;
import com.segment.publicapi.models.ListFiltersFromDestination200Response;
import com.segment.publicapi.models.PaginationInput;
import com.segment.publicapi.models.PreviewDestinationFilter200Response;
import com.segment.publicapi.models.PreviewDestinationFilterV1Input;
import com.segment.publicapi.models.RemoveFilterFromDestination200Response;
import com.segment.publicapi.models.RequestErrorEnvelope;
import com.segment.publicapi.models.UpdateFilterForDestination200Response;
import com.segment.publicapi.models.UpdateFilterForDestinationV1Input;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DestinationFiltersApi
 */
@Disabled
public class DestinationFiltersApiTest {

    private final DestinationFiltersApi api = new DestinationFiltersApi();

    /**
     * Create Filter for Destination
     *
     * Creates a filter in a Destination.    When called, this endpoint may generate the &#x60;Destination Filter Created&#x60; [Audit Trail](/tag/Audit-Trail) event.       
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFilterForDestinationTest() throws ApiException {
        String destinationId = null;
        CreateFilterForDestinationV1Input createFilterForDestinationV1Input = null;
        CreateFilterForDestination200Response response = api.createFilterForDestination(destinationId, createFilterForDestinationV1Input);
        // TODO: test validations
    }

    /**
     * Get Filter in Destination
     *
     * Gets a Destination filter by id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFilterInDestinationTest() throws ApiException {
        String destinationId = null;
        String filterId = null;
        GetFilterInDestination200Response response = api.getFilterInDestination(destinationId, filterId);
        // TODO: test validations
    }

    /**
     * List Filters from Destination
     *
     * Lists filters for a Destination.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFiltersFromDestinationTest() throws ApiException {
        String destinationId = null;
        PaginationInput pagination = null;
        ListFiltersFromDestination200Response response = api.listFiltersFromDestination(destinationId, pagination);
        // TODO: test validations
    }

    /**
     * Preview Destination Filter
     *
     * Simulates the application of a Destination filter to a provided JSON payload.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void previewDestinationFilterTest() throws ApiException {
        PreviewDestinationFilterV1Input previewDestinationFilterV1Input = null;
        PreviewDestinationFilter200Response response = api.previewDestinationFilter(previewDestinationFilterV1Input);
        // TODO: test validations
    }

    /**
     * Remove Filter from Destination
     *
     * Deletes a Destination filter.    When called, this endpoint may generate the &#x60;Destination Filter Deleted&#x60; [Audit Trail](/tag/Audit-Trail) event.       
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeFilterFromDestinationTest() throws ApiException {
        String destinationId = null;
        String filterId = null;
        RemoveFilterFromDestination200Response response = api.removeFilterFromDestination(destinationId, filterId);
        // TODO: test validations
    }

    /**
     * Update Filter for Destination
     *
     * Updates a filter in a Destination.  When called, this endpoint may generate one or more of the following [Audit Trail](/tag/Audit-Trail) events: * Destination Filter Enabled * Destination Filter Disabled       
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFilterForDestinationTest() throws ApiException {
        String destinationId = null;
        String filterId = null;
        UpdateFilterForDestinationV1Input updateFilterForDestinationV1Input = null;
        UpdateFilterForDestination200Response response = api.updateFilterForDestination(destinationId, filterId, updateFilterForDestinationV1Input);
        // TODO: test validations
    }

}
