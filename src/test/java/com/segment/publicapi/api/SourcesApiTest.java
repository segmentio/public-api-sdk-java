/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 32.0.2
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.segment.publicapi.api;

import com.segment.publicapi.ApiException;
import com.segment.publicapi.models.AddLabelsToSource200Response;
import com.segment.publicapi.models.AddLabelsToSource200Response1;
import com.segment.publicapi.models.AddLabelsToSourceAlphaInput;
import com.segment.publicapi.models.AddLabelsToSourceV1Input;
import com.segment.publicapi.models.CreateSource200Response;
import com.segment.publicapi.models.CreateSource200Response1;
import com.segment.publicapi.models.CreateSourceAlphaInput;
import com.segment.publicapi.models.CreateSourceV1Input;
import com.segment.publicapi.models.DeleteSource200Response;
import com.segment.publicapi.models.DeleteSource200Response1;
import com.segment.publicapi.models.GetSource200Response;
import com.segment.publicapi.models.GetSource200Response1;
import com.segment.publicapi.models.ListConnectedDestinationsFromSource200Response;
import com.segment.publicapi.models.ListConnectedDestinationsFromSource200Response1;
import com.segment.publicapi.models.ListConnectedWarehousesFromSource200Response;
import com.segment.publicapi.models.ListConnectedWarehousesFromSource200Response1;
import com.segment.publicapi.models.ListSchemaSettingsInSource200Response;
import com.segment.publicapi.models.ListSources200Response;
import com.segment.publicapi.models.ListSources200Response1;
import com.segment.publicapi.models.PaginationInput;
import com.segment.publicapi.models.ReplaceLabelsInSource200Response;
import com.segment.publicapi.models.ReplaceLabelsInSource200Response1;
import com.segment.publicapi.models.ReplaceLabelsInSourceAlphaInput;
import com.segment.publicapi.models.ReplaceLabelsInSourceV1Input;
import com.segment.publicapi.models.RequestErrorEnvelope;
import com.segment.publicapi.models.UpdateSchemaSettingsInSource200Response;
import com.segment.publicapi.models.UpdateSchemaSettingsInSourceV1Input;
import com.segment.publicapi.models.UpdateSource200Response;
import com.segment.publicapi.models.UpdateSource200Response1;
import com.segment.publicapi.models.UpdateSourceAlphaInput;
import com.segment.publicapi.models.UpdateSourceV1Input;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SourcesApi
 */
@Disabled
public class SourcesApiTest {

    private final SourcesApi api = new SourcesApi();

    /**
     * Add Labels to Source
     *
     * Adds an existing label to a Source.    When called, this endpoint may generate the &#x60;Source Modified&#x60; [Audit Trail](/tag/Audit-Trail) event.       
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addLabelsToSourceTest() throws ApiException {
        String sourceId = null;
        AddLabelsToSourceAlphaInput addLabelsToSourceAlphaInput = null;
        AddLabelsToSource200Response response = api.addLabelsToSource(sourceId, addLabelsToSourceAlphaInput);
        // TODO: test validations
    }

    /**
     * Create Source
     *
     * Creates a new Source.    When called, this endpoint may generate the &#x60;Source Created&#x60; [Audit Trail](/tag/Audit-Trail) event.       
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSourceTest() throws ApiException {
        CreateSourceAlphaInput createSourceAlphaInput = null;
        CreateSource200Response response = api.createSource(createSourceAlphaInput);
        // TODO: test validations
    }

    /**
     * Delete Source
     *
     * Deletes an existing Source.    When called, this endpoint may generate the &#x60;Source Deleted&#x60; [Audit Trail](/tag/Audit-Trail) event.       
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSourceTest() throws ApiException {
        String sourceId = null;
        DeleteSource200Response response = api.deleteSource(sourceId);
        // TODO: test validations
    }

    /**
     * Get Source
     *
     * Returns a Source by its id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSourceTest() throws ApiException {
        String sourceId = null;
        GetSource200Response response = api.getSource(sourceId);
        // TODO: test validations
    }

    /**
     * List Connected Destinations from Source
     *
     * Returns a list of Destinations connected to a Source.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listConnectedDestinationsFromSourceTest() throws ApiException {
        String sourceId = null;
        PaginationInput pagination = null;
        ListConnectedDestinationsFromSource200Response response = api.listConnectedDestinationsFromSource(sourceId, pagination);
        // TODO: test validations
    }

    /**
     * List Connected Warehouses from Source
     *
     * Returns a list of Warehouses connected to a Source.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listConnectedWarehousesFromSourceTest() throws ApiException {
        String sourceId = null;
        PaginationInput pagination = null;
        ListConnectedWarehousesFromSource200Response response = api.listConnectedWarehousesFromSource(sourceId, pagination);
        // TODO: test validations
    }

    /**
     * List Schema Settings in Source
     *
     * Retrieves the schema configuration settings for a Source. If Protocols is not enabled for the Source, the configurations specific to Protocols will have default values.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSchemaSettingsInSourceTest() throws ApiException {
        String sourceId = null;
        ListSchemaSettingsInSource200Response response = api.listSchemaSettingsInSource(sourceId);
        // TODO: test validations
    }

    /**
     * List Sources
     *
     * Returns a list of Sources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSourcesTest() throws ApiException {
        PaginationInput pagination = null;
        ListSources200Response response = api.listSources(pagination);
        // TODO: test validations
    }

    /**
     * Replace Labels in Source
     *
     * Replaces all labels in a Source.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replaceLabelsInSourceTest() throws ApiException {
        String sourceId = null;
        ReplaceLabelsInSourceAlphaInput replaceLabelsInSourceAlphaInput = null;
        ReplaceLabelsInSource200Response response = api.replaceLabelsInSource(sourceId, replaceLabelsInSourceAlphaInput);
        // TODO: test validations
    }

    /**
     * Update Schema Settings in Source
     *
     * Updates the schema configuration for a Source. If Protocols is not enabled for the Source, any updates to Protocols-specific configurations will not be applied.        Config API omitted fields: - &#x60;updateMask&#x60;       
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSchemaSettingsInSourceTest() throws ApiException {
        String sourceId = null;
        UpdateSchemaSettingsInSourceV1Input updateSchemaSettingsInSourceV1Input = null;
        UpdateSchemaSettingsInSource200Response response = api.updateSchemaSettingsInSource(sourceId, updateSchemaSettingsInSourceV1Input);
        // TODO: test validations
    }

    /**
     * Update Source
     *
     * Updates an existing Source.  When called, this endpoint may generate one or more of the following [Audit Trail](/tag/Audit-Trail) events: * Source Modified * Source Enabled * Source Settings Modified * Source Disabled  Config API omitted fields: - &#x60;updateMask&#x60; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSourceTest() throws ApiException {
        String sourceId = null;
        UpdateSourceAlphaInput updateSourceAlphaInput = null;
        UpdateSource200Response response = api.updateSource(sourceId, updateSourceAlphaInput);
        // TODO: test validations
    }

}
