/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 32.0.2
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.segment.publicapi.api;

import com.segment.publicapi.ApiException;
import com.segment.publicapi.models.AddPermissionsToUser200Response;
import com.segment.publicapi.models.AddPermissionsToUserV1Input;
import com.segment.publicapi.models.CreateInvites200Response;
import com.segment.publicapi.models.CreateInvitesV1Input;
import com.segment.publicapi.models.DeleteInvites200Response;
import com.segment.publicapi.models.DeleteUsers200Response;
import com.segment.publicapi.models.GetUser200Response;
import com.segment.publicapi.models.ListInvites200Response;
import com.segment.publicapi.models.ListUserGroupsFromUser200Response;
import com.segment.publicapi.models.ListUsers200Response;
import com.segment.publicapi.models.PaginationInput;
import com.segment.publicapi.models.ReplacePermissionsForUser200Response;
import com.segment.publicapi.models.ReplacePermissionsForUserV1Input;
import com.segment.publicapi.models.RequestErrorEnvelope;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IamUsersApi
 */
@Disabled
public class IamUsersApiTest {

    private final IamUsersApi api = new IamUsersApi();

    /**
     * Add Permissions to User
     *
     * Adds a list of access permissions to a user.  When called, this endpoint may generate one or more of the following [Audit Trail](/tag/Audit-Trail) events: * Policy Created * User Policy Updated          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addPermissionsToUserTest() throws ApiException {
        String userId = null;
        AddPermissionsToUserV1Input addPermissionsToUserV1Input = null;
        AddPermissionsToUser200Response response = api.addPermissionsToUser(userId, addPermissionsToUserV1Input);
        // TODO: test validations
    }

    /**
     * Create Invites
     *
     * Invites a list of users to join a Workspace.  When called, this endpoint may generate one or more of the following [Audit Trail](/tag/Audit-Trail) events: * Non-Segment User Invited to Workspace * Policy Created * New Segment User Invited to Workspace  Config API omitted fields: - &#x60;parent&#x60;          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createInvitesTest() throws ApiException {
        CreateInvitesV1Input createInvitesV1Input = null;
        CreateInvites200Response response = api.createInvites(createInvitesV1Input);
        // TODO: test validations
    }

    /**
     * Delete Invites
     *
     * Removes a list of invitations to join a Workspace.  When called, this endpoint may generate one or more of the following [Audit Trail](/tag/Audit-Trail) events: * Invite Deleted * Group Memberships Deleted          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteInvitesTest() throws ApiException {
        List<String> emails = null;
        DeleteInvites200Response response = api.deleteInvites(emails);
        // TODO: test validations
    }

    /**
     * Delete Users
     *
     * Removes one or multiple users.    When called, this endpoint may generate the &#x60;Group Memberships Deleted&#x60; [Audit Trail](/tag/Audit-Trail) event.          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUsersTest() throws ApiException {
        List<String> userIds = null;
        DeleteUsers200Response response = api.deleteUsers(userIds);
        // TODO: test validations
    }

    /**
     * Get User
     *
     * Returns a user given their id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserTest() throws ApiException {
        String userId = null;
        GetUser200Response response = api.getUser(userId);
        // TODO: test validations
    }

    /**
     * List Invites
     *
     * Returns a list of invitations to join a Workspace.  Config API omitted fields: - &#x60;parent&#x60; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listInvitesTest() throws ApiException {
        PaginationInput pagination = null;
        ListInvites200Response response = api.listInvites(pagination);
        // TODO: test validations
    }

    /**
     * List User Groups from User
     *
     * Returns all groups a user belongs to.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUserGroupsFromUserTest() throws ApiException {
        String userId = null;
        PaginationInput pagination = null;
        ListUserGroupsFromUser200Response response = api.listUserGroupsFromUser(userId, pagination);
        // TODO: test validations
    }

    /**
     * List Users
     *
     * Returns a list of users with access to the Workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUsersTest() throws ApiException {
        PaginationInput pagination = null;
        ListUsers200Response response = api.listUsers(pagination);
        // TODO: test validations
    }

    /**
     * Replace Permissions for User
     *
     * Updates the list of access permissions for a user.    When called, this endpoint may generate the &#x60;Policy Deleted&#x60; [Audit Trail](/tag/Audit-Trail) event.          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replacePermissionsForUserTest() throws ApiException {
        String userId = null;
        ReplacePermissionsForUserV1Input replacePermissionsForUserV1Input = null;
        ReplacePermissionsForUser200Response response = api.replacePermissionsForUser(userId, replacePermissionsForUserV1Input);
        // TODO: test validations
    }

}
