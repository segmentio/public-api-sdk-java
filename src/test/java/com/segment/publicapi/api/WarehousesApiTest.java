/*
 * Segment Public API
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 32.0.2
 * Contact: friends@segment.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.segment.publicapi.api;

import com.segment.publicapi.ApiException;
import com.segment.publicapi.models.AddConnectionFromSourceToWarehouse200Response;
import com.segment.publicapi.models.CreateValidationInWarehouse200Response;
import com.segment.publicapi.models.CreateValidationInWarehouseV1Input;
import com.segment.publicapi.models.CreateWarehouse200Response;
import com.segment.publicapi.models.CreateWarehouseV1Input;
import com.segment.publicapi.models.DeleteWarehouse200Response;
import com.segment.publicapi.models.GetConnectionStateFromWarehouse200Response;
import com.segment.publicapi.models.GetWarehouse200Response;
import com.segment.publicapi.models.ListConnectedSourcesFromWarehouse200Response;
import com.segment.publicapi.models.ListWarehouses200Response;
import com.segment.publicapi.models.PaginationInput;
import com.segment.publicapi.models.RemoveSourceConnectionFromWarehouse200Response;
import com.segment.publicapi.models.RequestErrorEnvelope;
import com.segment.publicapi.models.UpdateWarehouse200Response;
import com.segment.publicapi.models.UpdateWarehouseV1Input;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WarehousesApi
 */
@Disabled
public class WarehousesApiTest {

    private final WarehousesApi api = new WarehousesApi();

    /**
     * Add Connection from Source to Warehouse
     *
     * Connects a Source to a Warehouse.    When called, this endpoint may generate the &#x60;Storage Destination Modified&#x60; [Audit Trail](/tag/Audit-Trail) event.       
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addConnectionFromSourceToWarehouseTest() throws ApiException {
        String warehouseId = null;
        String sourceId = null;
        AddConnectionFromSourceToWarehouse200Response response = api.addConnectionFromSourceToWarehouse(warehouseId, sourceId);
        // TODO: test validations
    }

    /**
     * Create Validation in Warehouse
     *
     * Validates input settings against a Warehouse.    When called, this endpoint may generate the &#x60;Storage Destination Settings Validation&#x60; [Audit Trail](/tag/Audit-Trail) event.       
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createValidationInWarehouseTest() throws ApiException {
        CreateValidationInWarehouseV1Input createValidationInWarehouseV1Input = null;
        CreateValidationInWarehouse200Response response = api.createValidationInWarehouse(createValidationInWarehouseV1Input);
        // TODO: test validations
    }

    /**
     * Create Warehouse
     *
     * Creates a new Warehouse.    When called, this endpoint may generate the &#x60;Storage Destination Created&#x60; [Audit Trail](/tag/Audit-Trail) event.       
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWarehouseTest() throws ApiException {
        CreateWarehouseV1Input createWarehouseV1Input = null;
        CreateWarehouse200Response response = api.createWarehouse(createWarehouseV1Input);
        // TODO: test validations
    }

    /**
     * Delete Warehouse
     *
     * Deletes an existing Warehouse.    When called, this endpoint may generate the &#x60;Storage Destination Deleted&#x60; [Audit Trail](/tag/Audit-Trail) event.       
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteWarehouseTest() throws ApiException {
        String warehouseId = null;
        DeleteWarehouse200Response response = api.deleteWarehouse(warehouseId);
        // TODO: test validations
    }

    /**
     * Get Connection State from Warehouse
     *
     * Verifies the state of Warehouse connection settings.   The rate limit for this endpoint is 20 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConnectionStateFromWarehouseTest() throws ApiException {
        String warehouseId = null;
        GetConnectionStateFromWarehouse200Response response = api.getConnectionStateFromWarehouse(warehouseId);
        // TODO: test validations
    }

    /**
     * Get Warehouse
     *
     * Returns a Warehouse by its id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWarehouseTest() throws ApiException {
        String warehouseId = null;
        GetWarehouse200Response response = api.getWarehouse(warehouseId);
        // TODO: test validations
    }

    /**
     * List Connected Sources from Warehouse
     *
     * Returns the list of Sources that are connected to a Warehouse.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listConnectedSourcesFromWarehouseTest() throws ApiException {
        String warehouseId = null;
        PaginationInput pagination = null;
        ListConnectedSourcesFromWarehouse200Response response = api.listConnectedSourcesFromWarehouse(warehouseId, pagination);
        // TODO: test validations
    }

    /**
     * List Warehouses
     *
     * Returns a list of Warehouses.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listWarehousesTest() throws ApiException {
        PaginationInput pagination = null;
        ListWarehouses200Response response = api.listWarehouses(pagination);
        // TODO: test validations
    }

    /**
     * Remove Source Connection from Warehouse
     *
     * Disconnects a Source from a Warehouse.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeSourceConnectionFromWarehouseTest() throws ApiException {
        String warehouseId = null;
        String sourceId = null;
        RemoveSourceConnectionFromWarehouse200Response response = api.removeSourceConnectionFromWarehouse(warehouseId, sourceId);
        // TODO: test validations
    }

    /**
     * Update Warehouse
     *
     * Updates an existing Warehouse.  When called, this endpoint may generate one or more of the following [Audit Trail](/tag/Audit-Trail) events: * Storage Destination Modified * Storage Destination Enabled       
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWarehouseTest() throws ApiException {
        String warehouseId = null;
        UpdateWarehouseV1Input updateWarehouseV1Input = null;
        UpdateWarehouse200Response response = api.updateWarehouse(warehouseId, updateWarehouseV1Input);
        // TODO: test validations
    }

}
